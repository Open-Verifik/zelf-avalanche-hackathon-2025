{"version":3,"file":"src_app_dashboard_zelf-keys-passwords_zelf-keys-passwords_component_ts.js","mappings":"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","sources":["./src/app/services/data-passing.service.ts","./src/app/dashboard/zelf-keys-passwords/zelf-keys-passwords.component.ts","./src/app/dashboard/zelf-keys-passwords/zelf-keys-passwords.component.html"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ChromeService } from \"../chrome.service\";\n\nexport interface FormData {\n\t[key: string]: any;\n}\n\nexport interface ApiResult {\n\tsuccess: boolean;\n\tzelfProof: string;\n\tzelfQR: string;\n\tNFT?: {\n\t\tsuccess: boolean;\n\t\ttokenId: string;\n\t\ttransactionHash: string;\n\t\trecipient: string;\n\t\tcost: string;\n\t\tmetadata: any;\n\t\tmetadataUrl: string;\n\t\texplorerUrl: string;\n\t\towner: string;\n\t\tcontractAddress: string;\n\t};\n\tipfs?: {\n\t\thash: string;\n\t\tgatewayUrl: string;\n\t\tpinSize: number;\n\t\ttimestamp: string;\n\t\tname: string;\n\t\tmetadata: any;\n\t};\n\tpublicData?: any;\n\tmessage: string;\n}\n\n@Injectable({\n\tprovidedIn: \"root\",\n})\nexport class DataPassingService {\n\tprivate dataStore: { [key: string]: FormData } = {};\n\tprivate resultStore: { [key: string]: ApiResult } = {};\n\n\tconstructor(private chromeService: ChromeService) {\n\t\t// Load any existing data from localStorage on service initialization\n\t\t// Use setTimeout to avoid blocking constructor\n\t\tsetTimeout(() => {\n\t\t\tthis.loadFromStorage();\n\t\t}, 0);\n\t}\n\n\t/**\n\t * Store form data for a specific form type\n\t */\n\tasync storeData(formType: string, data: FormData): Promise<void> {\n\t\tthis.dataStore[formType] = data;\n\t\tawait this.saveToStorage();\n\t}\n\n\t/**\n\t * Retrieve form data for a specific form type\n\t */\n\tgetData(formType: string): FormData | null {\n\t\tconst data = this.dataStore[formType];\n\t\treturn data || null;\n\t}\n\n\t/**\n\t * Store API result for a specific form type\n\t */\n\tasync storeResult(formType: string, result: ApiResult): Promise<void> {\n\t\tthis.resultStore[formType] = result;\n\t\tawait this.saveToStorage();\n\t}\n\n\t/**\n\t * Retrieve API result for a specific form type\n\t */\n\tgetResult(formType: string): ApiResult | null {\n\t\tconst result = this.resultStore[formType];\n\t\treturn result || null;\n\t}\n\n\t/**\n\t * Clear form data for a specific form type\n\t */\n\tclearData(formType: string): void {\n\t\t// also store it from the chrome storage\n\t\tthis.chromeService.removeItem(`zelfDataPassing`);\n\t\tdelete this.dataStore[formType];\n\t}\n\n\t/**\n\t * Clear result data for a specific form type\n\t */\n\tclearResult(formType: string): void {\n\t\tdelete this.resultStore[formType];\n\t}\n\n\t/**\n\t * Clear all data for a specific form type (both form and result)\n\t */\n\tasync clearAll(formType: string): Promise<void> {\n\t\tthis.clearData(formType);\n\t\tthis.clearResult(formType);\n\t\tawait this.saveToStorage();\n\t}\n\n\t/**\n\t * Check if form data exists for a specific form type\n\t */\n\thasData(formType: string): boolean {\n\t\treturn !!this.dataStore[formType];\n\t}\n\n\t/**\n\t * Check if result data exists for a specific form type\n\t */\n\thasResult(formType: string): boolean {\n\t\treturn !!this.resultStore[formType];\n\t}\n\n\t/**\n\t * Get all stored data for debugging\n\t */\n\tgetAllData(): { formData: { [key: string]: FormData }; resultData: { [key: string]: ApiResult } } {\n\t\treturn {\n\t\t\tformData: { ...this.dataStore },\n\t\t\tresultData: { ...this.resultStore },\n\t\t};\n\t}\n\n\t/**\n\t * Save data to localStorage for persistence\n\t */\n\tprivate async saveToStorage(): Promise<void> {\n\t\ttry {\n\t\t\tconst storageData = {\n\t\t\t\tdataStore: this.dataStore,\n\t\t\t\tresultStore: this.resultStore,\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t};\n\n\t\t\tif (this.chromeService.isExtension) {\n\t\t\t\t// Use Chrome storage for extension\n\t\t\t\tawait this.chromeService.setItem(\"zelfDataPassing\", storageData);\n\t\t\t} else {\n\t\t\t\t// Use localStorage for web\n\t\t\t\tlocalStorage.setItem(\"zelfDataPassing\", JSON.stringify(storageData));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error saving to storage:\", error);\n\t\t}\n\t}\n\n\t/**\n\t * Load data from localStorage on service initialization\n\t */\n\tprivate async loadFromStorage(): Promise<void> {\n\t\ttry {\n\t\t\tlet storageData: any = null;\n\n\t\t\tif (this.chromeService.isExtension) {\n\t\t\t\t// Use Chrome storage for extension\n\t\t\t\tstorageData = await this.chromeService.getItem(\"zelfDataPassing\");\n\t\t\t} else {\n\t\t\t\t// Use localStorage for web\n\t\t\t\tconst localData = localStorage.getItem(\"zelfDataPassing\");\n\t\t\t\tstorageData = localData ? JSON.parse(localData) : null;\n\t\t\t}\n\n\t\t\tif (storageData) {\n\t\t\t\tconst maxAge = 24 * 60 * 60 * 1000; // 24 hours\n\n\t\t\t\t// Check if data is not too old\n\t\t\t\tif (Date.now() - storageData.timestamp < maxAge) {\n\t\t\t\t\tthis.dataStore = storageData.dataStore || {};\n\t\t\t\t\tthis.resultStore = storageData.resultStore || {};\n\t\t\t\t} else {\n\t\t\t\t\tthis.clearAllStorage();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error loading from storage:\", error);\n\t\t\t// Clear potentially corrupted data\n\t\t\tthis.clearAllStorage();\n\t\t}\n\t}\n\n\t/**\n\t * Clear all data from both memory and storage\n\t */\n\tclearAllStorage(): void {\n\t\tthis.dataStore = {};\n\t\tthis.resultStore = {};\n\n\t\ttry {\n\t\t\tif (this.chromeService.isExtension) {\n\t\t\t\tthis.chromeService.removeItem(\"zelfDataPassing\");\n\t\t\t} else {\n\t\t\t\tlocalStorage.removeItem(\"zelfDataPassing\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error clearing storage:\", error);\n\t\t}\n\t}\n\n\t/**\n\t * Manually clear storage for a specific form type\n\t */\n\tasync clearStorageForType(formType: string): Promise<void> {\n\t\tawait this.clearAll(formType);\n\t}\n\n\t/**\n\t * Get storage info for debugging\n\t */\n\tgetStorageInfo(): { isExtension: boolean; hasChromeService: boolean; storageKeys: string[] } {\n\t\treturn {\n\t\t\tisExtension: this.chromeService.isExtension,\n\t\t\thasChromeService: !!this.chromeService,\n\t\t\tstorageKeys: Object.keys(this.dataStore).concat(Object.keys(this.resultStore)),\n\t\t};\n\t}\n}\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { TranslocoModule } from \"@jsverse/transloco\";\nimport { RouterModule, Router } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\nimport { WalletService } from \"../../wallet.service\";\nimport { PasswordDataService } from \"../../services/password-data.service\";\nimport { ChromeService } from \"../../chrome.service\";\nimport { DataCardComponent } from \"../shared/data-card.component\";\nimport { DataPassingService } from \"../../services/data-passing.service\";\n\n@Component({\n\tselector: \"app-zelf-keys-passwords\",\n\tstandalone: true,\n\timports: [CommonModule, TranslocoModule, RouterModule, DataCardComponent],\n\ttemplateUrl: \"./zelf-keys-passwords.component.html\",\n\tstyleUrls: [\"./zelf-keys-passwords.component.scss\"],\n})\nexport class ZelfKeysPasswordsComponent implements OnInit, OnDestroy {\n\tstoredPasswords: any[] = [];\n\tloading = false;\n\terror: string | null = null;\n\tprivate destroy$ = new Subject<void>();\n\n\tconstructor(\n\t\tprivate router: Router,\n\t\tprivate walletService: WalletService,\n\t\tprivate passwordDataService: PasswordDataService,\n\t\tprivate chromeService: ChromeService,\n\t\tprivate dataPassingService: DataPassingService\n\t) {}\n\n\tasync ngOnInit(): Promise<void> {\n\t\t// Ensure extension is in full screen mode for better security and user experience\n\t\t// This is especially important for password management\n\t\tif (this.chromeService.isExtension) {\n\t\t\tawait this.chromeService.ensureFullScreen(\"dashboard/passwords\");\n\t\t}\n\n\t\tthis.loadStoredPasswords();\n\t\t// clean up the data in local storage for the passwords inside data passing service\n\t\tthis.dataPassingService.clearData(\"passwords\");\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.destroy$.next();\n\t\tthis.destroy$.complete();\n\t}\n\n\tasync loadStoredPasswords(): Promise<void> {\n\t\tthis.loading = true;\n\t\tthis.error = null;\n\n\t\ttry {\n\t\t\tconst response = await this.walletService.listStoredPasswords();\n\n\t\t\tif (response?.data && Array.isArray(response.data)) {\n\t\t\t\tthis.storedPasswords = response.data;\n\t\t\t} else if (response?.data && Array.isArray(response.data.data)) {\n\t\t\t\t// Handle nested data structure\n\t\t\t\tthis.storedPasswords = response.data.data;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"No valid data structure found in response\");\n\t\t\t\tthis.storedPasswords = [];\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.error = \"Failed to load stored passwords. Please try again.\";\n\t\t\tthis.storedPasswords = [];\n\t\t} finally {\n\t\t\tthis.loading = false;\n\t\t}\n\t}\n\n\tonAddPassword(): void {\n\t\tthis.router.navigate([\"/dashboard/passwords/new\"]);\n\t}\n\n\tonRefresh(): void {\n\t\tthis.loadStoredPasswords();\n\t}\n\n\tonPasswordClick(password: any): void {\n\t\t// Store the password data in the service\n\t\tthis.passwordDataService.setCurrentPassword(password);\n\n\t\t// Navigate to password detail view\n\t\tthis.router.navigate([\"/dashboard/passwords/detail\"]);\n\t}\n\n\ttrackByPassword(index: number, password: any): any {\n\t\treturn password.publicData?.id || password.publicData?.title || index;\n\t}\n}\n","<div class=\"zelf-keys-passwords\">\n\t<div class=\"header\">\n\t\t<h2>Passwords</h2>\n\t\t<p>Manage your secure passwords and credentials</p>\n\t</div>\n\n\t<div class=\"content\">\n\t\t<!-- Loading State -->\n\t\t<div *ngIf=\"loading\" class=\"loading-state\">\n\t\t\t<div class=\"spinner\"></div>\n\t\t\t<p>Loading your passwords...</p>\n\t\t</div>\n\n\t\t<!-- Error State -->\n\t\t<div *ngIf=\"error && !loading\" class=\"error-state\">\n\t\t\t<div class=\"icon\">⚠️</div>\n\t\t\t<h3>Error loading passwords</h3>\n\t\t\t<p>{{ error }}</p>\n\t\t\t<button class=\"btn-secondary\" (click)=\"onRefresh()\">Try Again</button>\n\t\t</div>\n\n\t\t<!-- Empty State -->\n\t\t<div *ngIf=\"!loading && !error && storedPasswords.length === 0\" class=\"empty-state\">\n\t\t\t<div class=\"icon\">🔐</div>\n\t\t\t<h3>No passwords yet</h3>\n\t\t\t<p>Start adding your passwords to keep them secure and easily accessible</p>\n\t\t\t<button class=\"btn-primary\" (click)=\"onAddPassword()\">Add Password</button>\n\t\t</div>\n\n\t\t<!-- Passwords Grid -->\n\t\t<div *ngIf=\"!loading && !error && storedPasswords.length > 0\" class=\"passwords-grid\">\n\t\t\t<div class=\"list-header\">\n\t\t\t\t<h3>{{ storedPasswords.length }} stored password{{ storedPasswords.length !== 1 ? \"s\" : \"\" }}</h3>\n\t\t\t\t<button class=\"btn-secondary\" (click)=\"onRefresh()\">Refresh</button>\n\t\t\t</div>\n\n\t\t\t<div class=\"password-cards\">\n\t\t\t\t<app-data-card\n\t\t\t\t\t*ngFor=\"let password of storedPasswords; trackBy: trackByPassword\"\n\t\t\t\t\t[item]=\"password\"\n\t\t\t\t\tcategory=\"password\"\n\t\t\t\t\t(cardClick)=\"onPasswordClick($event)\"\n\t\t\t\t\t(launchClick)=\"onPasswordClick($event)\"\n\t\t\t\t\t(optionsClick)=\"onPasswordClick($event)\"\n\t\t\t\t>\n\t\t\t\t</app-data-card>\n\t\t\t</div>\n\n\t\t\t<div class=\"add-more\">\n\t\t\t\t<button class=\"btn-primary\" (click)=\"onAddPassword()\">Add Another Password</button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n"],"names":["DataPassingService","chromeService","dataStore","resultStore","constructor","setTimeout","loadFromStorage","storeData","formType","data","_this","_asyncToGenerator","saveToStorage","getData","storeResult","result","_this2","getResult","clearData","removeItem","clearResult","clearAll","_this3","hasData","hasResult","getAllData","formData","resultData","_this4","storageData","timestamp","Date","now","isExtension","setItem","localStorage","JSON","stringify","error","console","_this5","getItem","localData","parse","maxAge","clearAllStorage","clearStorageForType","_this6","getStorageInfo","hasChromeService","storageKeys","Object","keys","concat","i0","ɵɵinject","i1","ChromeService","factory","ɵfac","providedIn","CommonModule","TranslocoModule","RouterModule","Subject","DataCardComponent","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵlistener","ZelfKeysPasswordsComponent_div_8_Template_button_click_7_listener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","onRefresh","ɵɵadvance","ɵɵtextInterpolate","ZelfKeysPasswordsComponent_div_9_Template_button_click_7_listener","_r3","onAddPassword","ZelfKeysPasswordsComponent_div_10_app_data_card_7_Template_app_data_card_cardClick_0_listener","$event","_r5","onPasswordClick","ZelfKeysPasswordsComponent_div_10_app_data_card_7_Template_app_data_card_launchClick_0_listener","ZelfKeysPasswordsComponent_div_10_app_data_card_7_Template_app_data_card_optionsClick_0_listener","ɵɵproperty","password_r6","ZelfKeysPasswordsComponent_div_10_Template_button_click_4_listener","_r4","ɵɵtemplate","ZelfKeysPasswordsComponent_div_10_app_data_card_7_Template","ZelfKeysPasswordsComponent_div_10_Template_button_click_9_listener","ɵɵtextInterpolate2","storedPasswords","length","trackByPassword","ZelfKeysPasswordsComponent","router","walletService","passwordDataService","dataPassingService","loading","destroy$","ngOnInit","ensureFullScreen","loadStoredPasswords","ngOnDestroy","next","complete","response","listStoredPasswords","Array","isArray","log","navigate","password","setCurrentPassword","index","publicData","id","title","ɵɵdirectiveInject","Router","i2","WalletService","i3","PasswordDataService","i4","i5","selectors","decls","vars","consts","template","ZelfKeysPasswordsComponent_Template","rf","ctx","ZelfKeysPasswordsComponent_div_7_Template","ZelfKeysPasswordsComponent_div_8_Template","ZelfKeysPasswordsComponent_div_9_Template","ZelfKeysPasswordsComponent_div_10_Template","i6","NgForOf","NgIf","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}