{"version":3,"file":"default-node_modules_angular_cdk_fesm2022_dialog_mjs.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA2C;AACP;AACqM;AAC/L;AACmH;AAAA,SAAA8B,0CAAAC,EAAA,EAAAC,GAAA;AAC7B;AACjB;AAC8B;AAC5E;AACT;AAC2B;AAC7B;AACN;AACC;AACe;AACI;AAC/B;AACd;AACsB;AACf;AACL;AACO;AACgB;AACP;AACD;AACf;AACS;AACd;AACmC;AACnB;AACS;AACH;;AAE1C;AACA,MAAMkC,YAAY,CAAC;EACf;AACJ;AACA;AACA;AACA;AACA;EACIC,gBAAgB;EAChB;AACJ;AACA;AACA;EACIC,QAAQ;EACR;EACAC,EAAE;EACF;EACAC,IAAI,GAAG,QAAQ;EACf;EACAC,UAAU,GAAG,EAAE;EACf;EACAC,WAAW,GAAG,IAAI;EAClB;EACAC,aAAa,GAAG,EAAE;EAClB;EACAC,YAAY,GAAG,KAAK;EACpB;EACAC,KAAK,GAAG,EAAE;EACV;EACAC,MAAM,GAAG,EAAE;EACX;EACAC,QAAQ;EACR;EACAC,SAAS;EACT;EACAC,QAAQ;EACR;EACAC,SAAS;EACT;EACAC,gBAAgB;EAChB;EACAC,IAAI,GAAG,IAAI;EACX;EACAC,SAAS;EACT;EACAC,eAAe,GAAG,IAAI;EACtB;EACAC,cAAc,GAAG,IAAI;EACrB;EACAC,SAAS,GAAG,IAAI;EAChB;AACJ;AACA;AACA;AACA;EACIC,SAAS,GAAG,KAAK;EACjB;AACJ;AACA;AACA;AACA;EACIC,SAAS,GAAG,gBAAgB;EAC5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,YAAY,GAAG,IAAI;EACnB;AACJ;AACA;AACA;EACIC,cAAc;EACd;AACJ;AACA;AACA;AACA;EACIC,iBAAiB,GAAG,IAAI;EACxB;AACJ;AACA;AACA;EACIC,cAAc,GAAG,IAAI;EACrB;AACJ;AACA;AACA;AACA;AACA;EACIC,yBAAyB,GAAG,IAAI;EAChC;AACJ;AACA;AACA;AACA;EACIC,wBAAwB;EACxB;AACJ;AACA;AACA;EACIC,SAAS;EACT;AACJ;AACA;AACA;AACA;EACIC,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","sources":["./node_modules/@angular/cdk/fesm2022/dialog.mjs"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ElementRef, NgZone, Renderer2, ChangeDetectorRef, Injector, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, InjectionToken, TemplateRef, Injectable, NgModule } from '@angular/core';\nimport { Subject, defer, of } from 'rxjs';\nimport { B as BasePortalOutlet, f as CdkPortalOutlet, C as ComponentPortal, T as TemplatePortal, h as PortalModule } from './portal-directives-Bw5woq8I.mjs';\nexport { d as ɵɵCdkPortal, g as ɵɵPortalHostDirective, e as ɵɵTemplatePortalDirective } from './portal-directives-Bw5woq8I.mjs';\nimport { F as FocusTrapFactory, I as InteractivityChecker, A as A11yModule } from './a11y-module-BYox5gpI.mjs';\nimport { c as OverlayRef, a as Overlay, O as OverlayContainer, f as OverlayConfig, m as OverlayModule } from './overlay-module-BUj0D19H.mjs';\nimport { F as FocusMonitor } from './focus-monitor-e2l_RpN3.mjs';\nimport { P as Platform } from './platform-DmdVEw_C.mjs';\nimport { c as _getFocusedElementPierceShadowDom } from './shadow-dom-B0oHn41l.mjs';\nimport { g as ESCAPE } from './keycodes-CpHkExLC.mjs';\nimport { hasModifierKey } from './keycodes.mjs';\nimport { startWith, take } from 'rxjs/operators';\nimport { _ as _IdGenerator } from './id-generator-Dw_9dSDu.mjs';\nimport { D as Directionality } from './directionality-CBXD4hga.mjs';\nimport './style-loader-Cu9AvjH9.mjs';\nimport './private.mjs';\nimport './breakpoints-observer-CljOfYGy.mjs';\nimport './array-I1yfCXUO.mjs';\nimport './observers.mjs';\nimport './element-x4z00URv.mjs';\nimport './backwards-compatibility-DHR38MsD.mjs';\nimport './test-environment-CT0XxPyp.mjs';\nimport './css-pixel-value-C_HEqLhI.mjs';\nimport './scrolling.mjs';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\nimport './recycle-view-repeater-strategy-DoWdPqVw.mjs';\nimport './data-source-D34wiQZj.mjs';\nimport './fake-event-detection-DWOdFTFz.mjs';\nimport './passive-listeners-esHZRgIN.mjs';\n\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     */\n    viewContainerRef;\n    /**\n     * Injector used for the instantiation of the component to be attached. If provided,\n     * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n     */\n    injector;\n    /** ID for the dialog. If omitted, a unique one will be generated. */\n    id;\n    /** The ARIA role of the dialog element. */\n    role = 'dialog';\n    /** Optional CSS class or classes applied to the overlay panel. */\n    panelClass = '';\n    /** Whether the dialog has a backdrop. */\n    hasBackdrop = true;\n    /** Optional CSS class or classes applied to the overlay backdrop. */\n    backdropClass = '';\n    /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n    disableClose = false;\n    /** Width of the dialog. */\n    width = '';\n    /** Height of the dialog. */\n    height = '';\n    /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n    minWidth;\n    /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n    minHeight;\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. */\n    maxWidth;\n    /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n    maxHeight;\n    /** Strategy to use when positioning the dialog. Defaults to centering it on the page. */\n    positionStrategy;\n    /** Data being injected into the child component. */\n    data = null;\n    /** Layout direction for the dialog's content. */\n    direction;\n    /** ID of the element that describes the dialog. */\n    ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n    ariaLabelledBy = null;\n    /** Dialog label applied via `aria-label` */\n    ariaLabel = null;\n    /**\n     * Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,\n     * because it can interfere with other overlay-based components (e.g. `mat-select`) and because\n     * it is redundant since the dialog marks all outside content as `aria-hidden` anyway.\n     */\n    ariaModal = false;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n    autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the previously-focused element upon closing.\n     * Has the following behavior based on the type that is passed in:\n     * - `boolean` - when true, will return focus to the element that was focused before the dialog\n     *    was opened, otherwise won't restore focus at all.\n     * - `string` - focus will be restored to the first element that matches the CSS selector.\n     * - `HTMLElement` - focus will be restored to the specific element.\n     */\n    restoreFocus = true;\n    /**\n     * Scroll strategy to be used for the dialog. This determines how\n     * the dialog responds to scrolling underneath the panel element.\n     */\n    scrollStrategy;\n    /**\n     * Whether the dialog should close when the user navigates backwards or forwards through browser\n     * history. This does not apply to navigation via anchor element unless using URL-hash based\n     * routing (`HashLocationStrategy` in the Angular router).\n     */\n    closeOnNavigation = true;\n    /**\n     * Whether the dialog should close when the dialog service is destroyed. This is useful if\n     * another service is wrapping the dialog and is managing the destruction instead.\n     */\n    closeOnDestroy = true;\n    /**\n     * Whether the dialog should close when the underlying overlay is detached. This is useful if\n     * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n     * external detachment can happen as a result of a scroll strategy triggering it or when the\n     * browser location changes.\n     */\n    closeOnOverlayDetachments = true;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * @deprecated No longer used. Will be removed.\n     * @breaking-change 20.0.0\n     */\n    componentFactoryResolver;\n    /**\n     * Providers that will be exposed to the contents of the dialog. Can also\n     * be provided as a function in order to generate the providers lazily.\n     */\n    providers;\n    /**\n     * Component into which the dialog content will be rendered. Defaults to `CdkDialogContainer`.\n     * A configuration object can be passed in to customize the providers that will be exposed\n     * to the dialog container.\n     */\n    container;\n    /**\n     * Context that will be passed to template-based dialogs.\n     * A function can be passed in to resolve the context lazily.\n     */\n    templateContext;\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    _elementRef = inject(ElementRef);\n    _focusTrapFactory = inject(FocusTrapFactory);\n    _config;\n    _interactivityChecker = inject(InteractivityChecker);\n    _ngZone = inject(NgZone);\n    _overlayRef = inject(OverlayRef);\n    _focusMonitor = inject(FocusMonitor);\n    _renderer = inject(Renderer2);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _injector = inject(Injector);\n    _platform = inject(Platform);\n    _document = inject(DOCUMENT, { optional: true });\n    /** The portal outlet inside of this container into which the dialog content will be loaded. */\n    _portalOutlet;\n    _focusTrapped = new Subject();\n    /** The class that traps and manages focus within the dialog. */\n    _focusTrap = null;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n    _elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * Type of interaction that led to the dialog being closed. This is used to determine\n     * whether the focus style will be applied when returning focus to its original location\n     * after the dialog is closed.\n     */\n    _closeInteractionType = null;\n    /**\n     * Queue of the IDs of the dialog's label element, based on their definition order. The first\n     * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n     * where there are two or more titles in the DOM at a time and the first one is destroyed while\n     * the rest are present.\n     */\n    _ariaLabelledByQueue = [];\n    _isDestroyed = false;\n    constructor() {\n        super();\n        // Callback is primarily for some internal tests\n        // that were instantiating the dialog container manually.\n        this._config = (inject(DialogConfig, { optional: true }) || new DialogConfig());\n        if (this._config.ariaLabelledBy) {\n            this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n        }\n    }\n    _addAriaLabelledBy(id) {\n        this._ariaLabelledByQueue.push(id);\n        this._changeDetectorRef.markForCheck();\n    }\n    _removeAriaLabelledBy(id) {\n        const index = this._ariaLabelledByQueue.indexOf(id);\n        if (index > -1) {\n            this._ariaLabelledByQueue.splice(index, 1);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._handleBackdropClicks();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._focusTrapped.complete();\n        this._isDestroyed = true;\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    attachDomPortal = (portal) => {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachDomPortal(portal);\n        this._contentAttached();\n        return result;\n    };\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    deregisterBlur();\n                    deregisterMousedown();\n                    element.removeAttribute('tabindex');\n                };\n                const deregisterBlur = this._renderer.listen(element, 'blur', callback);\n                const deregisterMousedown = this._renderer.listen(element, 'mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus(options) {\n        if (this._isDestroyed) {\n            return;\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait until after the next render.\n        afterNextRender(() => {\n            const element = this._elementRef.nativeElement;\n            switch (this._config.autoFocus) {\n                case false:\n                case 'dialog':\n                    // Ensure that focus is on the dialog container. It's possible that a different\n                    // component tried to move focus while the open animation was running. See:\n                    // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                    // if the focus isn't inside the dialog already, because it's possible that the consumer\n                    // turned off `autoFocus` in order to move focus themselves.\n                    if (!this._containsFocus()) {\n                        element.focus(options);\n                    }\n                    break;\n                case true:\n                case 'first-tabbable':\n                    const focusedSuccessfully = this._focusTrap?.focusInitialElement(options);\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer(options);\n                    }\n                    break;\n                case 'first-heading':\n                    this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]', options);\n                    break;\n                default:\n                    this._focusByCssSelector(this._config.autoFocus, options);\n                    break;\n            }\n            this._focusTrapped.next();\n        }, { injector: this._injector });\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer(options) {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus(options);\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            // Save the previously focused element. This element will be re-focused\n            // when the dialog closes.\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n            }\n        }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n    _handleBackdropClicks() {\n        // Clicking on the backdrop will move focus out of dialog.\n        // Recapture it if closing via the backdrop is disabled.\n        this._overlayRef.backdropClick().subscribe(() => {\n            if (this._config.disableClose) {\n                this._recaptureFocus();\n            }\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDialogContainer, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkDialogContainer, isStandalone: true, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\\n\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, imports: [CdkPortalOutlet], host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    overlayRef;\n    config;\n    /**\n     * Instance of component opened into the dialog. Will be\n     * null when the dialog is opened using a `TemplateRef`.\n     */\n    componentInstance;\n    /**\n     * `ComponentRef` of the component opened into the dialog. Will be\n     * null when the dialog is opened using a `TemplateRef`.\n     */\n    componentRef;\n    /** Instance of the container that is rendering out the dialog content. */\n    containerInstance;\n    /** Whether the user is allowed to close the dialog. */\n    disableClose;\n    /** Emits when the dialog has been closed. */\n    closed = new Subject();\n    /** Emits when the backdrop of the dialog is clicked. */\n    backdropClick;\n    /** Emits when on keyboard events within the dialog. */\n    keydownEvents;\n    /** Emits on pointer events that happen outside of the dialog. */\n    outsidePointerEvents;\n    /** Unique ID for the dialog. */\n    id;\n    /** Subscription to external detachments of the dialog. */\n    _detachSubscription;\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n        });\n        this._detachSubscription = overlayRef.detachments().subscribe(() => {\n            // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n            if (config.closeOnOverlayDetachments !== false) {\n                this.close();\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this.containerInstance) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n            // Drop the detach subscription first since it can be triggered by the\n            // `dispose` call and override the result of this closing sequence.\n            this._detachSubscription.unsubscribe();\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n}\n\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nclass Dialog {\n    _overlay = inject(Overlay);\n    _injector = inject(Injector);\n    _defaultOptions = inject(DEFAULT_DIALOG_CONFIG, { optional: true });\n    _parentDialog = inject(Dialog, { optional: true, skipSelf: true });\n    _overlayContainer = inject(OverlayContainer);\n    _idGenerator = inject(_IdGenerator);\n    _openDialogsAtThisLevel = [];\n    _afterAllClosedAtThisLevel = new Subject();\n    _afterOpenedAtThisLevel = new Subject();\n    _ariaHiddenElements = new Map();\n    _scrollStrategy = inject(DIALOG_SCROLL_STRATEGY);\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    afterAllClosed = defer(() => this.openDialogs.length\n        ? this._getAfterAllClosed()\n        : this._getAfterAllClosed().pipe(startWith(undefined)));\n    constructor() { }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = { ...defaults, ...config };\n        config.id = config.id || this._idGenerator.getId('cdk-dialog-');\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = this._overlay.create(overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            // Resolve this ahead of time, because some internal apps\n            // mock it out and depend on it being synchronous.\n            const overlayContainer = this._overlayContainer.getContainerElement();\n            if (dialogContainer._focusTrapped) {\n                dialogContainer._focusTrapped.pipe(take(1)).subscribe(() => {\n                    this._hideNonDialogContentFromAssistiveTechnology(overlayContainer);\n                });\n            }\n            else {\n                this._hideNonDialogContentFromAssistiveTechnology(overlayContainer);\n            }\n        }\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                this._overlay.position().global().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }));\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = {\n                    ...context,\n                    ...(typeof config.templateContext === 'function'\n                        ? config.templateContext()\n                        : config.templateContext),\n                };\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentRef = contentRef;\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, { optional: true }))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || fallbackInjector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology(overlayContainer) {\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: Dialog, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: Dialog, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\nclass DialogModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: DialogModule, imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer], exports: [\n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule,\n            CdkDialogContainer] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DialogModule, providers: [Dialog], imports: [OverlayModule, PortalModule, A11yModule, \n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    providers: [Dialog],\n                }]\n        }] });\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError, CdkPortalOutlet as ɵɵCdkPortalOutlet };\n"],"names":["DOCUMENT","i0","inject","ElementRef","NgZone","Renderer2","ChangeDetectorRef","Injector","afterNextRender","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","InjectionToken","TemplateRef","Injectable","NgModule","Subject","defer","of","B","BasePortalOutlet","f","CdkPortalOutlet","C","ComponentPortal","T","TemplatePortal","h","PortalModule","CdkDialogContainer_ng_template_0_Template","rf","ctx","d","ɵɵCdkPortal","g","ɵɵPortalHostDirective","e","ɵɵTemplatePortalDirective","F","FocusTrapFactory","I","InteractivityChecker","A","A11yModule","c","OverlayRef","a","Overlay","O","OverlayContainer","OverlayConfig","m","OverlayModule","FocusMonitor","P","Platform","_getFocusedElementPierceShadowDom","ESCAPE","hasModifierKey","startWith","take","_","_IdGenerator","D","Directionality","DialogConfig","viewContainerRef","injector","id","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","minWidth","minHeight","maxWidth","maxHeight","positionStrategy","data","direction","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","scrollStrategy","closeOnNavigation","closeOnDestroy","closeOnOverlayDetachments","componentFactoryResolver","providers","container","templateContext","throwDialogContentAlreadyAttachedError","Error","CdkDialogContainer","_elementRef","_focusTrapFactory","_config","_interactivityChecker","_ngZone","_overlayRef","_focusMonitor","_renderer","_changeDetectorRef","_injector","_platform","_document","optional","_portalOutlet","_focusTrapped","_focusTrap","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","_ariaLabelledByQueue","_isDestroyed","constructor","push","_addAriaLabelledBy","markForCheck","_removeAriaLabelledBy","index","indexOf","splice","_contentAttached","_initializeFocusTrap","_handleBackdropClicks","_captureInitialFocus","_trapFocus","ngOnDestroy","complete","_restoreFocus","attachComponentPortal","portal","hasAttached","ngDevMode","result","attachTemplatePortal","attachDomPortal","_recaptureFocus","_containsFocus","_forceFocus","element","options","isFocusable","tabIndex","runOutsideAngular","callback","deregisterBlur","deregisterMousedown","removeAttribute","listen","focus","_focusByCssSelector","selector","elementToFocus","nativeElement","querySelector","focusedSuccessfully","focusInitialElement","_focusDialogContainer","next","focusConfig","focusTargetElement","activeElement","body","contains","focusVia","destroy","isBrowser","create","backdropClick","subscribe","ɵfac","CdkDialogContainer_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","CdkDialogContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","CdkDialogContainer_HostBindings","ɵɵattribute","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","CdkDialogContainer_Template","ɵɵtemplate","dependencies","styles","encapsulation","ɵsetClassMetadata","args","None","changeDetection","Default","imports","host","static","DialogRef","overlayRef","config","componentInstance","componentRef","containerInstance","closed","keydownEvents","outsidePointerEvents","_detachSubscription","event","keyCode","preventDefault","close","undefined","focusOrigin","detachments","closedSubject","unsubscribe","dispose","updatePosition","updateSize","addPanelClass","classes","removePanelClass","DIALOG_SCROLL_STRATEGY","providedIn","factory","overlay","scrollStrategies","block","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","Dialog","_overlay","_defaultOptions","_parentDialog","skipSelf","_overlayContainer","_idGenerator","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","_scrollStrategy","openDialogs","afterOpened","afterAllClosed","length","_getAfterAllClosed","pipe","open","componentOrTemplateRef","defaults","getId","getDialogById","overlayConfig","_getOverlayConfig","dialogRef","dialogContainer","_attachContainer","overlayContainer","getContainerElement","_hideNonDialogContentFromAssistiveTechnology","_attachDialogContent","_removeOpenDialog","closeAll","reverseForEach","dialog","find","state","position","global","centerHorizontally","centerVertically","disposeOnNavigation","userInjector","useValue","containerType","containerPortal","parent","containerRef","attach","instance","_createInjector","context","$implicit","contentRef","fallbackInjector","get","value","change","emitEvent","forEach","previousValue","setAttribute","clear","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","Dialog_Factory","ɵprov","ɵɵdefineInjectable","token","items","DialogModule","DialogModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","ɵɵCdkPortalOutlet"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}