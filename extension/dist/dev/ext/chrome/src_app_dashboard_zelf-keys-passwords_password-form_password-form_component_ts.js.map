{"version":3,"file":"src_app_dashboard_zelf-keys-passwords_password-form_password-form_component_ts.js","mappings":";;;;;;;;;;;;;;;;;;;AAsCM,MAAOA,kBAAkB;EAIVC,aAAA;EAHZC,SAAS,GAAgC,EAAE;EAC3CC,WAAW,GAAiC,EAAE;EAEtDC,YAAoBH,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IAChC;IACA;IACAI,UAAU,CAAC,MAAK;MACf,IAAI,CAACC,eAAe,EAAE;IACvB,CAAC,EAAE,CAAC,CAAC;EACN;EAEA;;;EAGMC,SAASA,CAACC,QAAgB,EAAEC,IAAc;IAAA,IAAAC,KAAA;IAAA,OAAAC,sMAAA;MAC/CD,KAAI,CAACR,SAAS,CAACM,QAAQ,CAAC,GAAGC,IAAI;MAC/B,MAAMC,KAAI,CAACE,aAAa,EAAE;IAAC;EAC5B;EAEA;;;EAGAC,OAAOA,CAACL,QAAgB;IACvB,MAAMC,IAAI,GAAG,IAAI,CAACP,SAAS,CAACM,QAAQ,CAAC;IACrC,OAAOC,IAAI,IAAI,IAAI;EACpB;EAEA;;;EAGMK,WAAWA,CAACN,QAAgB,EAAEO,MAAiB;IAAA,IAAAC,MAAA;IAAA,OAAAL,sMAAA;MACpDK,MAAI,CAACb,WAAW,CAACK,QAAQ,CAAC,GAAGO,MAAM;MACnC,MAAMC,MAAI,CAACJ,aAAa,EAAE;IAAC;EAC5B;EAEA;;;EAGAK,SAASA,CAACT,QAAgB;IACzB,MAAMO,MAAM,GAAG,IAAI,CAACZ,WAAW,CAACK,QAAQ,CAAC;IACzC,OAAOO,MAAM,IAAI,IAAI;EACtB;EAEA;;;EAGAG,SAASA,CAACV,QAAgB;IACzB;IACA,IAAI,CAACP,aAAa,CAACkB,UAAU,CAAC,iBAAiB,CAAC;IAChD,OAAO,IAAI,CAACjB,SAAS,CAACM,QAAQ,CAAC;EAChC;EAEA;;;EAGAY,WAAWA,CAACZ,QAAgB;IAC3B,OAAO,IAAI,CAACL,WAAW,CAACK,QAAQ,CAAC;EAClC;EAEA;;;EAGMa,QAAQA,CAACb,QAAgB;IAAA,IAAAc,MAAA;IAAA,OAAAX,sMAAA;MAC9BW,MAAI,CAACJ,SAAS,CAACV,QAAQ,CAAC;MACxBc,MAAI,CAACF,WAAW,CAACZ,QAAQ,CAAC;MAC1B,MAAMc,MAAI,CAACV,aAAa,EAAE;IAAC;EAC5B;EAEA;;;EAGAW,OAAOA,CAACf,QAAgB;IACvB,OAAO,CAAC,CAAC,IAAI,CAACN,SAAS,CAACM,QAAQ,CAAC;EAClC;EAEA;;;EAGAgB,SAASA,CAAChB,QAAgB;IACzB,OAAO,CAAC,CAAC,IAAI,CAACL,WAAW,CAACK,QAAQ,CAAC;EACpC;EAEA;;;EAGAiB,UAAUA,CAAA;IACT,OAAO;MACNC,QAAQ,EAAE;QAAE,GAAG,IAAI,CAACxB;MAAS,CAAE;MAC/ByB,UAAU,EAAE;QAAE,GAAG,IAAI,CAACxB;MAAW;KACjC;EACF;EAEA;;;EAGcS,aAAaA,CAAA;IAAA,IAAAgB,MAAA;IAAA,OAAAjB,sMAAA;MAC1B,IAAI;QACH,MAAMkB,WAAW,GAAG;UACnB3B,SAAS,EAAE0B,MAAI,CAAC1B,SAAS;UACzBC,WAAW,EAAEyB,MAAI,CAACzB,WAAW;UAC7B2B,SAAS,EAAEC,IAAI,CAACC,GAAG;SACnB;QAED,IAAIJ,MAAI,CAAC3B,aAAa,CAACgC,WAAW,EAAE;UACnC;UACA,MAAML,MAAI,CAAC3B,aAAa,CAACiC,OAAO,CAAC,iBAAiB,EAAEL,WAAW,CAAC;QACjE,CAAC,MAAM;UACN;UACAM,YAAY,CAACD,OAAO,CAAC,iBAAiB,EAAEE,IAAI,CAACC,SAAS,CAACR,WAAW,CAAC,CAAC;QACrE;MACD,CAAC,CAAC,OAAOS,KAAK,EAAE;QACfC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACjD;IAAC;EACF;EAEA;;;EAGchC,eAAeA,CAAA;IAAA,IAAAkC,MAAA;IAAA,OAAA7B,sMAAA;MAC5B,IAAI;QACH,IAAIkB,WAAW,GAAQ,IAAI;QAE3B,IAAIW,MAAI,CAACvC,aAAa,CAACgC,WAAW,EAAE;UACnC;UACAJ,WAAW,SAASW,MAAI,CAACvC,aAAa,CAACwC,OAAO,CAAC,iBAAiB,CAAC;QAClE,CAAC,MAAM;UACN;UACA,MAAMC,SAAS,GAAGP,YAAY,CAACM,OAAO,CAAC,iBAAiB,CAAC;UACzDZ,WAAW,GAAGa,SAAS,GAAGN,IAAI,CAACO,KAAK,CAACD,SAAS,CAAC,GAAG,IAAI;QACvD;QAEA,IAAIb,WAAW,EAAE;UAChB,MAAMe,MAAM,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;UAEpC;UACA,IAAIb,IAAI,CAACC,GAAG,EAAE,GAAGH,WAAW,CAACC,SAAS,GAAGc,MAAM,EAAE;YAChDJ,MAAI,CAACtC,SAAS,GAAG2B,WAAW,CAAC3B,SAAS,IAAI,EAAE;YAC5CsC,MAAI,CAACrC,WAAW,GAAG0B,WAAW,CAAC1B,WAAW,IAAI,EAAE;UACjD,CAAC,MAAM;YACNqC,MAAI,CAACK,eAAe,EAAE;UACvB;QACD;MACD,CAAC,CAAC,OAAOP,KAAK,EAAE;QACfC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnD;QACAE,MAAI,CAACK,eAAe,EAAE;MACvB;IAAC;EACF;EAEA;;;EAGAA,eAAeA,CAAA;IACd,IAAI,CAAC3C,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,WAAW,GAAG,EAAE;IAErB,IAAI;MACH,IAAI,IAAI,CAACF,aAAa,CAACgC,WAAW,EAAE;QACnC,IAAI,CAAChC,aAAa,CAACkB,UAAU,CAAC,iBAAiB,CAAC;MACjD,CAAC,MAAM;QACNgB,YAAY,CAAChB,UAAU,CAAC,iBAAiB,CAAC;MAC3C;IACD,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACfC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAChD;EACD;EAEA;;;EAGMQ,mBAAmBA,CAACtC,QAAgB;IAAA,IAAAuC,MAAA;IAAA,OAAApC,sMAAA;MACzC,MAAMoC,MAAI,CAAC1B,QAAQ,CAACb,QAAQ,CAAC;IAAC;EAC/B;EAEA;;;EAGAwC,cAAcA,CAAA;IACb,OAAO;MACNf,WAAW,EAAE,IAAI,CAAChC,aAAa,CAACgC,WAAW;MAC3CgB,gBAAgB,EAAE,CAAC,CAAC,IAAI,CAAChD,aAAa;MACtCiD,WAAW,EAAEC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAClD,SAAS,CAAC,CAACmD,MAAM,CAACF,MAAM,CAACC,IAAI,CAAC,IAAI,CAACjD,WAAW,CAAC;KAC7E;EACF;;qCAxLYH,kBAAkB,EAAAsD,sDAAA,CAAAE,0DAAA;EAAA;;WAAlBxD,kBAAkB;IAAA0D,OAAA,EAAlB1D,kBAAkB,CAAA2D,IAAA;IAAAC,UAAA,EAFlB;EAAM;;;;;;;;;;;;;;;;;;;;;;;;;ACnC4B;AACM;AACkB;AAC1B;;;;;;;;;;ICoDvCN,4DAAA,cAAkF;IACjFA,uDAAA,eAGE;IACHA,0DAAA,EAAM;;;;;;IACNA,4DAAA,cAAiF;IAKhFA,uDAJA,eAGE,eAC8E;IACjFA,0DAAA,EAAM;;;ADrDN,MAAOc,qBAAqB;EAgBxBC,MAAA;EACAC,KAAA;EACArE,aAAA;EACAsE,kBAAA;EAlBTC,YAAY,GAAG;IACdC,GAAG,EAAE,oBAAoB;IACzBC,KAAK,EAAE,iBAAiB;IACxBC,KAAK,EAAE,mBAAmB;IAC1BC,QAAQ,EAAE,eAAe;IACzBC,KAAK,EAAE,mBAAmB;IAC1BC,MAAM,EAAE,cAAc;IACtBC,YAAY,EAAE;GACd;EAEDC,aAAa,GAAG,IAAI;EACpBC,YAAY,GAAG,KAAK;EACpBC,SAAS,GAAG,KAAK;EAEjB9E,YACSiE,MAAc,EACdC,KAAqB,EACrBrE,aAA4B,EAC5BsE,kBAAsC;IAHtC,KAAAF,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;IACL,KAAArE,aAAa,GAAbA,aAAa;IACb,KAAAsE,kBAAkB,GAAlBA,kBAAkB;EACxB;EAEGY,QAAQA,CAAA;IAAA,IAAAzE,KAAA;IAAA,OAAAC,sMAAA;MACb;MACA,IAAID,KAAI,CAACT,aAAa,CAACgC,WAAW,EAAE;QACnC,MAAMvB,KAAI,CAACT,aAAa,CAACmF,gBAAgB,CAAC,yBAAyB,CAAC;MACrE;MAEA;MACA,MAAMC,EAAE,GAAG3E,KAAI,CAAC4D,KAAK,CAACgB,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;MACjD9E,KAAI,CAACsE,aAAa,GAAGK,EAAE,KAAK,KAAK;MAEjC,IAAI,CAAC3E,KAAI,CAACsE,aAAa,EAAE;QACxB;QACA;MAAA;MAGDtE,KAAI,CAAC+E,iBAAiB,EAAE;IAAC;EAC1B;EAEAC,wBAAwBA,CAAA;IACvB,IAAI,CAACT,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACvC;EAEAU,YAAYA,CAAA;IACX,IAAI,CAACnB,YAAY,CAACO,YAAY,GAAG,CAAC,IAAI,CAACP,YAAY,CAACO,YAAY;EACjE;EAEAU,iBAAiBA,CAAA;IAChB,MAAMG,MAAM,GAAG,CAAC,CAAC,IAAI,CAACpB,YAAY,CAACC,GAAG;IACtC,MAAMoB,QAAQ,GAAG,CAAC,CAAC,IAAI,CAACrB,YAAY,CAACE,KAAK;IAC1C,MAAMoB,QAAQ,GAAG,CAAC,CAAC,IAAI,CAACtB,YAAY,CAACG,KAAK;IAC1C,MAAMoB,WAAW,GAAG,CAAC,CAAC,IAAI,CAACvB,YAAY,CAACI,QAAQ;IAEhD,IAAI,CAACM,SAAS,GAAG,CAAC,EAAEU,MAAM,IAAIC,QAAQ,IAAIC,QAAQ,IAAIC,WAAW,CAAC;EACnE;EAEAC,QAAQA,CAAA;IACP,IAAI,CAAC3B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,sBAAsB,CAAC,CAAC;EAC/C;EAEMC,MAAMA,CAAA;IAAA,IAAAlF,MAAA;IAAA,OAAAL,sMAAA;MACX,IAAI,CAACK,MAAI,CAACkE,SAAS,EAAE;QACpB;MACD;MAEA;MACA,MAAMxD,QAAQ,GAAG;QAChB,GAAGV,MAAI,CAACwD,YAAY;QACpB2B,IAAI,EAAE;OACN;MAED,MAAMnF,MAAI,CAACuD,kBAAkB,CAAChE,SAAS,CAAC,WAAW,EAAEmB,QAAQ,CAAC;IAAC;EAChE;;qCAzEY0C,qBAAqB,EAAAd,+DAAA,CAAAE,mDAAA,GAAAF,+DAAA,CAAAE,2DAAA,GAAAF,+DAAA,CAAAiD,0DAAA,GAAAjD,+DAAA,CAAAkD,8EAAA;EAAA;;UAArBpC,qBAAqB;IAAAqC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCZ/BzD,4DAHH,aAAqC,aACb,aACG,gBACsB;QAArBA,wDAAA,mBAAA4D,uDAAA;UAAA,OAASF,GAAA,CAAAhB,QAAA,EAAU;QAAA,EAAC;;QAC5C1C,4DAAA,aAA4D;QAC3DA,uDAAA,cAA2H;QAC5HA,0DAAA,EAAM;;QACNA,4DAAA,WAAM;QAAAA,oDAAA,wBAAiB;QAEzBA,0DAFyB,EAAO,EACtB,EACJ;QAENA,4DAAA,YAAuB;QAAAA,oDAAA,sBAAe;QAAAA,0DAAA,EAAK;QAMxCA,4DAJH,cAAyB,cAED,cACG,iBAOtB;QAHDA,8DAAA,2BAAA+D,+DAAAC,MAAA;UAAAhE,gEAAA,CAAA0D,GAAA,CAAAxC,YAAA,CAAAC,GAAA,EAAA6C,MAAA,MAAAN,GAAA,CAAAxC,YAAA,CAAAC,GAAA,GAAA6C,MAAA;UAAA,OAAAA,MAAA;QAAA,EAA8B;QAE9BhE,wDAAA,2BAAA+D,+DAAA;UAAA,OAAiBL,GAAA,CAAAvB,iBAAA,EAAmB;QAAA,EAAC;QAEvCnC,0DAPC,EAME,EACG;QAELA,4DADD,cAAyB,iBAOtB;QAHDA,8DAAA,2BAAAkE,+DAAAF,MAAA;UAAAhE,gEAAA,CAAA0D,GAAA,CAAAxC,YAAA,CAAAE,KAAA,EAAA4C,MAAA,MAAAN,GAAA,CAAAxC,YAAA,CAAAE,KAAA,GAAA4C,MAAA;UAAA,OAAAA,MAAA;QAAA,EAAgC;QAEhChE,wDAAA,2BAAAkE,+DAAA;UAAA,OAAiBR,GAAA,CAAAvB,iBAAA,EAAmB;QAAA,EAAC;QAGxCnC,0DARE,EAME,EACG,EACD;QAKJA,4DAFF,cAAuB,cACG,iBAOtB;QAHDA,8DAAA,2BAAAmE,+DAAAH,MAAA;UAAAhE,gEAAA,CAAA0D,GAAA,CAAAxC,YAAA,CAAAG,KAAA,EAAA2C,MAAA,MAAAN,GAAA,CAAAxC,YAAA,CAAAG,KAAA,GAAA2C,MAAA;UAAA,OAAAA,MAAA;QAAA,EAAgC;QAEhChE,wDAAA,2BAAAmE,+DAAA;UAAA,OAAiBT,GAAA,CAAAvB,iBAAA,EAAmB;QAAA,EAAC;QAEvCnC,0DAPC,EAME,EACG;QAELA,4DADD,cAAyB,iBAOtB;QAHDA,8DAAA,2BAAAoE,+DAAAJ,MAAA;UAAAhE,gEAAA,CAAA0D,GAAA,CAAAxC,YAAA,CAAAI,QAAA,EAAA0C,MAAA,MAAAN,GAAA,CAAAxC,YAAA,CAAAI,QAAA,GAAA0C,MAAA;UAAA,OAAAA,MAAA;QAAA,EAAmC;QAEnChE,wDAAA,2BAAAoE,+DAAA;UAAA,OAAiBV,GAAA,CAAAvB,iBAAA,EAAmB;QAAA,EAAC;QALtCnC,0DAAA,EAME;QACFA,4DAAA,eAAuE;QAArCA,wDAAA,mBAAAqE,qDAAA;UAAA,OAASX,GAAA,CAAAtB,wBAAA,EAA0B;QAAA,EAAC;QAOrEpC,wDANA,KAAAuE,0CAAA,kBAAkF,KAAAC,0CAAA,kBAMD;QASpFxE,0DAFE,EAAM,EACD,EACD;QAKJA,4DAFF,cAAuB,eACgB,iBAC0D;QAAzDA,8DAAA,2BAAAyE,+DAAAT,MAAA;UAAAhE,gEAAA,CAAA0D,GAAA,CAAAxC,YAAA,CAAAM,MAAA,EAAAwC,MAAA,MAAAN,GAAA,CAAAxC,YAAA,CAAAM,MAAA,GAAAwC,MAAA;UAAA,OAAAA,MAAA;QAAA,EAAiC;QAMxEhE,0DANC,EAA+F,EAM1F;QAELA,4DADD,eAA4B,gBACA;QAAAA,oDAAA,uBAAe;QAAAA,0DAAA,EAAO;QACjDA,4DAAA,eAAoD;QAAzBA,wDAAA,mBAAA0E,qDAAA;UAAA,OAAShB,GAAA,CAAArB,YAAA,EAAc;QAAA,EAAC;QAClDrC,4DAAA,eAAqE;QACpEA,uDAAA,eAA2E;QAI/EA,0DAHG,EAAM,EACD,EACD,EACD;QAKJA,4DAFF,cAAuB,eACe,oBAC0D;QAA9DA,8DAAA,2BAAA2E,kEAAAX,MAAA;UAAAhE,gEAAA,CAAA0D,GAAA,CAAAxC,YAAA,CAAAK,KAAA,EAAAyC,MAAA,MAAAN,GAAA,CAAAxC,YAAA,CAAAK,KAAA,GAAAyC,MAAA;UAAA,OAAAA,MAAA;QAAA,EAAgC;QAGnEhE,0DAHiG,EAAW,EACpG,EACD,EACD;QAILA,4DADD,eAA0B,kBACuB;QAArBA,wDAAA,mBAAA4E,wDAAA;UAAA,OAASlB,GAAA,CAAAhB,QAAA,EAAU;QAAA,EAAC;QAAC1C,oDAAA,cAAM;QAAAA,0DAAA,EAAS;QAC/DA,4DAAA,kBAAkG;QAAzEA,wDAAA,mBAAA6E,wDAAA;UAAA,OAASnB,GAAA,CAAAd,MAAA,EAAQ;QAAA,EAAC;QAC1C5C,4DAAA,YAAM;QAAAA,oDAAA,qBAAa;QAAAA,0DAAA,EAAO;QAC1BA,4DAAA,eAAuB;;QACtBA,4DAAA,eAA4D;QAC3DA,uDAAA,gBAA+E;QAMrFA,0DALK,EAAM,EACD,EACE,EACJ,EACD,EACD;;;QA9FAA,uDAAA,IAA8B;QAA9BA,8DAAA,YAAA0D,GAAA,CAAAxC,YAAA,CAAAC,GAAA,CAA8B;QAS9BnB,uDAAA,GAAgC;QAAhCA,8DAAA,YAAA0D,GAAA,CAAAxC,YAAA,CAAAE,KAAA,CAAgC;QAahCpB,uDAAA,GAAgC;QAAhCA,8DAAA,YAAA0D,GAAA,CAAAxC,YAAA,CAAAG,KAAA,CAAgC;QAOhCrB,uDAAA,GAA2C;QAA3CA,wDAAA,SAAA0D,GAAA,CAAA/B,YAAA,uBAA2C;QAE3C3B,8DAAA,YAAA0D,GAAA,CAAAxC,YAAA,CAAAI,QAAA,CAAmC;QAK7BtB,uDAAA,GAAmB;QAAnBA,wDAAA,UAAA0D,GAAA,CAAA/B,YAAA,CAAmB;QAMnB3B,uDAAA,EAAkB;QAAlBA,wDAAA,SAAA0D,GAAA,CAAA/B,YAAA,CAAkB;QAca3B,uDAAA,GAAiC;QAAjCA,8DAAA,YAAA0D,GAAA,CAAAxC,YAAA,CAAAM,MAAA,CAAiC;QAU5CxB,uDAAA,GAA0C;QAA1CA,yDAAA,WAAA0D,GAAA,CAAAxC,YAAA,CAAAO,YAAA,CAA0C;QACzCzB,uDAAA,EAA0C;QAA1CA,yDAAA,WAAA0D,GAAA,CAAAxC,YAAA,CAAAO,YAAA,CAA0C;QAStCzB,uDAAA,GAAgC;QAAhCA,8DAAA,YAAA0D,GAAA,CAAAxC,YAAA,CAAAK,KAAA,CAAgC;QAQEvB,uDAAA,GAA6B;QAA7BA,yDAAA,cAAA0D,GAAA,CAAA9B,SAAA,CAA6B;QAArD5B,wDAAA,cAAA0D,GAAA,CAAA9B,SAAA,CAAuB;;;mBD7F3DrB,yDAAY,EAAA2E,iDAAA,EAAE1E,+DAAe,EAAEC,yDAAY,EAAEC,uDAAW,EAAA0E,gEAAA,EAAAA,2DAAA,EAAAA,mDAAA;IAAAI,MAAA;EAAA","sources":["./src/app/services/data-passing.service.ts","./src/app/dashboard/zelf-keys-passwords/password-form/password-form.component.ts","./src/app/dashboard/zelf-keys-passwords/password-form/password-form.component.html"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ChromeService } from \"../chrome.service\";\n\nexport interface FormData {\n\t[key: string]: any;\n}\n\nexport interface ApiResult {\n\tsuccess: boolean;\n\tzelfProof: string;\n\tzelfQR: string;\n\tNFT?: {\n\t\tsuccess: boolean;\n\t\ttokenId: string;\n\t\ttransactionHash: string;\n\t\trecipient: string;\n\t\tcost: string;\n\t\tmetadata: any;\n\t\tmetadataUrl: string;\n\t\texplorerUrl: string;\n\t\towner: string;\n\t\tcontractAddress: string;\n\t};\n\tipfs?: {\n\t\thash: string;\n\t\tgatewayUrl: string;\n\t\tpinSize: number;\n\t\ttimestamp: string;\n\t\tname: string;\n\t\tmetadata: any;\n\t};\n\tpublicData?: any;\n\tmessage: string;\n}\n\n@Injectable({\n\tprovidedIn: \"root\",\n})\nexport class DataPassingService {\n\tprivate dataStore: { [key: string]: FormData } = {};\n\tprivate resultStore: { [key: string]: ApiResult } = {};\n\n\tconstructor(private chromeService: ChromeService) {\n\t\t// Load any existing data from localStorage on service initialization\n\t\t// Use setTimeout to avoid blocking constructor\n\t\tsetTimeout(() => {\n\t\t\tthis.loadFromStorage();\n\t\t}, 0);\n\t}\n\n\t/**\n\t * Store form data for a specific form type\n\t */\n\tasync storeData(formType: string, data: FormData): Promise<void> {\n\t\tthis.dataStore[formType] = data;\n\t\tawait this.saveToStorage();\n\t}\n\n\t/**\n\t * Retrieve form data for a specific form type\n\t */\n\tgetData(formType: string): FormData | null {\n\t\tconst data = this.dataStore[formType];\n\t\treturn data || null;\n\t}\n\n\t/**\n\t * Store API result for a specific form type\n\t */\n\tasync storeResult(formType: string, result: ApiResult): Promise<void> {\n\t\tthis.resultStore[formType] = result;\n\t\tawait this.saveToStorage();\n\t}\n\n\t/**\n\t * Retrieve API result for a specific form type\n\t */\n\tgetResult(formType: string): ApiResult | null {\n\t\tconst result = this.resultStore[formType];\n\t\treturn result || null;\n\t}\n\n\t/**\n\t * Clear form data for a specific form type\n\t */\n\tclearData(formType: string): void {\n\t\t// also store it from the chrome storage\n\t\tthis.chromeService.removeItem(`zelfDataPassing`);\n\t\tdelete this.dataStore[formType];\n\t}\n\n\t/**\n\t * Clear result data for a specific form type\n\t */\n\tclearResult(formType: string): void {\n\t\tdelete this.resultStore[formType];\n\t}\n\n\t/**\n\t * Clear all data for a specific form type (both form and result)\n\t */\n\tasync clearAll(formType: string): Promise<void> {\n\t\tthis.clearData(formType);\n\t\tthis.clearResult(formType);\n\t\tawait this.saveToStorage();\n\t}\n\n\t/**\n\t * Check if form data exists for a specific form type\n\t */\n\thasData(formType: string): boolean {\n\t\treturn !!this.dataStore[formType];\n\t}\n\n\t/**\n\t * Check if result data exists for a specific form type\n\t */\n\thasResult(formType: string): boolean {\n\t\treturn !!this.resultStore[formType];\n\t}\n\n\t/**\n\t * Get all stored data for debugging\n\t */\n\tgetAllData(): { formData: { [key: string]: FormData }; resultData: { [key: string]: ApiResult } } {\n\t\treturn {\n\t\t\tformData: { ...this.dataStore },\n\t\t\tresultData: { ...this.resultStore },\n\t\t};\n\t}\n\n\t/**\n\t * Save data to localStorage for persistence\n\t */\n\tprivate async saveToStorage(): Promise<void> {\n\t\ttry {\n\t\t\tconst storageData = {\n\t\t\t\tdataStore: this.dataStore,\n\t\t\t\tresultStore: this.resultStore,\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t};\n\n\t\t\tif (this.chromeService.isExtension) {\n\t\t\t\t// Use Chrome storage for extension\n\t\t\t\tawait this.chromeService.setItem(\"zelfDataPassing\", storageData);\n\t\t\t} else {\n\t\t\t\t// Use localStorage for web\n\t\t\t\tlocalStorage.setItem(\"zelfDataPassing\", JSON.stringify(storageData));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error saving to storage:\", error);\n\t\t}\n\t}\n\n\t/**\n\t * Load data from localStorage on service initialization\n\t */\n\tprivate async loadFromStorage(): Promise<void> {\n\t\ttry {\n\t\t\tlet storageData: any = null;\n\n\t\t\tif (this.chromeService.isExtension) {\n\t\t\t\t// Use Chrome storage for extension\n\t\t\t\tstorageData = await this.chromeService.getItem(\"zelfDataPassing\");\n\t\t\t} else {\n\t\t\t\t// Use localStorage for web\n\t\t\t\tconst localData = localStorage.getItem(\"zelfDataPassing\");\n\t\t\t\tstorageData = localData ? JSON.parse(localData) : null;\n\t\t\t}\n\n\t\t\tif (storageData) {\n\t\t\t\tconst maxAge = 24 * 60 * 60 * 1000; // 24 hours\n\n\t\t\t\t// Check if data is not too old\n\t\t\t\tif (Date.now() - storageData.timestamp < maxAge) {\n\t\t\t\t\tthis.dataStore = storageData.dataStore || {};\n\t\t\t\t\tthis.resultStore = storageData.resultStore || {};\n\t\t\t\t} else {\n\t\t\t\t\tthis.clearAllStorage();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error loading from storage:\", error);\n\t\t\t// Clear potentially corrupted data\n\t\t\tthis.clearAllStorage();\n\t\t}\n\t}\n\n\t/**\n\t * Clear all data from both memory and storage\n\t */\n\tclearAllStorage(): void {\n\t\tthis.dataStore = {};\n\t\tthis.resultStore = {};\n\n\t\ttry {\n\t\t\tif (this.chromeService.isExtension) {\n\t\t\t\tthis.chromeService.removeItem(\"zelfDataPassing\");\n\t\t\t} else {\n\t\t\t\tlocalStorage.removeItem(\"zelfDataPassing\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error clearing storage:\", error);\n\t\t}\n\t}\n\n\t/**\n\t * Manually clear storage for a specific form type\n\t */\n\tasync clearStorageForType(formType: string): Promise<void> {\n\t\tawait this.clearAll(formType);\n\t}\n\n\t/**\n\t * Get storage info for debugging\n\t */\n\tgetStorageInfo(): { isExtension: boolean; hasChromeService: boolean; storageKeys: string[] } {\n\t\treturn {\n\t\t\tisExtension: this.chromeService.isExtension,\n\t\t\thasChromeService: !!this.chromeService,\n\t\t\tstorageKeys: Object.keys(this.dataStore).concat(Object.keys(this.resultStore)),\n\t\t};\n\t}\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { TranslocoModule } from \"@jsverse/transloco\";\nimport { RouterModule, Router, ActivatedRoute } from \"@angular/router\";\nimport { FormsModule } from \"@angular/forms\";\nimport { ChromeService } from \"../../../chrome.service\";\nimport { DataPassingService } from \"../../../services/data-passing.service\";\n\n@Component({\n\tselector: \"app-password-form\",\n\tstandalone: true,\n\timports: [CommonModule, TranslocoModule, RouterModule, FormsModule],\n\ttemplateUrl: \"./password-form.component.html\",\n\tstyleUrls: [\"./password-form.component.scss\"],\n})\nexport class PasswordFormComponent implements OnInit {\n\tpasswordData = {\n\t\turl: \"https://google.com\",\n\t\ttitle: \"Google Personal\",\n\t\temail: \"juliet@google.com\",\n\t\tpassword: \"mypassword123\",\n\t\tnotes: \"My google account\",\n\t\tfolder: \"My Favorites\",\n\t\tinsideFolder: true,\n\t};\n\n\tisNewPassword = true;\n\tshowPassword = false;\n\tformValid = false;\n\n\tconstructor(\n\t\tprivate router: Router,\n\t\tprivate route: ActivatedRoute,\n\t\tprivate chromeService: ChromeService,\n\t\tprivate dataPassingService: DataPassingService\n\t) {}\n\n\tasync ngOnInit(): Promise<void> {\n\t\t// Ensure extension is in full screen mode for better security when handling passwords\n\t\tif (this.chromeService.isExtension) {\n\t\t\tawait this.chromeService.ensureFullScreen(\"dashboard/passwords/new\");\n\t\t}\n\n\t\t// Check if this is a new password or editing existing\n\t\tconst id = this.route.snapshot.paramMap.get(\"id\");\n\t\tthis.isNewPassword = id === \"new\";\n\n\t\tif (!this.isNewPassword) {\n\t\t\t// TODO: Load existing password data\n\t\t\t// this.loadPasswordData(id);\n\t\t}\n\n\t\tthis.checkFormValidity();\n\t}\n\n\ttogglePasswordVisibility(): void {\n\t\tthis.showPassword = !this.showPassword;\n\t}\n\n\ttoggleFolder(): void {\n\t\tthis.passwordData.insideFolder = !this.passwordData.insideFolder;\n\t}\n\n\tcheckFormValidity(): void {\n\t\tconst hasUrl = !!this.passwordData.url;\n\t\tconst hasTitle = !!this.passwordData.title;\n\t\tconst hasEmail = !!this.passwordData.email;\n\t\tconst hasPassword = !!this.passwordData.password;\n\n\t\tthis.formValid = !!(hasUrl && hasTitle && hasEmail && hasPassword);\n\t}\n\n\tonCancel(): void {\n\t\tthis.router.navigate([\"/dashboard/passwords\"]);\n\t}\n\n\tasync onSave(): Promise<void> {\n\t\tif (!this.formValid) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Store data in service instead of query params\n\t\tconst formData = {\n\t\t\t...this.passwordData,\n\t\t\ttype: \"passwords\",\n\t\t};\n\n\t\tawait this.dataPassingService.storeData(\"passwords\", formData);\n\t}\n}\n","<div class=\"password-form-container\">\n\t<div class=\"form-card\">\n\t\t<div class=\"form-header\">\n\t\t\t<button class=\"btn-back\" (click)=\"onCancel()\">\n\t\t\t\t<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\">\n\t\t\t\t\t<path d=\"M15 10H5M5 10L10 15M5 10L10 5\" stroke=\"#171717\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n\t\t\t\t</svg>\n\t\t\t\t<span>Back to Passwords</span>\n\t\t\t</button>\n\t\t</div>\n\n\t\t<h1 class=\"form-title\">Secure password</h1>\n\n\t\t<div class=\"form-fields\">\n\t\t\t<!-- URL and Title Row -->\n\t\t\t<div class=\"field-row\">\n\t\t\t\t<div class=\"field-group\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclass=\"form-input\"\n\t\t\t\t\t\t[(ngModel)]=\"passwordData.url\"\n\t\t\t\t\t\tplaceholder=\"https://example.com\"\n\t\t\t\t\t\t(ngModelChange)=\"checkFormValidity()\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field-group\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclass=\"form-input\"\n\t\t\t\t\t\t[(ngModel)]=\"passwordData.title\"\n\t\t\t\t\t\tplaceholder=\"Title\"\n\t\t\t\t\t\t(ngModelChange)=\"checkFormValidity()\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- Email and Password Row -->\n\t\t\t<div class=\"field-row\">\n\t\t\t\t<div class=\"field-group\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tclass=\"form-input\"\n\t\t\t\t\t\t[(ngModel)]=\"passwordData.email\"\n\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\t(ngModelChange)=\"checkFormValidity()\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field-group\">\n\t\t\t\t\t<input\n\t\t\t\t\t\t[type]=\"showPassword ? 'text' : 'password'\"\n\t\t\t\t\t\tclass=\"form-input\"\n\t\t\t\t\t\t[(ngModel)]=\"passwordData.password\"\n\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t(ngModelChange)=\"checkFormValidity()\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div class=\"field-icon clickable\" (click)=\"togglePasswordVisibility()\">\n\t\t\t\t\t\t<svg *ngIf=\"!showPassword\" width=\"22\" height=\"19\" viewBox=\"0 0 22 19\" fill=\"none\">\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\td=\"M11 0C6 0 1.73 3.11 0 7.5C1.73 11.89 6 15 11 15C16 15 20.27 11.89 22 7.5C20.27 3.11 16 0 11 0ZM11 12.5C8.24 12.5 6 10.26 6 7.5C6 4.74 8.24 2.5 11 2.5C13.76 2.5 16 4.74 16 7.5C16 10.26 13.76 12.5 11 12.5ZM11 4.5C9.34 4.5 8 5.84 8 7.5C8 9.16 9.34 10.5 11 10.5C12.66 10.5 14 9.16 14 7.5C14 5.84 12.66 4.5 11 4.5Z\"\n\t\t\t\t\t\t\t\tfill=\"#171717\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t<svg *ngIf=\"showPassword\" width=\"22\" height=\"19\" viewBox=\"0 0 22 19\" fill=\"none\">\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\td=\"M11 0C6 0 1.73 3.11 0 7.5C1.73 11.89 6 15 11 15C16 15 20.27 11.89 22 7.5C20.27 3.11 16 0 11 0ZM11 12.5C8.24 12.5 6 10.26 6 7.5C6 4.74 8.24 2.5 11 2.5C13.76 2.5 16 4.74 16 7.5C16 10.26 13.76 12.5 11 12.5ZM11 4.5C9.34 4.5 8 5.84 8 7.5C8 9.16 9.34 10.5 11 10.5C12.66 10.5 14 9.16 14 7.5C14 5.84 12.66 4.5 11 4.5Z\"\n\t\t\t\t\t\t\t\tfill=\"#171717\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<path d=\"M2 2L20 17\" stroke=\"#171717\" stroke-width=\"2\" stroke-linecap=\"round\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- Folder and Toggle Row -->\n\t\t\t<div class=\"field-row\">\n\t\t\t\t<div class=\"field-group folder-field\">\n\t\t\t\t\t<input type=\"text\" class=\"form-input\" [(ngModel)]=\"passwordData.folder\" placeholder=\"Folder\" />\n\t\t\t\t\t<!-- <div class=\"field-icon\">\n\t\t\t\t\t\t<svg width=\"12\" height=\"8\" viewBox=\"0 0 12 8\" fill=\"none\">\n\t\t\t\t\t\t\t<path d=\"M6 7.5L0.5 2L1.5 1L6 5.5L10.5 1L11.5 2L6 7.5Z\" fill=\"#171717\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div> -->\n\t\t\t\t</div>\n\t\t\t\t<div class=\"toggle-section\">\n\t\t\t\t\t<span class=\"toggle-label\">Inside a folder</span>\n\t\t\t\t\t<div class=\"toggle-switch\" (click)=\"toggleFolder()\">\n\t\t\t\t\t\t<div class=\"toggle-track\" [class.active]=\"passwordData.insideFolder\">\n\t\t\t\t\t\t\t<div class=\"toggle-thumb\" [class.active]=\"passwordData.insideFolder\"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- Notes Field -->\n\t\t\t<div class=\"field-row\">\n\t\t\t\t<div class=\"field-group notes-field\">\n\t\t\t\t\t<textarea class=\"form-textarea\" [(ngModel)]=\"passwordData.notes\" placeholder=\"Notes\" rows=\"4\"></textarea>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Action Buttons -->\n\t\t<div class=\"form-actions\">\n\t\t\t<button class=\"btn-cancel\" (click)=\"onCancel()\">Cancel</button>\n\t\t\t<button class=\"btn-save\" (click)=\"onSave()\" [disabled]=\"!formValid\" [class.disabled]=\"!formValid\">\n\t\t\t\t<span>Save password</span>\n\t\t\t\t<div class=\"save-icon\">\n\t\t\t\t\t<svg width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\">\n\t\t\t\t\t\t<path d=\"M13.5 1.5L5.5 9.5L1.5 5.5L0 7L5.5 12.5L15 3L13.5 1.5Z\" fill=\"white\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t</button>\n\t\t</div>\n\t</div>\n</div>\n"],"names":["DataPassingService","chromeService","dataStore","resultStore","constructor","setTimeout","loadFromStorage","storeData","formType","data","_this","_asyncToGenerator","saveToStorage","getData","storeResult","result","_this2","getResult","clearData","removeItem","clearResult","clearAll","_this3","hasData","hasResult","getAllData","formData","resultData","_this4","storageData","timestamp","Date","now","isExtension","setItem","localStorage","JSON","stringify","error","console","_this5","getItem","localData","parse","maxAge","clearAllStorage","clearStorageForType","_this6","getStorageInfo","hasChromeService","storageKeys","Object","keys","concat","i0","ɵɵinject","i1","ChromeService","factory","ɵfac","providedIn","CommonModule","TranslocoModule","RouterModule","FormsModule","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","PasswordFormComponent","router","route","dataPassingService","passwordData","url","title","email","password","notes","folder","insideFolder","isNewPassword","showPassword","formValid","ngOnInit","ensureFullScreen","id","snapshot","paramMap","get","checkFormValidity","togglePasswordVisibility","toggleFolder","hasUrl","hasTitle","hasEmail","hasPassword","onCancel","navigate","onSave","type","ɵɵdirectiveInject","Router","ActivatedRoute","i2","i3","selectors","decls","vars","consts","template","PasswordFormComponent_Template","rf","ctx","ɵɵlistener","PasswordFormComponent_Template_button_click_3_listener","ɵɵtext","ɵɵtwoWayListener","PasswordFormComponent_Template_input_ngModelChange_13_listener","$event","ɵɵtwoWayBindingSet","PasswordFormComponent_Template_input_ngModelChange_15_listener","PasswordFormComponent_Template_input_ngModelChange_18_listener","PasswordFormComponent_Template_input_ngModelChange_20_listener","PasswordFormComponent_Template_div_click_21_listener","ɵɵtemplate","PasswordFormComponent__svg_svg_22_Template","PasswordFormComponent__svg_svg_23_Template","PasswordFormComponent_Template_input_ngModelChange_26_listener","PasswordFormComponent_Template_div_click_30_listener","PasswordFormComponent_Template_textarea_ngModelChange_35_listener","PasswordFormComponent_Template_button_click_37_listener","PasswordFormComponent_Template_button_click_39_listener","ɵɵadvance","ɵɵtwoWayProperty","ɵɵproperty","ɵɵclassProp","i4","NgIf","i5","DefaultValueAccessor","NgControlStatus","NgModel","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}