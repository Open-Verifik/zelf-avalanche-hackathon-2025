{"version":3,"file":"src_app_zelf-settings_zelf-settings_component_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;AAA0C;AAEsD;AAC3C;AAGtB;AACY;;;;;;;;;;ICJ/BM,4DAHZ,cAA2E,aACP,aACnB,YACK;IAAAA,oDAAA,GAAyD;IAAAA,0DAAA,EAAK;IAExGA,4DAAA,WAA+C;IAAAA,oDAAA,GAA+D;IAAAA,0DAAA,EAAI;IAElHA,4DAAA,aAKC;IACGA,uDAAA,eASE;IAEFA,4DAAA,eAA8E;IAAAA,oDAAA,IAE5E;IAEVA,0DAFU,EAAQ,EACR,EACJ;IAGFA,4DADJ,cAAyC,aACK;IAAAA,oDAAA,IAAoD;IAAAA,0DAAA,EAAK;IAEnGA,4DAAA,YAA+C;IAAAA,oDAAA,IAA0D;IAAAA,0DAAA,EAAI;IAE7GA,4DAAA,cAGC;IACGA,uDAAA,gBASE;IAEFA,4DAAA,iBAAiE;IAAAA,oDAAA,IAAoD;IAIrIA,0DAJqI,EAAQ,EAC3H,EACJ,EACJ,EACH;;;;;;;IAtDDA,wDAAA,cAAAM,MAAA,CAAAC,IAAA,CAAkB;IAG8BP,uDAAA,GAAyD;IAAzDA,+DAAA,CAAAU,IAAA,mDAAyD;IAEpDV,uDAAA,GAA+D;IAA/DA,+DAAA,CAAAU,IAAA,yDAA+D;IAG1GV,uDAAA,EAEE;IAFFA,wDAAA,YAAAA,6DAAA,KAAAY,GAAA,IAAAC,OAAA,GAAAP,MAAA,CAAAC,IAAA,CAAAO,GAAA,oDAAAD,OAAA,CAAAE,KAAA,OAAAF,OAAA,GAAAP,MAAA,CAAAC,IAAA,CAAAO,GAAA,oDAAAD,OAAA,CAAAG,MAAA,GAEE;IAIEhB,uDAAA,EAAyD;IAAzDA,wDAAA,UAAAM,MAAA,CAAAW,QAAA,CAAAC,QAAA,CAAAC,6BAAA,CAAyD;IAUiBnB,uDAAA,GAE5E;IAF4EA,+DAAA,CAAAU,IAAA,oDAE5E;IAKoCV,uDAAA,GAAoD;IAApDA,+DAAA,CAAAU,IAAA,8CAAoD;IAE/CV,uDAAA,GAA0D;IAA1DA,+DAAA,CAAAU,IAAA,oDAA0D;IAGrGV,uDAAA,EAAgH;IAAhHA,wDAAA,YAAAA,6DAAA,KAAAY,GAAA,IAAAQ,QAAA,GAAAd,MAAA,CAAAC,IAAA,CAAAO,GAAA,uCAAAM,QAAA,CAAAL,KAAA,OAAAK,QAAA,GAAAd,MAAA,CAAAC,IAAA,CAAAO,GAAA,uCAAAM,QAAA,CAAAJ,MAAA,GAAgH;IAI5GhB,uDAAA,EAA4C;IAA5CA,wDAAA,UAAAM,MAAA,CAAAW,QAAA,CAAAC,QAAA,CAAAG,gBAAA,CAA4C;IAUiBrB,uDAAA,GAAoD;IAApDA,+DAAA,CAAAU,IAAA,8CAAoD;;;ADnC/H,MAAOY,6BAA6B;EAO1BC,gBAAA;EACAC,YAAA;EAPJC,aAAa,GAAkB,IAAI3B,yCAAO,EAAQ;EAE1DS,IAAI;EACJU,QAAQ;EAERS,YACYH,gBAAiC,EACjCC,YAAyB;IADzB,KAAAD,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,YAAY,GAAZA,YAAY;IAEpB,IAAI,CAACP,QAAQ,GAAG,IAAI,CAACM,gBAAgB,CAACN,QAAQ;IAE9C,IAAI,CAACM,gBAAgB,CAACI,SAAS,CAACC,IAAI,CAAC7B,yDAAS,CAAC,IAAI,CAAC0B,aAAa,CAAC,CAAC,CAACI,SAAS,CAAEZ,QAAQ,IAAI;MACvF,IAAI,CAACA,QAAQ,EAAE;MAEf,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACa,SAAS,EAAE;EACpB;EAEAC,WAAWA,CAAA;IACP,IAAI,CAACN,aAAa,CAACO,IAAI,EAAE;IACzB,IAAI,CAACP,aAAa,CAACQ,QAAQ,EAAE;IAE7B,IAAI,CAACV,gBAAgB,CAACN,QAAQ,GAAG,IAAI,CAACA,QAAQ;EAClD;EAEQa,SAASA,CAAA;IACb,IAAI,CAACvB,IAAI,GAAG,IAAI,CAACiB,YAAY,CAACU,KAAK,CAAC;MAChCf,6BAA6B,EAAE,CAC3B,IAAI,CAACF,QAAQ,CAACC,QAAQ,CAACC,6BAA6B,EACpD,CAACvB,sDAAU,CAACuC,QAAQ,EAAEvC,sDAAU,CAACwC,GAAG,CAAC,CAAC,CAAC,EAAExC,sDAAU,CAACyC,GAAG,CAAC,EAAE,CAAC,CAAC,CAC/D;MACDhB,gBAAgB,EAAE,CAAC,IAAI,CAACJ,QAAQ,CAACC,QAAQ,CAACG,gBAAgB,EAAE,CAACzB,sDAAU,CAACuC,QAAQ,EAAEvC,sDAAU,CAACwC,GAAG,CAAC,CAAC,CAAC,EAAExC,sDAAU,CAACyC,GAAG,CAAC,CAAC,CAAC,CAAC;KAC1H,CAAC;IAEF,IAAI,CAAC9B,IAAI,CAAC+B,YAAY,CAACV,IAAI,CAAC7B,yDAAS,CAAC,IAAI,CAAC0B,aAAa,CAAC,CAAC,CAACI,SAAS,CAAEU,KAAK,IAAI;MAC3E,IAAI,CAAC,IAAI,CAAChC,IAAI,CAACiC,KAAK,EAAE;MAEtB,IAAI,CAACvB,QAAQ,CAACC,QAAQ,CAACC,6BAA6B,GAAGoB,KAAK,CAACpB,6BAA6B;MAC1F,IAAI,CAACF,QAAQ,CAACC,QAAQ,CAACG,gBAAgB,GAAGkB,KAAK,CAAClB,gBAAgB;MAEhE,IAAI,CAACE,gBAAgB,CAACN,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAClD,CAAC,CAAC;EACN;;qCA7CSK,6BAA6B,EAAAtB,+DAAA,CAAA0C,0EAAA,GAAA1C,+DAAA,CAAA4C,uDAAA;EAAA;;UAA7BtB,6BAA6B;IAAAwB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,uCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCf1CpD,wDAAA,IAAAuD,6CAAA,oBAA2E;;;mBDU7D5D,+DAAmB,EAAAiD,4DAAA,EAAAA,gEAAA,EAAAA,+DAAA,EAAAA,2DAAA,EAAAA,gEAAA,EAAAA,6DAAA,EAAAA,8DAAA,EAAAA,2DAAA,EAAE/C,+DAAe,EAAAmE,kEAAA,EAAEtE,oDAAO;IAAAwE,MAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AEVK;AAEL;AAEY;AACF;AAE+B;AAC1D;AACgE;;;;;;;;;;;;;;;ICoBlFlE,gEAAA,GAA8E;;;;;IADlFA,4DAFR,cAAyI,cAC/F,cACS;IACvCA,wDAAA,IAAA0E,yEAAA,2BAA+D;IACnE1E,0DAAA,EAAM;IAENA,4DAAA,YAA0C;IAAAA,oDAAA,GAAuB;IACrEA,0DADqE,EAAI,EACnE;IAENA,4DAAA,cAAsC;;IAClCA,4DAAA,cAA6F;IACzFA,uDAAA,eAA8F;IAG1GA,0DAFQ,EAAM,EACJ,EACJ;;;;;IAdiDA,wDAAtB,eAAAA,6DAAA,IAAA4E,GAAA,EAAqB,gBAAAC,cAAA,CAAAC,WAAA,CAAwC;IAGnE9E,uDAAA,GAA8C;IAA9CA,wDAAA,qBAAA+E,MAAA,CAAAC,eAAA,CAAAH,cAAA,EAA8C;IAGvB7E,uDAAA,GAAuB;IAAvBA,+DAAA,CAAA6E,cAAA,CAAAI,KAAA,CAAuB;;;;;;IARjFjF,qEAAA,GAAwC;IACpCA,4DAAA,cAAgC;IAC5BA,wDAAA,IAAAmF,0DAAA,kBAAyI;IAe7InF,0DAAA,EAAM;IAGFA,4DADJ,cAAwD,iBACmD;IAA/FA,wDAAA,mBAAAqF,6EAAA;MAAArF,2DAAA,CAAAuF,GAAA;MAAA,MAAAR,MAAA,GAAA/E,2DAAA;MAAA,OAAAA,yDAAA,CAAS+E,MAAA,CAAAW,MAAA,EAAQ;IAAA,EAAC;;IACtB1F,4DAAA,cAA+F;IAC3FA,uDAAA,eAEE;IACNA,0DAAA,EAAM;;IAENA,4DAAA,WAAM;IAAAA,oDAAA,GAAuC;IAErDA,0DAFqD,EAAO,EAC/C,EACP;;;;;;IA3BqHA,uDAAA,GAAgB;IAAhBA,wDAAA,YAAA+E,MAAA,CAAAY,aAAA,CAAgB;IAyB7H3F,uDAAA,GAAuC;IAAvCA,+DAAA,CAAA4F,IAAA,iCAAuC;;;;;IAKzD5F,qEAAA,GAAuC;IACnCA,uDAAA,6BAAiD;;;;;;IAtD7CA,4DAHZ,aAAwD,aACjB,aACE,gBAM5B;;IACGA,4DAAA,aAA+F;IAC3FA,uDAAA,cAEE;IAGdA,0DAFQ,EAAM,EACD,EACP;;IAGFA,4DADJ,aAAiC,WACG;IAAAA,oDAAA,GAA0B;IAC9DA,0DAD8D,EAAI,EAC5D;IAENA,uDAAA,cAAuC;IAC3CA,0DAAA,EAAM;IAkCNA,wDAhCA,KAAA6F,oDAAA,2BAAwC,KAAAC,oDAAA,2BAgCD;IAG3C9F,0DAAA,EAAM;;;;;IAvDUA,uDAAA,GAA4B;IAC5BA,wDADA,gBAAAA,6DAAA,IAAA+F,GAAA,EAA4B,gBAAAhB,MAAA,CAAAiB,gBAAA,GAAAhG,6DAAA,IAAAiG,GAAA,IAAAjG,6DAAA,IAAA4E,GAAA,EACyB;IAazB5E,uDAAA,GAA0B;IAA1BA,+DAAA,CAAA4F,IAAA,oBAA0B;IAMnD5F,uDAAA,GAAuB;IAAvBA,wDAAA,UAAA+E,MAAA,CAAAiB,gBAAA,CAAuB;IAgCvBhG,uDAAA,EAAsB;IAAtBA,wDAAA,SAAA+E,MAAA,CAAAiB,gBAAA,CAAsB;;;;;;IAMrChG,4DAAA,cAA+F;IAC3FA,uDAAA,eAAsF;IAC1FA,0DAAA,EAAM;;;AD/CJ,MAAOkG,qBAAqB;EAelBC,eAAA;EACAC,cAAA;EACAC,OAAA;EACAC,OAAA;EACAC,iBAAA;EAlBiCC,YAAY,GAAgC,EAAiC;EAElH/E,aAAa,GAAkB,IAAI3B,yCAAO,EAAQ;EAE1DkG,gBAAgB,GAAoB,EAAE;EACtCL,aAAa,GAMP,EAAE;EAERjE,YACYyE,eAA+B,EAC/BC,cAA6B,EAC7BC,OAAkB,EAClBC,OAAe,EACfC,iBAAmC;IAJnC,KAAAJ,eAAe,GAAfA,eAAe;IACf,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,iBAAiB,GAAjBA,iBAAiB;IAEzB,IAAI,CAACE,oBAAoB,EAAE;EAC/B;EAEA1E,WAAWA,CAAA;IACP,IAAI,CAACN,aAAa,CAACO,IAAI,EAAE;IACzB,IAAI,CAACP,aAAa,CAACQ,QAAQ,EAAE;EACjC;EAEAyE,eAAeA,CAAA;IACX,IAAI,CAACC,gBAAgB,EAAE;EAC3B;EAEQC,gBAAgBA,CAAA;IACpB,OAAO,IAAI,CAACP,OAAO,CAACQ,IAAI,CAACrC,8GAA2B,EAAE;MAClDsC,UAAU,EAAE,aAAa;MACzBC,aAAa,EAAE,eAAe;MAC9BC,IAAI,EAAE;QACFC,OAAO,EAAE,IAAI,CAACV,iBAAiB,CAACW,SAAS,CAAC,gBAAgB,CAAC;QAC3DC,OAAO,EAAE,IAAI,CAACZ,iBAAiB,CAACW,SAAS,CAAC,gBAAgB,CAAC;QAC3DE,MAAM,EAAE,IAAI,CAACb,iBAAiB,CAACW,SAAS,CAAC,eAAe,CAAC;QACzDjC,KAAK,EAAE,IAAI,CAACsB,iBAAiB,CAACW,SAAS,CAAC,cAAc,CAAC;QACvDG,iBAAiB,EAAE;;KAE1B,CAAC;EACN;EAEQV,gBAAgBA,CAAA;IACpB,IAAI,CAAChB,aAAa,GAAG,CACjB;MACIV,KAAK,EAAE,IAAI,CAACsB,iBAAiB,CAACW,SAAS,CAAC,yBAAyB,CAAC;MAClEI,IAAI,EAAE,cAAc;MACpBxC,WAAW,EAAE;QACTyC,IAAI,EAAE;;KAEb,CACJ;EACL;EAEQd,oBAAoBA,CAAA;IACxB,IAAI,CAACT,gBAAgB,GAAG,IAAI,CAACG,eAAe,CAACqB,QAAQ,CAAC1C,WAAW,EAAEyC,IAAI,GAAG,IAAI,CAACpB,eAAe,CAACqB,QAAQ,CAAC1C,WAAW,CAACyC,IAAI,GAAG,EAAE;IAE7H,IAAI,CAACpB,eAAe,CAACrB,WAAW,CAAClD,IAAI,CAAC7B,+CAAS,CAAC,IAAI,CAAC0B,aAAa,CAAC,CAAC,CAACI,SAAS,CAAEiD,WAAW,IAAI;MAC3F,IAAI,CAACkB,gBAAgB,GAAGlB,WAAW,CAACyC,IAAI,GAAGzC,WAAW,CAACyC,IAAI,GAAG,EAAE;IACpE,CAAC,CAAC;EACN;EAEAvC,eAAeA,CAACyC,WAA6B;IACzC,OAAQ,IAAI,CAACA,WAAW,CAACH,IAAmC,CAAsB,IAAI,IAAI;EAC9F;EAEA5B,MAAMA,CAAA;IACF,MAAMgC,SAAS,GAAG,IAAI,CAACd,gBAAgB,EAAE;IAEzCc,SAAS,CAACC,WAAW,EAAE,CAAC9F,SAAS,CAAE+F,MAAM,IAAI;MACzC,IAAI,CAACA,MAAM,EAAE;MAEb,IAAI,CAACxB,cAAc,CAACyB,iBAAiB,EAAE;MACvC,IAAI,CAACzB,cAAc,CAAC0B,mBAAmB,EAAE;MAEzC,IAAI,CAACxB,OAAO,CAACyB,QAAQ,CAAC,CAAC,UAAU,CAAC,EAAE;QAAEC,UAAU,EAAE;MAAI,CAAE,CAAC;IAC7D,CAAC,CAAC;EACN;;qCAlFS9B,qBAAqB,EAAAlG,+DAAA,CAAA0C,2DAAA,GAAA1C,+DAAA,CAAA4C,6DAAA,GAAA5C,+DAAA,CAAAgE,uDAAA,GAAAhE,+DAAA,CAAA0C,mDAAA,GAAA1C,+DAAA,CAAAqI,gEAAA;EAAA;;UAArBnC,qBAAqB;IAAApD,SAAA;IAAAyF,SAAA,WAAAC,4BAAApF,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;;;;;;;;;;;;QC4ClCpD,wDA7DA,IAAAyI,oCAAA,kBAAwD,IAAAC,4CAAA,gCAAA1I,oEAAA,CA6D7B;;;mBDjDbmE,oDAAK,EAAEC,iDAAI,EAAEvE,+DAAe,EAAAwI,kEAAA,EAAE/D,sEAAe,EAAAsE,gEAAA,EAAErE,wDAAU,EAAEF,6DAAgB,EAAE/C,mHAA6B;IAAA4C,MAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;AEPrE;;;;;AAK7C,MAAOvB,eAAe;EAKZyD,cAAA;EACA2C,aAAA;EACAC,cAAA;EANJC,UAAU,GAAG,IAAIH,iDAAe,CAAW,EAAc,CAAC;EAC1DI,SAAS,GAAa,EAAc;EAE5CxH,YACY0E,cAA6B,EAC7B2C,aAA2B,EAC3BC,cAA6B;IAF7B,KAAA5C,cAAc,GAAdA,cAAc;IACd,KAAA2C,aAAa,GAAbA,aAAa;IACb,KAAAC,cAAc,GAAdA,cAAc;IAEtB,IAAI,CAACE,SAAS,GAAG;MACbhI,QAAQ,EAAE;QACNC,6BAA6B,EAAE,EAAE;QACjCE,gBAAgB,EAAE;;KAEzB;IAED,IAAI,CAAC+E,cAAc,CAAC+C,kBAAkB,CAACtH,SAAS,CAAEZ,QAAQ,IAAI;MAC1D,IAAI,CAACiI,SAAS,GAAGjI,QAAQ,IAAImI,MAAM,CAACC,IAAI,CAACpI,QAAQ,CAAC,CAACqI,MAAM,GAAGrI,QAAQ,GAAG,IAAI,CAACiI,SAAS;MACrF,IAAI,CAACD,UAAU,CAACjH,IAAI,CAAC,IAAI,CAACkH,SAAS,CAAC;IACxC,CAAC,CAAC;IAEF,IAAI,CAAC9C,cAAc,CAACmD,OAAO,CAAC,UAAU,CAAC,CAACC,IAAI,CAAEvI,QAAQ,IAAI;MACtD,IAAI,CAACiI,SAAS,GAAGjI,QAAQ,IAAImI,MAAM,CAACC,IAAI,CAACpI,QAAQ,CAAC,CAACqI,MAAM,GAAGrI,QAAQ,GAAG,IAAI,CAACiI,SAAS;MACrF,IAAI,CAACD,UAAU,CAACjH,IAAI,CAAC,IAAI,CAACkH,SAAS,CAAC;IACxC,CAAC,CAAC;EACN;EAEA,IAAIvH,SAASA,CAAA;IACT,OAAO,IAAI,CAACsH,UAAU,CAACQ,YAAY,EAAE;EACzC;EAEA,IAAIxI,QAAQA,CAAA;IACR,OAAO,IAAI,CAACiI,SAAS;EACzB;EAEA,IAAIjI,QAAQA,CAACsB,KAAe;IACxB,IAAI,IAAI,CAAC2G,SAAS,CAAChI,QAAQ,CAACG,gBAAgB,KAAKkB,KAAK,CAACrB,QAAQ,CAACG,gBAAgB,EAAE;MAC9E,IAAI,CAAC0H,aAAa,CAAC1H,gBAAgB,GAAGkB,KAAK,CAACrB,QAAQ,CAACG,gBAAgB;IACzE;IAEA,IAAI,CAAC6H,SAAS,GAAG3G,KAAK;IACtB,IAAI,CAAC6D,cAAc,CAACsD,OAAO,CAAC,UAAU,EAAEnH,KAAK,CAAC;IAE9C,IAAI,CAACoH,mBAAmB,EAAE;EAC9B;EAEcA,mBAAmBA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,sMAAA;MAC7B,MAAMC,YAAY,SAASF,KAAI,CAACxD,cAAc,CAACmD,OAAO,CAAC,cAAc,CAAC;MAEtE;MACA,IAAI,CAACO,YAAY,IAAIF,KAAI,CAACb,aAAa,CAACe,YAAY,KAAKA,YAAY,EAAE;QACnE,MAAMF,KAAI,CAACZ,cAAc,CAACe,YAAY,EAAE;QAExC;MACJ;MAEA,MAAMC,wBAAwB,GAAGC,IAAI,CAACC,KAAK,CAAC,CAAC,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAID,IAAI,CAACL,YAAY,CAAC,CAACM,OAAO,EAAE,KAAK,IAAI,GAAG,EAAE,CAAC,CAAC;MAEpH,IAAIJ,wBAAwB,IAAIJ,KAAI,CAACV,SAAS,EAAEhI,QAAQ,EAAEC,6BAA6B,IAAI,EAAE,CAAC,EAAE;MAEhG,MAAMyI,KAAI,CAACZ,cAAc,CAACe,YAAY,EAAE;IAAC;EAC7C;;qCA7DSpH,eAAe,EAAA3C,sDAAA,CAAA0C,6DAAA,GAAA1C,sDAAA,CAAA4C,2DAAA,GAAA5C,sDAAA,CAAAgE,6DAAA;EAAA;;WAAfrB,eAAe;IAAA6H,OAAA,EAAf7H,eAAe,CAAA8H,IAAA;IAAAC,UAAA,EAFZ;EAAM","sources":["./src/app/zelf-settings/zelf-settings-security/zelf-settings-security.component.ts","./src/app/zelf-settings/zelf-settings-security/zelf-settings-security.component.html","./src/app/zelf-settings/zelf-settings.component.ts","./src/app/zelf-settings/zelf-settings.component.html","./src/app/services/settings.service.ts"],"sourcesContent":["import { NgClass } from \"@angular/common\";\nimport { Component, OnDestroy } from \"@angular/core\";\nimport { FormBuilder, ReactiveFormsModule, UntypedFormGroup, Validators } from \"@angular/forms\";\nimport { TranslocoModule } from \"@jsverse/transloco\";\nimport { Settings } from \"app/models/settings.model\";\nimport { SettingsService } from \"app/services/settings.service\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\n@Component({\n    imports: [ReactiveFormsModule, TranslocoModule, NgClass],\n    selector: \"zelf-settings-security\",\n    styleUrls: [\"./zelf-settings-security.component.scss\"],\n    templateUrl: \"./zelf-settings-security.component.html\",\n})\nexport class ZelfSettingsSecurityComponent implements OnDestroy {\n    private unsubscriber$: Subject<void> = new Subject<void>();\n\n    form!: UntypedFormGroup;\n    settings!: Settings;\n\n    constructor(\n        private _settingsService: SettingsService,\n        private _formBuilder: FormBuilder\n    ) {\n        this.settings = this._settingsService.settings;\n\n        this._settingsService.settings$.pipe(takeUntil(this.unsubscriber$)).subscribe((settings) => {\n            if (!settings) return;\n\n            this.settings = settings;\n        });\n\n        this._initForm();\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscriber$.next();\n        this.unsubscriber$.complete();\n\n        this._settingsService.settings = this.settings;\n    }\n\n    private _initForm(): void {\n        this.form = this._formBuilder.group({\n            biometricVerificationInterval: [\n                this.settings.security.biometricVerificationInterval,\n                [Validators.required, Validators.min(5), Validators.max(60)],\n            ],\n            passwordAttempts: [this.settings.security.passwordAttempts, [Validators.required, Validators.min(1), Validators.max(8)]],\n        });\n\n        this.form.valueChanges.pipe(takeUntil(this.unsubscriber$)).subscribe((value) => {\n            if (!this.form.valid) return;\n\n            this.settings.security.biometricVerificationInterval = value.biometricVerificationInterval;\n            this.settings.security.passwordAttempts = value.passwordAttempts;\n\n            this._settingsService.settings = this.settings;\n        });\n    }\n}\n","<form [formGroup]=\"form\" class=\"zelf-settings-security\" *transloco=\"let t\">\n    <div class=\"zelf-card__content zelf-settings-security__content\">\n        <div class=\"zelf-settings-security__box\">\n            <h4 class=\"zelf-settings-security__title\">{{ t(\"settings.security.biometric_verification_title\") }}</h4>\n\n            <p class=\"zelf-settings-security__description\">{{ t(\"settings.security.biometric_verification_description\") }}</p>\n\n            <div\n                [ngClass]=\"{\n                    'zelf-input--error': form.get('biometricVerificationInterval')?.dirty && form.get('biometricVerificationInterval')?.errors,\n                }\"\n                class=\"zelf-input zelf-input--wide\"\n            >\n                <input\n                    [value]=\"settings.security.biometricVerificationInterval\"\n                    class=\"zelf-input__control zelf-input__control--floating-label\"\n                    formControlName=\"biometricVerificationInterval\"\n                    id=\"biometricVerificationInterval\"\n                    name=\"biometricVerificationInterval\"\n                    placeholder=\" \"\n                    required\n                    type=\"number\"\n                />\n\n                <label for=\"biometricVerificationInterval\" class=\"zelf-input__floating-label\">{{\n                    t(\"settings.security.minutes_before_reverification\")\n                }}</label>\n            </div>\n        </div>\n\n        <div class=\"zelf-settings-security__box\">\n            <h4 class=\"zelf-settings-security__title\">{{ t(\"settings.security.password_attempts_title\") }}</h4>\n\n            <p class=\"zelf-settings-security__description\">{{ t(\"settings.security.password_attempts_description\") }}</p>\n\n            <div\n                [ngClass]=\"{ 'zelf-input--error': form.get('passwordAttempts')?.dirty && form.get('passwordAttempts')?.errors }\"\n                class=\"zelf-input zelf-input--wide\"\n            >\n                <input\n                    [value]=\"settings.security.passwordAttempts\"\n                    class=\"zelf-input__control zelf-input__control--floating-label\"\n                    formControlName=\"passwordAttempts\"\n                    id=\"passwordAttempts\"\n                    name=\"passwordAttempts\"\n                    placeholder=\" \"\n                    required\n                    type=\"number\"\n                />\n\n                <label for=\"passwordAttempts\" class=\"zelf-input__floating-label\">{{ t(\"settings.security.password_attempts_title\") }}</label>\n            </div>\n        </div>\n    </div>\n</form>\n","import { NgFor, NgIf, NgTemplateOutlet } from \"@angular/common\";\nimport { AfterViewInit, Component, OnDestroy, TemplateRef, ViewChild } from \"@angular/core\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\nimport { TranslocoModule, TranslocoService } from \"@jsverse/transloco\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { ChromeService } from \"app/chrome.service\";\nimport { ConfirmationDialogComponent } from \"app/confirmation-dialog/confirmation-dialog.component\";\nimport { Subject, takeUntil } from \"rxjs\";\nimport { ZelfSettingsSecurityComponent } from \"./zelf-settings-security/zelf-settings-security.component\";\n\n@Component({\n    imports: [NgFor, NgIf, TranslocoModule, MatButtonModule, RouterLink, NgTemplateOutlet, ZelfSettingsSecurityComponent],\n    selector: \"zelf-settings\",\n    styleUrls: [\"./zelf-settings.component.scss\"],\n    templateUrl: \"./zelf-settings.component.html\",\n})\nexport class ZelfSettingsComponent implements AfterViewInit, OnDestroy {\n    @ViewChild(\"securityIcon\", { static: true }) securityIcon: TemplateRef<HTMLDivElement> = {} as TemplateRef<HTMLDivElement>;\n\n    private unsubscriber$: Subject<void> = new Subject<void>();\n\n    selectedSettings: \"security\" | \"\" = \"\";\n    settingsItems: {\n        title: string;\n        icon: string;\n        queryParams: {\n            edit: string;\n        };\n    }[] = [];\n\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _chromeService: ChromeService,\n        private _dialog: MatDialog,\n        private _router: Router,\n        private _translocoService: TranslocoService\n    ) {\n        this._setSelectedSettings();\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscriber$.next();\n        this.unsubscriber$.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this._setSettingItems();\n    }\n\n    private _createDialogRef(): MatDialogRef<ConfirmationDialogComponent> {\n        return this._dialog.open(ConfirmationDialogComponent, {\n            panelClass: \"zelf-dialog\",\n            backdropClass: \"zelf-backdrop\",\n            data: {\n                message: this._translocoService.translate(\"logout_message\"),\n                confirm: this._translocoService.translate(\"common.confirm\"),\n                cancel: this._translocoService.translate(\"common.cancel\"),\n                title: this._translocoService.translate(\"logout_title\"),\n                destructiveButton: true,\n            },\n        });\n    }\n\n    private _setSettingItems() {\n        this.settingsItems = [\n            {\n                title: this._translocoService.translate(\"settings.security_label\"),\n                icon: \"securityIcon\",\n                queryParams: {\n                    edit: \"security\",\n                },\n            },\n        ];\n    }\n\n    private _setSelectedSettings() {\n        this.selectedSettings = this._activatedRoute.snapshot.queryParams?.edit ? this._activatedRoute.snapshot.queryParams.edit : \"\";\n\n        this._activatedRoute.queryParams.pipe(takeUntil(this.unsubscriber$)).subscribe((queryParams) => {\n            this.selectedSettings = queryParams.edit ? queryParams.edit : \"\";\n        });\n    }\n\n    getTemplateIcon(settingItem: { icon: string }): TemplateRef<any> | null {\n        return (this[settingItem.icon as keyof ZelfSettingsComponent] as TemplateRef<any>) || null;\n    }\n\n    logout() {\n        const dialogRef = this._createDialogRef();\n\n        dialogRef.afterClosed().subscribe((result) => {\n            if (!result) return;\n\n            this._chromeService.clearLocalStorage();\n            this._chromeService.clearSessionStorage();\n\n            this._router.navigate([\"/welcome\"], { replaceUrl: true });\n        });\n    }\n}\n","<div class=\"zelf-card zelf-settings\" *transloco=\"let t\">\n    <div class=\"zelf-settings__header\">\n        <div class=\"zelf-settings__col1\">\n            <button\n                [queryParams]=\"{ edit: '' }\"\n                [routerLink]=\"!selectedSettings ? ['/home'] : ['./']\"\n                class=\"zelf-icon-button zelf-icon-button--anti-flash-white zelf-icon-button--40\"\n                mat-flat-button\n            >\n                <svg width=\"22\" height=\"14\" viewBox=\"0 0 22 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                        d=\"M20.0898 5.8277H4.72478L8.08478 2.4677C8.53978 2.0127 8.53978 1.2777 8.08478 0.822695C7.62978 0.367695 6.89478 0.367695 6.43978 0.822695L1.08478 6.1777C0.62978 6.6327 0.62978 7.3677 1.08478 7.8227L6.43978 13.1777C6.89478 13.6327 7.62978 13.6327 8.08478 13.1777C8.53978 12.7227 8.53978 11.9877 8.08478 11.5327L4.72478 8.16103H20.0898C20.7314 8.16103 21.2564 7.63603 21.2564 6.99436C21.2564 6.3527 20.7314 5.8277 20.0898 5.8277Z\"\n                    />\n                </svg>\n            </button>\n        </div>\n\n        <div class=\"zelf-settings__col2\">\n            <p class=\"zelf-settings__title\">{{ t(\"common.settings\") }}</p>\n        </div>\n\n        <div class=\"zelf-settings__col3\"></div>\n    </div>\n\n    <ng-container *ngIf=\"!selectedSettings\">\n        <div class=\"zelf-card__content\">\n            <div class=\"zelf-settings__item\" [routerLink]=\"['./']\" [queryParams]=\"settingItem.queryParams\" *ngFor=\"let settingItem of settingsItems\">\n                <div class=\"zelf-settings__item-col1\">\n                    <div class=\"zelf-settings__item-col1-icon\">\n                        <ng-container *ngTemplateOutlet=\"getTemplateIcon(settingItem)\"></ng-container>\n                    </div>\n\n                    <p class=\"zelf-settings__item-col1-title\">{{ settingItem.title }}</p>\n                </div>\n\n                <div class=\"zelf-settings__item-col2\">\n                    <svg width=\"8\" height=\"12\" viewBox=\"0 0 8 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M1.70504 0L0.295044 1.41L4.87504 6L0.295044 10.59L1.70504 12L7.70504 6L1.70504 0Z\" />\n                    </svg>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"zelf-card__actions zelf-card__actions--end\">\n            <button (click)=\"logout()\" mat-flat-button class=\"zelf-button zelf-button--outlined zelf-button--wide\">\n                <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                        d=\"M14 5L12.59 6.41L14.17 8H6V10H14.17L12.59 11.58L14 13L18 9L14 5ZM2 2H9V0H2C0.9 0 0 0.9 0 2V16C0 17.1 0.9 18 2 18H9V16H2V2Z\"\n                    />\n                </svg>\n\n                <span>{{ t(\"common.remove_all_zelfproofs\") }}</span>\n            </button>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"selectedSettings\">\n        <zelf-settings-security></zelf-settings-security>\n    </ng-container>\n</div>\n\n<ng-template #securityIcon>\n    <svg width=\"16\" height=\"20\" viewBox=\"0 0 16 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M8 0L0 3V9.09C0 14.14 3.41 18.85 8 20C12.59 18.85 16 14.14 16 9.09V3L8 0Z\" />\n    </svg>\n</ng-template>\n","import { Injectable } from \"@angular/core\";\nimport { ChromeService } from \"app/chrome.service\";\nimport { Settings } from \"app/models/settings.model\";\nimport { VaultService } from \"app/vault.service\";\nimport { WalletService } from \"app/wallet.service\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class SettingsService {\n    private _settings$ = new BehaviorSubject<Settings>({} as Settings);\n    private _settings: Settings = {} as Settings;\n\n    constructor(\n        private _chromeService: ChromeService,\n        private _vaultService: VaultService,\n        private _walletService: WalletService\n    ) {\n        this._settings = {\n            security: {\n                biometricVerificationInterval: 10,\n                passwordAttempts: 4,\n            },\n        };\n\n        this._chromeService.onSettingsChanged$.subscribe((settings) => {\n            this._settings = settings && Object.keys(settings).length ? settings : this._settings;\n            this._settings$.next(this._settings);\n        });\n\n        this._chromeService.getItem(\"settings\").then((settings) => {\n            this._settings = settings && Object.keys(settings).length ? settings : this._settings;\n            this._settings$.next(this._settings);\n        });\n    }\n\n    get settings$(): Observable<Settings> {\n        return this._settings$.asObservable();\n    }\n\n    get settings(): Settings {\n        return this._settings;\n    }\n\n    set settings(value: Settings) {\n        if (this._settings.security.passwordAttempts !== value.security.passwordAttempts) {\n            this._vaultService.passwordAttempts = value.security.passwordAttempts;\n        }\n\n        this._settings = value;\n        this._chromeService.setItem(\"settings\", value);\n\n        this._biometricsRequired();\n    }\n\n    private async _biometricsRequired(): Promise<void> {\n        const lastVerified = await this._chromeService.getItem(\"lastVerified\");\n\n        // Force biometrics if someone has tampered with the lastVerified timestamp\n        if (!lastVerified || this._vaultService.lastVerified !== lastVerified) {\n            await this._walletService.clearPGPKeys();\n\n            return;\n        }\n\n        const minutesSinceLastVerified = Math.floor((new Date().getTime() - new Date(lastVerified).getTime()) / (1000 * 60));\n\n        if (minutesSinceLastVerified < (this._settings?.security?.biometricVerificationInterval || 10)) return;\n\n        await this._walletService.clearPGPKeys();\n    }\n}\n"],"names":["NgClass","ReactiveFormsModule","Validators","TranslocoModule","Subject","takeUntil","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵproperty","ctx_r1","form","ɵɵadvance","ɵɵtextInterpolate","t_r1","ɵɵpureFunction1","_c0","tmp_5_0","get","dirty","errors","settings","security","biometricVerificationInterval","tmp_10_0","passwordAttempts","ZelfSettingsSecurityComponent","_settingsService","_formBuilder","unsubscriber$","constructor","settings$","pipe","subscribe","_initForm","ngOnDestroy","next","complete","group","required","min","max","valueChanges","value","valid","ɵɵdirectiveInject","i1","SettingsService","i2","FormBuilder","selectors","decls","vars","consts","template","ZelfSettingsSecurityComponent_Template","rf","ctx","ɵɵtemplate","ZelfSettingsSecurityComponent_form_0_Template","ɵNgNoValidate","DefaultValueAccessor","NumberValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","FormGroupDirective","FormControlName","i3","TranslocoDirective","styles","NgFor","NgIf","NgTemplateOutlet","MatButtonModule","RouterLink","ConfirmationDialogComponent","ɵɵelementContainer","ZelfSettingsComponent_div_0_ng_container_10_div_2_ng_container_3_Template","ɵɵpureFunction0","_c3","settingItem_r2","queryParams","ctx_r2","getTemplateIcon","title","ɵɵelementContainerStart","ZelfSettingsComponent_div_0_ng_container_10_div_2_Template","ɵɵlistener","ZelfSettingsComponent_div_0_ng_container_10_Template_button_click_4_listener","ɵɵrestoreView","_r1","ɵɵnextContext","ɵɵresetView","logout","settingsItems","t_r4","ZelfSettingsComponent_div_0_ng_container_10_Template","ZelfSettingsComponent_div_0_ng_container_11_Template","_c1","selectedSettings","_c2","ZelfSettingsComponent","_activatedRoute","_chromeService","_dialog","_router","_translocoService","securityIcon","_setSelectedSettings","ngAfterViewInit","_setSettingItems","_createDialogRef","open","panelClass","backdropClass","data","message","translate","confirm","cancel","destructiveButton","icon","edit","snapshot","settingItem","dialogRef","afterClosed","result","clearLocalStorage","clearSessionStorage","navigate","replaceUrl","ActivatedRoute","ChromeService","MatDialog","Router","i4","TranslocoService","viewQuery","ZelfSettingsComponent_Query","ZelfSettingsComponent_div_0_Template","ZelfSettingsComponent_ng_template_1_Template","ɵɵtemplateRefExtractor","i5","MatButton","BehaviorSubject","_vaultService","_walletService","_settings$","_settings","onSettingsChanged$","Object","keys","length","getItem","then","asObservable","setItem","_biometricsRequired","_this","_asyncToGenerator","lastVerified","clearPGPKeys","minutesSinceLastVerified","Math","floor","Date","getTime","ɵɵinject","VaultService","WalletService","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}