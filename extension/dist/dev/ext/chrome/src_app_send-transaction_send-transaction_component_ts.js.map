{"version":3,"file":"src_app_send-transaction_send-transaction_component_ts.js","mappings":"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","sources":["./src/app/send-transaction/send-transaction.component.ts","./src/app/send-transaction/send-transaction.component.html","./src/app/pipes/address-mask.pipe.ts"],"sourcesContent":["import { debounceTime, Subject, takeUntil } from \"rxjs\";\n\nimport { CommonModule } from \"@angular/common\";\nimport { ChangeDetectorRef, Component, OnDestroy } from \"@angular/core\";\nimport { AbstractControl, FormBuilder, ReactiveFormsModule, UntypedFormGroup, ValidationErrors, ValidatorFn, Validators } from \"@angular/forms\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatRippleModule } from \"@angular/material/core\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { Router, RouterModule } from \"@angular/router\";\nimport { TranslocoModule, TranslocoService } from \"@jsverse/transloco\";\n\nimport { AssetService } from \"app/asset.service\";\nimport { AddressMaskPipe } from \"app/pipes/address-mask.pipe\";\nimport { BitcoinService } from \"app/services/bitcoin.service\";\nimport { TransactionParams } from \"app/core/models/transaction-fee.model\";\nimport { SuiService } from \"app/services/sui.service\";\nimport { SolanaService } from \"app/solana.service\";\nimport { EthereumService } from \"app/eth.service\";\nimport { TransactionService } from \"app/transaction.service\";\nimport { VaultService } from \"app/vault.service\";\nimport { AddressBook, TransactionData, WalletModel } from \"app/wallet\";\nimport { WalletService } from \"app/wallet.service\";\nimport { ZelfLoaderComponent } from \"app/zelf-loader/zelf-loader.component\";\nimport { ZelfNameService } from \"app/zelf-name-service.service\";\n\n@Component({\n    imports: [\n        AddressMaskPipe,\n        CommonModule,\n        MatButtonModule,\n        MatProgressSpinnerModule,\n        MatRippleModule,\n        ReactiveFormsModule,\n        RouterModule,\n        TranslocoModule,\n        ZelfLoaderComponent,\n    ],\n    selector: \"send-transaction\",\n    styleUrls: [\"./send-transaction.component.scss\"],\n    templateUrl: \"./send-transaction.component.html\",\n})\nexport class SendTransactionComponent implements OnDestroy {\n    private unsubscriber$: Subject<void> = new Subject<void>();\n\n    form!: UntypedFormGroup;\n    foundAddress?: WalletModel;\n    isZelfNameNotFound: boolean = false;\n    loading: boolean = true;\n    price: number = 0;\n    recentAddresses: AddressBook[] = [];\n    searching: boolean = false;\n    transactionData!: TransactionData;\n    withdrawStep: boolean = false;\n\n    constructor(\n        private _assetService: AssetService,\n        private _bitcoinService: BitcoinService,\n        private _changeDetectionRef: ChangeDetectorRef,\n        private _ethService: EthereumService,\n        private _formBuilder: FormBuilder,\n        private _router: Router,\n        private _snackBar: MatSnackBar,\n        private _solanaService: SolanaService,\n        private _suiService: SuiService,\n        private _transactionService: TransactionService,\n        private _translocoService: TranslocoService,\n        private _walletService: WalletService,\n        private _zelfNameService: ZelfNameService,\n        private _vaultService: VaultService\n    ) {\n        this.loading = true;\n    }\n\n    async ngOnInit(): Promise<void> {\n        this.transactionData = await this._transactionService.getCurrentTransactionData();\n\n        if (this.transactionData && this.transactionData.hasTransactionData) {\n            this._initTransactionData()\n                .catch(() => this.goBack())\n                .finally(() => (this.loading = false));\n\n            return;\n        }\n\n        this._transactionService.transactionData$.pipe(takeUntil(this.unsubscriber$)).subscribe((transactionData) => {\n            this.transactionData = transactionData;\n\n            if (!this.transactionData || !this.transactionData.hasTransactionData) {\n                this._router.navigate([\"/send\"]);\n\n                return;\n            }\n\n            this._initTransactionData()\n                .catch(() => this.goBack())\n                .finally(() => (this.loading = false));\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscriber$.next();\n        this.unsubscriber$.complete();\n    }\n\n    get addressKey(): \"ethAddress\" | \"solanaAddress\" | \"btcAddress\" | \"suiAddress\" {\n        if (this.transactionData.isBscToken) return \"ethAddress\";\n        if (this.transactionData.isBtcToken) return \"btcAddress\";\n        if (this.transactionData.isEthToken || this.transactionData.isAvaxToken) return \"ethAddress\";\n        if (this.transactionData.isPolToken) return \"ethAddress\";\n        if (this.transactionData.isSolToken) return \"solanaAddress\";\n        if (this.transactionData.isSuiToken) return \"suiAddress\";\n\n        throw new Error(\"Network address key unavailable\");\n    }\n\n    get fiatPrice(): number {\n        const amount = this.form.get(\"amount\")?.value || 0;\n        const fiatPrice = this.price || 0;\n\n        return amount * fiatPrice || 0;\n    }\n\n    get filteredAddresses(): AddressBook[] {\n        const searchValue = this.form.get(\"toAddress\")?.value;\n\n        return this.recentAddresses.filter((address) => {\n            if (!searchValue || !searchValue.trim()) return true;\n\n            return new RegExp(searchValue, \"i\").test(address.address) || (address.zelfName && new RegExp(searchValue, \"i\").test(address.zelfName));\n        });\n    }\n\n    private _addressValidator(): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            const value = control.value;\n\n            if (!value) return null;\n\n            if (control.value === this.transactionData.sender.address) return { sameAddress: true };\n\n            const pattern = this._getAddressPattern();\n            const isValidZelfName = this._walletService.ZelfRegex.test(value);\n\n            if (!pattern.test(value) && !isValidZelfName) return { invalidFormat: true };\n\n            if (isValidZelfName) return null;\n\n            if ((this.transactionData.isEthToken || this.transactionData.isAvaxToken) && !this._walletService.isValidEVMAddress(value)) {\n                return { invalidFormat: true };\n            }\n\n            if (this.transactionData.isSuiToken && !this._suiService.isValidSuiAddress(value)) {\n                return { invalidFormat: true };\n            }\n\n            if (this.transactionData.isSolToken && !this._solanaService.isValidSolanaAddress(value)) {\n                return { invalidFormat: true };\n            }\n\n            if (this.transactionData.isBtcToken && !this._bitcoinService.isValidBTCAddress(value)) {\n                return { invalidBTC: true };\n            }\n\n            return null;\n        };\n    }\n\n    private _amountValidation(maxValue: number | string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (!control.value) return { greaterThan: true };\n\n            const MIN_VALUE = 1e-18; // 0.000000000000000001\n            const value = +control.value;\n\n            if (isNaN(value)) return { invalidNumber: true };\n            if (value < MIN_VALUE) return { greaterThan: { value: \"0.000000000000000001\" } };\n            if (value > +maxValue) return { lessThan: { value: maxValue } };\n\n            return null;\n        };\n    }\n\n    private _checkEVMAddress(text: string): boolean {\n        const isValidFormat = this._walletService.isValidEVMAddress(text);\n        const isValidWeb3 = this._ethService.checkIfValidAddress(text.toLowerCase());\n\n        return isValidFormat && isValidWeb3;\n    }\n\n    async _fetchTokenPrice(): Promise<void> {\n        try {\n            const response = await this._assetService.fetchAssetPrice(this.transactionData.symbol);\n\n            if (!response?.data || !response?.data?.length) return;\n\n            this.price = response.data[0].open;\n        } catch (error: any) {}\n    }\n\n    private _getAddressPattern(): RegExp {\n        let pattern: RegExp = /.*/;\n\n        if (this.transactionData.isEthToken || this.transactionData.isAvaxToken) pattern = this._walletService.ETHRegex;\n        if (this.transactionData.isSolToken) pattern = this._walletService.SOLRegex;\n        if (this.transactionData.isBtcToken) pattern = this._walletService.BTCRegex;\n        if (this.transactionData.isSuiToken) pattern = this._walletService.SUIRegex;\n\n        return pattern;\n    }\n\n    private _handlePaste(text: string): void {\n        if (!text) return;\n\n        const toAddressCtrl = this.form.get(\"toAddress\");\n\n        if (!toAddressCtrl) return;\n\n        toAddressCtrl.patchValue(text, { emitEvent: true, onlySelf: false });\n        toAddressCtrl.markAsDirty();\n        toAddressCtrl.updateValueAndValidity({ emitEvent: true, onlySelf: false });\n    }\n\n    private async _handleToAddressChange(text?: string): Promise<any> {\n        if (this.searching || this.form.get(\"toAddress\")?.invalid) return;\n\n        if (!text || !text.trim()) {\n            this.isZelfNameNotFound = false;\n            this.foundAddress = undefined;\n\n            return;\n        }\n\n        this.searching = true;\n        this.isZelfNameNotFound = false;\n\n        const isEVM =\n            this.transactionData.isEthToken || this.transactionData.isAvaxToken || this.transactionData.isPolToken || this.transactionData.isBscToken;\n\n        try {\n            if (this._walletService.ZelfRegex.test(text)) await this._queryZNS(\"zelfName\", text);\n\n            if (!this.foundAddress) {\n                if (this.transactionData.isSuiToken && this._suiService.isValidSuiAddress(text)) {\n                    await this._queryZNS(\"suiAddress\", text);\n\n                    if (!this.foundAddress) this._setRawAddressToFoundAddress(text, \"suiAddress\");\n                } else if (isEVM && this._checkEVMAddress(text)) {\n                    await this._queryZNS(\"ethAddress\", text);\n\n                    if (!this.foundAddress) this._setRawAddressToFoundAddress(text, \"ethAddress\");\n                } else if (this.transactionData.isSolToken && this._solanaService.isValidSolanaAddress(text)) {\n                    await this._queryZNS(\"solanaAddress\", text);\n\n                    if (!this.foundAddress) this._setRawAddressToFoundAddress(text, \"solanaAddress\");\n                } else if (this.transactionData.isBtcToken && this._bitcoinService.isValidBTCAddress(text)) {\n                    await this._queryZNS(\"btcAddress\", text);\n\n                    if (!this.foundAddress) this._setRawAddressToFoundAddress(text, \"btcAddress\");\n                }\n            }\n\n            if (this.foundAddress) return;\n\n            this.isZelfNameNotFound = true;\n        } catch (error) {\n            if (this.transactionData.isSuiToken && this._suiService.isValidSuiAddress(text)) {\n                this._setRawAddressToFoundAddress(text, \"suiAddress\");\n            } else if (isEVM && this._checkEVMAddress(text)) {\n                this._setRawAddressToFoundAddress(text, \"ethAddress\");\n            } else if (this.transactionData.isSolToken && this._solanaService.isValidSolanaAddress(text)) {\n                this._setRawAddressToFoundAddress(text, \"solanaAddress\");\n            } else if (this.transactionData.isBtcToken && this._bitcoinService.isValidBTCAddress(text)) {\n                this._setRawAddressToFoundAddress(text, \"btcAddress\");\n            } else {\n                this.isZelfNameNotFound = true;\n                this.foundAddress = undefined;\n            }\n        } finally {\n            this.searching = false;\n\n            if (this.foundAddress) await this._setToCurrentTransactionData();\n\n            this._changeDetectionRef.detectChanges();\n        }\n    }\n\n    private _initForm(): void {\n        this.form = this._formBuilder.group({\n            amount: [\n                this.transactionData?.amount || \"\",\n                [\n                    Validators.required,\n                    Validators.min(0),\n                    Validators.max(this.transactionData.balance as number),\n                    this._amountValidation(this.transactionData.balance as number),\n                ],\n            ],\n            toAddress: [this.transactionData?.receiver?.address || \"\", [Validators.required, Validators.maxLength(66), this._addressValidator()]],\n            fromAddress: [this.transactionData?.sender?.address || \"\"],\n        });\n\n        const toAddressCtrl = this.form?.get(\"toAddress\");\n\n        if (!toAddressCtrl) return;\n\n        toAddressCtrl.valueChanges.pipe(takeUntil(this.unsubscriber$), debounceTime(1000)).subscribe((value: string) => {\n            if (!value || !value.trim() || this.form.get(\"toAddress\")?.invalid) {\n                this.foundAddress = undefined;\n                this.isZelfNameNotFound = false;\n                this._setToCurrentTransactionData();\n\n                return;\n            }\n\n            this._handleToAddressChange(value);\n        });\n\n        if (!toAddressCtrl.value || !toAddressCtrl.value.trim()) return;\n\n        if (this.transactionData?.receiver?.address) {\n            this._setRawAddressToFoundAddress(this.transactionData.receiver.address, this.addressKey);\n\n            this.withdrawStep = true;\n\n            return;\n        }\n\n        toAddressCtrl.updateValueAndValidity();\n    }\n\n    private async _initTransactionData(): Promise<void> {\n        this.recentAddresses = this._transactionService.findAddressInRecentAddresses(\"network\", this.transactionData.network);\n\n        await this._fetchTokenPrice();\n\n        this._initForm();\n    }\n\n    async _queryZNS(key: string, value: string): Promise<void> {\n        try {\n            if (key === \"zelfName\") value = value.toLowerCase();\n\n            const response = await this._zelfNameService.searchZelfNameV2(key, value);\n\n            if (!response.data) {\n                this.foundAddress = undefined;\n\n                return;\n            }\n\n            const foundAddress = new WalletModel(response.data.ipfs?.length ? response.data.ipfs[0] : response.data.arweave[0]);\n            const zelfObjectContainsAddress = !!foundAddress[this.addressKey];\n\n            this.foundAddress = zelfObjectContainsAddress ? foundAddress : undefined;\n        } catch (error) {\n            this.foundAddress = undefined;\n\n            throw error;\n        }\n    }\n\n    private _setRawAddressToFoundAddress(text: string, addressKey: string): void {\n        this.searching = false;\n        this.isZelfNameNotFound = false;\n\n        this.foundAddress = new WalletModel({\n            [addressKey]: text,\n            publicData: { zelfName: this.transactionData?.receiver?.zelfName },\n        });\n\n        if (this.withdrawStep) return;\n\n        const toAddressCtrl = this.form.get(\"toAddress\");\n\n        if (toAddressCtrl) toAddressCtrl.updateValueAndValidity({ emitEvent: false });\n    }\n\n    private async _setToCurrentTransactionData(): Promise<void> {\n        try {\n            if (this.withdrawStep) {\n                const amount = Number(String(this.form.get(\"amount\")?.value || \"0\").replace(\",\", \".\"));\n\n                this.transactionData.amount = amount;\n            }\n\n            this.transactionData.receiver.address = (this.foundAddress && this.foundAddress[this.addressKey]) || \"\";\n            this.transactionData.receiver.zelfName = this.foundAddress?.publicData?.zelfName || \"\";\n\n            await this._transactionService.setCurrentTransactionData(this.transactionData);\n        } catch (exception) {\n            console.error(\"Error setting transaction data\", exception);\n            this.openErrorSnackBar(\"send-transaction.error-setting-transaction-data\");\n        }\n    }\n\n    async continueToWithdraw(): Promise<void> {\n        const address = this.form.get(\"toAddress\")?.value;\n\n        const isEVM =\n            this.transactionData.isEthToken || this.transactionData.isAvaxToken || this.transactionData.isPolToken || this.transactionData.isBscToken;\n        const isSuiTokenOrNetwork = this.transactionData.isSuiToken;\n\n        if (this.foundAddress) {\n            const toAddressCtrl = this.form.get(\"toAddress\");\n\n            if (toAddressCtrl) {\n                toAddressCtrl.setValue(\n                    this.foundAddress[\n                        isSuiTokenOrNetwork\n                            ? \"suiAddress\"\n                            : isEVM\n                              ? \"ethAddress\"\n                              : this.transactionData.isSolToken\n                                ? \"solanaAddress\"\n                                : this.transactionData.isBtcToken\n                                  ? \"btcAddress\"\n                                  : \"solanaAddress\"\n                    ] || \"\"\n                );\n\n                toAddressCtrl.updateValueAndValidity({ emitEvent: false });\n            }\n\n            await this._setToCurrentTransactionData();\n\n            this.withdrawStep = true;\n\n            return;\n        }\n\n        if (this.transactionData.isSuiToken && this._suiService.isValidSuiAddress(address)) {\n            this._setRawAddressToFoundAddress(address, \"suiAddress\");\n        } else if (isEVM && this._checkEVMAddress(address)) {\n            this._setRawAddressToFoundAddress(address, \"ethAddress\");\n        } else if (this.transactionData.isSolToken && this._solanaService.isValidSolanaAddress(address)) {\n            this._setRawAddressToFoundAddress(address, \"solanaAddress\");\n        } else if (this.transactionData.isBtcToken && this._bitcoinService.isValidBTCAddress(address)) {\n            this._setRawAddressToFoundAddress(address, \"btcAddress\");\n\n            try {\n                if (this.foundAddress && \"btcAddress\" in this.foundAddress) {\n                    const address = (this.foundAddress as any).btcAddress || \"\";\n                    const btcBalance = await this._bitcoinService.getBitcoinBalance(address);\n\n                    if (btcBalance.balance < parseFloat(this.form.get(\"amount\")?.value || \"0\")) {\n                        this._snackBar.open(this._translocoService.translate(\"INSUFFICIENT_FUNDS\"), this._translocoService.translate(\"CLOSE\"), {\n                            duration: 5000,\n                        });\n                        return;\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error checking Bitcoin balance:\", error);\n            }\n        }\n\n        await this._setToCurrentTransactionData();\n\n        this.withdrawStep = true;\n    }\n\n    async continueToConfirmation(): Promise<void> {\n        if (!this.form.valid) return;\n\n        const address = this.form.get(\"toAddress\")?.value;\n\n        if (!address) {\n            console.error(\"No address provided\");\n            return;\n        }\n\n        const isEVM =\n            this.transactionData.isEthToken || this.transactionData.isAvaxToken || this.transactionData.isPolToken || this.transactionData.isBscToken;\n\n        if (!this.foundAddress) {\n            if (this.transactionData.isSuiToken && this._suiService.isValidSuiAddress(address)) {\n                this._setRawAddressToFoundAddress(address, \"suiAddress\");\n            } else if (isEVM && this._checkEVMAddress(address)) {\n                this._setRawAddressToFoundAddress(address, \"ethAddress\");\n            } else if (this.transactionData.isSolToken && this._solanaService.isValidSolanaAddress(address)) {\n                this._setRawAddressToFoundAddress(address, \"solanaAddress\");\n            } else if (this.transactionData.isBtcToken && this._bitcoinService.isValidBTCAddress(address)) {\n                this._setRawAddressToFoundAddress(address, \"btcAddress\");\n            }\n        }\n\n        if (!this.foundAddress) {\n            console.error(\"No valid address found\");\n            return;\n        }\n\n        await this._setToCurrentTransactionData();\n\n        this._router.navigate([\"/send/confirmation\"]);\n    }\n\n    getTimeDiff(lastUsed: Date | string | undefined): string {\n        if (!lastUsed) return \"\";\n\n        const now = new Date();\n        const lastUsedDate = new Date(lastUsed);\n        const diffInSeconds = Math.floor((now.getTime() - lastUsedDate.getTime()) / 1000);\n\n        if (diffInSeconds < 60) {\n            return `${diffInSeconds}s`;\n        } else if (diffInSeconds < 3600) {\n            const minutes = Math.floor(diffInSeconds / 60);\n            return `${minutes}min`;\n        } else if (diffInSeconds < 86400) {\n            const hours = Math.floor(diffInSeconds / 3600);\n            return `${hours}h`;\n        } else if (diffInSeconds < 2592000) {\n            const days = Math.floor(diffInSeconds / 86400);\n            return `${days}d`;\n        } else {\n            const months = Math.floor(diffInSeconds / 2592000);\n            return `${months}mnth`;\n        }\n    }\n\n    goBack(): void {\n        this.transactionData.amount = 0;\n        this.transactionData.receiver.address = \"\";\n        this.transactionData.receiver.zelfName = \"\";\n\n        if (this.withdrawStep) {\n            this.foundAddress = undefined;\n\n            this.form.get(\"toAddress\")?.patchValue(this.transactionData.receiver.address);\n            this.form.get(\"amount\")?.patchValue(this.transactionData.amount);\n\n            this._transactionService.setCurrentTransactionData(this.transactionData);\n\n            this.withdrawStep = false;\n\n            return;\n        }\n\n        this._transactionService.setCurrentTransactionData(this.transactionData);\n\n        this._router.navigate([\"/send\"]);\n    }\n\n    isConfirmationDisabled(): boolean {\n        if (!this.foundAddress || this.searching || this.form.invalid || this.form.get(\"amount\")?.invalid) return true;\n\n        return false;\n    }\n\n    isWithdrawDisabled(): boolean {\n        if (!this.foundAddress || this.searching) return true;\n\n        return false;\n    }\n\n    openErrorSnackBar(message: string): void {\n        this._snackBar.open(this._translocoService.translate(message), this._translocoService.translate(\"common.close\"), {\n            duration: 5000,\n            panelClass: \"zelf-snackbar\",\n            verticalPosition: \"top\",\n        });\n    }\n\n    async pasteAddress(): Promise<void> {\n        if (this.withdrawStep || this.searching) return;\n\n        const text = await navigator.clipboard.readText();\n\n        this._handlePaste(text);\n    }\n\n    async pastedAddress(event: ClipboardEvent): Promise<void> {\n        event.preventDefault();\n\n        if (this.withdrawStep || this.searching) return;\n\n        const text = event.clipboardData?.getData(\"text\") as string;\n\n        this._handlePaste(text);\n    }\n\n    selectRecentAddress(address: AddressBook): void {\n        if (this.searching || this.form.get(\"toAddress\")?.value === address) return;\n\n        this.form.get(\"toAddress\")?.patchValue(address.address);\n    }\n\n    async sendTransaction(): Promise<void> {\n        if (this.form.invalid) return;\n\n        this.loading = true;\n\n        try {\n            const walletData = await this._walletService.getCurrentWallet();\n            const mnemonic = this._vaultService.mnemonic;\n\n            if (!walletData || !mnemonic) {\n                throw new Error(\"No wallet data or mnemonic available\");\n            }\n\n            const amount = parseFloat(this.form.get(\"amount\")?.value || \"0\");\n            const toAddress = this.form.get(\"toAddress\")?.value;\n\n            if (this.transactionData.isBtcToken) {\n                const transactionParams: TransactionParams = {\n                    from: \"\", // Will be derived from mnemonic in Bitcoin service\n                    to: toAddress,\n                    value: String(amount),\n                    network: \"bitcoin\",\n                    mnemonic: mnemonic,\n                };\n\n                const result = await this._bitcoinService.sendTransaction(transactionParams);\n\n                this._snackBar.open(this._translocoService.translate(\"TRANSACTION_SENT\"), this._translocoService.translate(\"CLOSE\"), {\n                    duration: 5000,\n                });\n\n                this._router.navigate([\"/transaction-confirmation\"], {\n                    state: {\n                        hash: result.hash,\n                        network: \"bitcoin\",\n                        amount: amount,\n                        to: toAddress,\n                        symbol: \"BTC\",\n                    },\n                });\n            } else {\n            }\n        } catch (error) {\n            console.error(\"Error sending transaction:\", error);\n            this._snackBar.open(this._translocoService.translate(\"TRANSACTION_FAILED\"), this._translocoService.translate(\"CLOSE\"), {\n                duration: 5000,\n            });\n        } finally {\n            this.loading = false;\n        }\n    }\n\n    setToInput(address: AddressBook): void {\n        this.form.get(\"toAddress\")?.patchValue(address.address);\n    }\n\n    withdrawAll(): void {\n        this.form.get(\"amount\")?.patchValue(this.transactionData.balance);\n    }\n}\n","<div class=\"zelf-card send-transaction\" *transloco=\"let t\">\n    <ng-container *ngIf=\"!loading\">\n        <div class=\"send-transaction__header\">\n            <div class=\"send-transaction__col1\">\n                <button (click)=\"goBack()\" mat-flat-button class=\"zelf-icon-button zelf-icon-button--anti-flash-white zelf-icon-button--40\">\n                    <svg width=\"22\" height=\"14\" viewBox=\"0 0 22 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M20.0898 5.8277H4.72478L8.08478 2.4677C8.53978 2.0127 8.53978 1.2777 8.08478 0.822695C7.62978 0.367695 6.89478 0.367695 6.43978 0.822695L1.08478 6.1777C0.62978 6.6327 0.62978 7.3677 1.08478 7.8227L6.43978 13.1777C6.89478 13.6327 7.62978 13.6327 8.08478 13.1777C8.53978 12.7227 8.53978 11.9877 8.08478 11.5327L4.72478 8.16103H20.0898C20.7314 8.16103 21.2564 7.63603 21.2564 6.99436C21.2564 6.3527 20.7314 5.8277 20.0898 5.8277Z\"\n                        />\n                    </svg>\n                </button>\n            </div>\n\n            <div class=\"send-transaction__col2\">\n                <p class=\"send-transaction__title\">{{ t(\"common.send_symbol\", { symbol: transactionData.symbol }) }}</p>\n            </div>\n\n            <div class=\"send-transaction__col3\"></div>\n        </div>\n\n        <form class=\"send-transaction__form\" [formGroup]=\"form\">\n            <div class=\"zelf-card__content send-transaction__content\">\n                <p class=\"send-transaction__input-label\">\n                    <span class=\"send-transaction__input-label-text\">{{ t(\"common.from\") }}:</span>\n                </p>\n\n                <div class=\"zelf-input zelf-input--wide zelf-input--gap-narrow\">\n                    <input\n                        [placeholder]=\"t('send.from_address')\"\n                        autocomplete=\"off\"\n                        class=\"zelf-input__control\"\n                        formControlName=\"fromAddress\"\n                        id=\"fromAddress\"\n                        name=\"fromAddress\"\n                        readonly\n                    />\n\n                    <div class=\"send-transaction__address-name-zelf-name\">{{ transactionData.sender.zelfName | uppercase }}</div>\n                </div>\n\n                <p class=\"send-transaction__input-label send-transaction__input-label--mt-8\">\n                    <span class=\"send-transaction__input-label-text\">{{ t(\"common.to\") }}:</span>\n\n                    <svg width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 11C9.45 11 9 10.55 9 10V6C9 5.45 9.45 5 10 5C10.55 5 11 5.45 11 6V10C11 10.55 10.55 11 10 11ZM11 15H9V13H11V15Z\"\n                            fill=\"#181818\"\n                        />\n                    </svg>\n                </p>\n\n                <div\n                    class=\"zelf-input zelf-input--wide zelf-input--gap-narrow\"\n                    [ngClass]=\"{ 'zelf-input--error': form.get('toAddress')?.dirty && form.get('toAddress')?.invalid }\"\n                >\n                    <input\n                        (paste)=\"pastedAddress($event)\"\n                        [disabled]=\"withdrawStep || searching\"\n                        [placeholder]=\"t('send.domain_or_address')\"\n                        [readonly]=\"withdrawStep\"\n                        autocomplete=\"off\"\n                        class=\"zelf-input__control\"\n                        formControlName=\"toAddress\"\n                        id=\"toAddress\"\n                        name=\"toAddress\"\n                        required\n                    />\n\n                    <button\n                        (click)=\"pasteAddress()\"\n                        [disabled]=\"searching\"\n                        *ngIf=\"!withdrawStep\"\n                        class=\"zelf-icon-button zelf-icon-button--transparent zelf-icon-button--text\"\n                        type=\"button\"\n                        mat-flat-button\n                    >\n                        {{ t(\"common.paste\") | uppercase }}\n                    </button>\n\n                    <button *ngIf=\"false\" [disabled]=\"searching\" class=\"zelf-icon-button zelf-icon-button--transparent\" mat-flat-button>\n                        <svg width=\"22\" height=\"18\" viewBox=\"0 0 22 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M16.505 0.677734C14.555 0.677734 12.455 1.07773 11.005 2.17773C9.55501 1.07773 7.455 0.677734 5.505 0.677734C4.05501 0.677734 2.515 0.897734 1.225 1.46773C0.495005 1.79773 0.00500488 2.50773 0.00500488 3.31773V14.5977C0.00500488 15.8977 1.225 16.8577 2.485 16.5377C3.465 16.2877 4.505 16.1777 5.505 16.1777C7.065 16.1777 8.72501 16.4377 10.065 17.0977C10.665 17.3977 11.345 17.3977 11.935 17.0977C13.275 16.4277 14.935 16.1777 16.495 16.1777C17.495 16.1777 18.535 16.2877 19.515 16.5377C20.775 16.8677 21.995 15.9077 21.995 14.5977V3.31773C21.995 2.50773 21.505 1.79773 20.775 1.46773C19.495 0.897734 17.955 0.677734 16.505 0.677734ZM20.005 13.4077C20.005 14.0377 19.425 14.4977 18.805 14.3877C18.055 14.2477 17.275 14.1877 16.505 14.1877C14.805 14.1877 12.355 14.8377 11.005 15.6877V4.17773C12.355 3.32773 14.805 2.67773 16.505 2.67773C17.425 2.67773 18.335 2.76773 19.205 2.95773C19.665 3.05773 20.005 3.46773 20.005 3.93773V13.4077Z\"\n                            />\n                        </svg>\n                    </button>\n\n                    <button *ngIf=\"false\" [disabled]=\"searching\" class=\"zelf-icon-button zelf-icon-button--anti-flash-white\" mat-flat-button>\n                        <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M2 8H6C7.1 8 8 7.1 8 6V2C8 0.9 7.1 0 6 0H2C0.9 0 0 0.9 0 2V6C0 7.1 0.9 8 2 8ZM2 2H6V6H2V2Z\" fill=\"black\" />\n                            <path\n                                d=\"M2 18H6C7.1 18 8 17.1 8 16V12C8 10.9 7.1 10 6 10H2C0.9 10 0 10.9 0 12V16C0 17.1 0.9 18 2 18ZM2 12H6V16H2V12Z\"\n                                fill=\"black\"\n                            />\n                            <path\n                                d=\"M10 2V6C10 7.1 10.9 8 12 8H16C17.1 8 18 7.1 18 6V2C18 0.9 17.1 0 16 0H12C10.9 0 10 0.9 10 2ZM16 6H12V2H16V6Z\"\n                                fill=\"black\"\n                            />\n                            <path\n                                d=\"M18 17.5V16.5C18 16.22 17.78 16 17.5 16H16.5C16.22 16 16 16.22 16 16.5V17.5C16 17.78 16.22 18 16.5 18H17.5C17.78 18 18 17.78 18 17.5Z\"\n                                fill=\"black\"\n                            />\n                            <path\n                                d=\"M10 10.5V11.5C10 11.78 10.22 12 10.5 12H11.5C11.78 12 12 11.78 12 11.5V10.5C12 10.22 11.78 10 11.5 10H10.5C10.22 10 10 10.22 10 10.5Z\"\n                                fill=\"black\"\n                            />\n                            <path\n                                d=\"M13.5 12H12.5C12.22 12 12 12.22 12 12.5V13.5C12 13.78 12.22 14 12.5 14H13.5C13.78 14 14 13.78 14 13.5V12.5C14 12.22 13.78 12 13.5 12Z\"\n                                fill=\"black\"\n                            />\n                            <path\n                                d=\"M10 14.5V15.5C10 15.78 10.22 16 10.5 16H11.5C11.78 16 12 15.78 12 15.5V14.5C12 14.22 11.78 14 11.5 14H10.5C10.22 14 10 14.22 10 14.5Z\"\n                                fill=\"black\"\n                            />\n                            <path\n                                d=\"M12.5 18H13.5C13.78 18 14 17.78 14 17.5V16.5C14 16.22 13.78 16 13.5 16H12.5C12.22 16 12 16.22 12 16.5V17.5C12 17.78 12.22 18 12.5 18Z\"\n                                fill=\"black\"\n                            />\n                            <path\n                                d=\"M14.5 16H15.5C15.78 16 16 15.78 16 15.5V14.5C16 14.22 15.78 14 15.5 14H14.5C14.22 14 14 14.22 14 14.5V15.5C14 15.78 14.22 16 14.5 16Z\"\n                                fill=\"black\"\n                            />\n                            <path\n                                d=\"M15.5 10H14.5C14.22 10 14 10.22 14 10.5V11.5C14 11.78 14.22 12 14.5 12H15.5C15.78 12 16 11.78 16 11.5V10.5C16 10.22 15.78 10 15.5 10Z\"\n                                fill=\"black\"\n                            />\n                            <path\n                                d=\"M16.5 14H17.5C17.78 14 18 13.78 18 13.5V12.5C18 12.22 17.78 12 17.5 12H16.5C16.22 12 16 12.22 16 12.5V13.5C16 13.78 16.22 14 16.5 14Z\"\n                                fill=\"black\"\n                            />\n                        </svg>\n                    </button>\n                </div>\n\n                <div\n                    class=\"zelf-message zelf-message--error zelf-message--column\"\n                    *ngIf=\"form.get('toAddress')?.dirty && form.get('toAddress')?.errors\"\n                >\n                    <ng-container *ngIf=\"form.get('toAddress')?.errors?.required\">\n                        <div class=\"zelf-message__row\">\n                            <ng-container *ngTemplateOutlet=\"cross\"></ng-container>\n                            <p>{{ t(\"errors.required_field\") }}</p>\n                        </div>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"form.get('toAddress')?.errors?.sameAddress\">\n                        <div class=\"zelf-message__row\">\n                            <ng-container *ngTemplateOutlet=\"cross\"></ng-container>\n                            <p>{{ t(\"errors.same_address\") }}</p>\n                        </div>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"form.get('toAddress')?.errors?.maxLength\">\n                        <div class=\"zelf-message__row\">\n                            <ng-container *ngTemplateOutlet=\"cross\"></ng-container>\n                            <p>{{ t(\"errors.address_too_long\") }}</p>\n                        </div>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"form.get('toAddress')?.errors?.invalidFormat\">\n                        <div class=\"zelf-message__row\">\n                            <ng-container *ngTemplateOutlet=\"cross\"></ng-container>\n                            <p>{{ t(\"errors.invalid_format\") }}</p>\n                        </div>\n                    </ng-container>\n                </div>\n\n                <ng-container *ngIf=\"withdrawStep\">\n                    <p class=\"send-transaction__input-label send-transaction__input-label--mt-8\">{{ t(\"send.withdrawal_amount\") }}:</p>\n\n                    <div\n                        class=\"zelf-input zelf-input--wide\"\n                        [ngClass]=\"{ 'zelf-input--error': form.get('amount')?.dirty && form.get('amount')?.invalid }\"\n                    >\n                        <input\n                            [placeholder]=\"t('send.enter_amount_to_send')\"\n                            autocomplete=\"off\"\n                            class=\"zelf-input__control\"\n                            formControlName=\"amount\"\n                            id=\"amount\"\n                            name=\"amount\"\n                            required\n                            type=\"string\"\n                        />\n\n                        <button (click)=\"withdrawAll()\" class=\"zelf-icon-button zelf-icon-button--transparent\" mat-flat-button type=\"button\">\n                            {{ t(\"common.all\") | uppercase }}\n                        </button>\n                    </div>\n\n                    <p class=\"send-transaction__fiat-price\">~{{ fiatPrice | currency: \"USD\" : \"symbol\" : \"1.2\" }}</p>\n\n                    <p class=\"zelf-input__tip\">\n                        {{ t(\"send.available_balance\", { symbol: transactionData.symbol, balance: transactionData.balance }) }}\n                    </p>\n\n                    <div\n                        class=\"zelf-message zelf-message--error zelf-message--column\"\n                        *ngIf=\"form.get('amount')?.dirty && form.get('amount')?.errors\"\n                    >\n                        <ng-container *ngIf=\"form.get('amount')?.errors?.required\">\n                            <div class=\"zelf-message__row\">\n                                <ng-container *ngTemplateOutlet=\"cross\"></ng-container>\n                                <p>{{ t(\"errors.required_field\") }}</p>\n                            </div>\n                        </ng-container>\n\n                        <ng-container *ngIf=\"form.get('amount')?.errors?.invalidNumber\">\n                            <div class=\"zelf-message__row\">\n                                <ng-container *ngTemplateOutlet=\"cross\"></ng-container>\n                                <p>{{ t(\"errors.invalid_number_value\") }}</p>\n                            </div>\n                        </ng-container>\n\n                        <ng-container *ngIf=\"form.get('amount')?.errors?.lessThan\">\n                            <div class=\"zelf-message__row\">\n                                <ng-container *ngTemplateOutlet=\"cross\"></ng-container>\n                                <p>{{ t(\"errors.must_be_less_than\", { value: form.get(\"lessThan\")?.errors?.greaterThan.value }) }}</p>\n                            </div>\n                        </ng-container>\n\n                        <ng-container *ngIf=\"form.get('amount')?.errors?.greaterThan\">\n                            <div class=\"zelf-message__row\">\n                                <ng-container *ngTemplateOutlet=\"cross\"></ng-container>\n\n                                <p>{{ t(\"errors.must_be_greater_than\", { value: 0 }) }}</p>\n                            </div>\n                        </ng-container>\n                    </div>\n                </ng-container>\n\n                <ng-container *ngIf=\"!withdrawStep && filteredAddresses.length\">\n                    <div class=\"send-transaction__address-book\">\n                        <div\n                            (click)=\"selectRecentAddress(address)\"\n                            [matRippleColor]=\"'rgba(0, 0, 0, 0.1)'\"\n                            *ngFor=\"let address of filteredAddresses\"\n                            class=\"zelf-action-row\"\n                            matRipple\n                        >\n                            <div class=\"send-transaction__address-row\">\n                                <svg width=\"20\" height=\"16\" viewBox=\"0 0 20 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path\n                                        d=\"M16 0H4C1.79 0 0 1.79 0 4V12C0 14.21 1.79 16 4 16H16C18.21 16 20 14.21 20 12V4C20 1.79 18.21 0 16 0ZM14.14 9.77C13.9 9.97 13.57 10.05 13.26 9.97L2.15 7.25C2.45 6.52 3.16 6 4 6H16C16.67 6 17.26 6.34 17.63 6.84L14.14 9.77ZM4 2H16C17.1 2 18 2.9 18 4V4.55C17.41 4.21 16.73 4 16 4H4C3.27 4 2.59 4.21 2 4.55V4C2 2.9 2.9 2 4 2Z\"\n                                        fill=\"#181818\"\n                                    />\n                                </svg>\n\n                                <p class=\"zelf-action-row__text send-transaction__address-col\">\n                                    <span class=\"send-transaction__address-name\" *ngIf=\"!address.zelfName\">{{ address.address | addressMask }}</span>\n\n                                    <span class=\"send-transaction__address-name send-transaction__address-name--zelf-name\" *ngIf=\"address.zelfName\">{{\n                                        address.zelfName\n                                    }}</span>\n\n                                    <span class=\"send-transaction__address-used\">{{ t(\"send.used\", { days: getTimeDiff(address.lastUsed) }) }}</span>\n                                </p>\n                            </div>\n\n                            <div>\n                                <ng-container *ngIf=\"address.address === form.get('toAddress')?.value\">\n                                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <path\n                                            d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM9.29 16.29L5.7 12.7C5.31 12.31 5.31 11.68 5.7 11.29C6.09 10.9 6.72 10.9 7.11 11.29L10 14.17L16.88 7.29C17.27 6.9 17.9 6.9 18.29 7.29C18.68 7.68 18.68 8.31 18.29 8.7L10.7 16.29C10.32 16.68 9.68 16.68 9.29 16.29Z\"\n                                            fill=\"#1ea446\"\n                                        />\n                                    </svg>\n                                </ng-container>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n\n                <zelf-loader *ngIf=\"searching\"></zelf-loader>\n\n                <ng-container *ngIf=\"!withdrawStep\">\n                    <div class=\"zelf-object-preview\" *ngIf=\"foundAddress && !isZelfNameNotFound\">\n                        <div class=\"zelf-object-preview__chip\">\n                            <div class=\"zelf-object-preview__icon-bubble\">\n                                <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path\n                                        d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM8 15L3 10L4.41 8.59L8 12.17L15.59 4.58L17 6L8 15Z\"\n                                    />\n                                </svg>\n                            </div>\n                            <p class=\"zelf-object-preview__chip-text\" *ngIf=\"foundAddress.name\">{{ t(\"send.address_found\") }}</p>\n                            <p class=\"zelf-object-preview__chip-text\" *ngIf=\"!foundAddress.name\">{{ t(\"send.external_address_found\") }}</p>\n                        </div>\n\n                        <div\n                            class=\"zelf-chip\"\n                            [ngClass]=\"{\n                                'zelf-chip--error': foundAddress.publicData.type !== 'mainnet',\n                                'zelf-chip--info': foundAddress.publicData.type === 'mainnet',\n                            }\"\n                        >\n                            <ng-container *ngIf=\"foundAddress.publicData?.type !== 'mainnet'\">{{ t(\"send.zelf_name_not_registered\") }}</ng-container>\n                            <ng-container *ngIf=\"foundAddress.publicData?.type === 'mainnet'\">{{ t(\"send.zelf_name_registered\") }}</ng-container>\n                        </div>\n\n                        <h3 class=\"zelf-object-preview__zelf-name\">\n                            {{ foundAddress.publicData.zelfName }}\n                        </h3>\n\n                        <p class=\"zelf-object-preview__address\" *ngIf=\"transactionData.isEthToken || transactionData.isAvaxToken\">\n                            {{ foundAddress.ethAddress }}\n                        </p>\n\n                        <p class=\"zelf-object-preview__address\" *ngIf=\"transactionData.isSolToken\">{{ foundAddress.solanaAddress }}</p>\n                        <p class=\"zelf-object-preview__address\" *ngIf=\"transactionData.isBtcToken\">{{ foundAddress.btcAddress }}</p>\n                        <p class=\"zelf-object-preview__address\" *ngIf=\"transactionData.isSuiToken\">{{ foundAddress.suiAddress }}</p>\n\n                        <hr class=\"zelf-object-preview__horizontal-rule\" />\n\n                        <p class=\"zelf-object-preview__instructions\">{{ t(\"send.continue_process\") }}</p>\n                    </div>\n\n                    <div class=\"zelf-object-preview\" *ngIf=\"isZelfNameNotFound\">\n                        <div class=\"zelf-object-preview__chip\">\n                            <div class=\"zelf-object-preview__icon-bubble zelf-object-preview__icon-bubble--error\">\n                                <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path\n                                        d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM11 15H9V13H11V15ZM11 11H9V5H11V11Z\"\n                                        fill=\"currentColor\"\n                                    />\n                                </svg>\n                            </div>\n\n                            <p class=\"zelf-object-preview__chip-text\">{{ t(\"send.zelf_name_not_registered\") }}</p>\n                        </div>\n\n                        <hr class=\"zelf-object-preview__horizontal-rule\" />\n\n                        <p class=\"zelf-object-preview__instructions\">{{ t(\"send.cannot_continue_process\") }}</p>\n                    </div>\n                </ng-container>\n            </div>\n\n            <div class=\"zelf-card__actions\">\n                <button\n                    (click)=\"continueToWithdraw()\"\n                    [disabled]=\"isWithdrawDisabled()\"\n                    *ngIf=\"!withdrawStep\"\n                    class=\"zelf-button zelf-button--black zelf-button--wide\"\n                    mat-flat-button\n                    type=\"button\"\n                >\n                    {{ t(\"common.next\") }}\n                </button>\n\n                <button\n                    (click)=\"continueToConfirmation()\"\n                    [disabled]=\"isConfirmationDisabled()\"\n                    *ngIf=\"withdrawStep\"\n                    class=\"zelf-button zelf-button--black zelf-button--wide\"\n                    mat-flat-button\n                    type=\"button\"\n                >\n                    {{ t(\"common.withdraw\") }}\n                </button>\n            </div>\n        </form>\n    </ng-container>\n\n    <zelf-loader *ngIf=\"loading\"></zelf-loader>\n</div>\n\n<ng-template #cross>\n    <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M10 0C4.47 0 0 4.47 0 10C0 15.53 4.47 20 10 20C15.53 20 20 15.53 20 10C20 4.47 15.53 0 10 0ZM14.3 14.3C13.91 14.69 13.28 14.69 12.89 14.3L10 11.41L7.11 14.3C6.72 14.69 6.09 14.69 5.7 14.3C5.31 13.91 5.31 13.28 5.7 12.89L8.59 10L5.7 7.11C5.31 6.72 5.31 6.09 5.7 5.7C6.09 5.31 6.72 5.31 7.11 5.7L10 8.59L12.89 5.7C13.28 5.31 13.91 5.31 14.3 5.7C14.69 6.09 14.69 6.72 14.3 7.11L11.41 10L14.3 12.89C14.68 13.27 14.68 13.91 14.3 14.3Z\"\n            fill=\"#DC362E\"\n        />\n    </svg>\n</ng-template>\n","import { Pipe, type PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"addressMask\",\n})\nexport class AddressMaskPipe implements PipeTransform {\n    transform(value?: string): unknown {\n        if (typeof value !== \"string\" || !value || !value.trim()) return \"\";\n\n        const firstPart = value.slice(0, 8);\n        const lastPart = value.slice(-8);\n\n        return `${firstPart}...${lastPart}`;\n    }\n}\n"],"names":["debounceTime","Subject","takeUntil","CommonModule","ReactiveFormsModule","Validators","MatButtonModule","MatRippleModule","MatProgressSpinnerModule","RouterModule","TranslocoModule","AddressMaskPipe","WalletModel","ZelfLoaderComponent","i0","ɵɵelementStart","ɵɵlistener","SendTransactionComponent_div_0_ng_container_1_button_27_Template_button_click_0_listener","ɵɵrestoreView","_r3","ctx_r1","ɵɵnextContext","ɵɵresetView","pasteAddress","ɵɵtext","ɵɵelementEnd","ɵɵproperty","searching","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind1","t_r4","ɵɵelement","ɵɵelementContainer","ɵɵelementContainerStart","ɵɵtemplate","SendTransactionComponent_div_0_ng_container_1_div_30_ng_container_1_ng_container_2_Template","cross_r5","ɵɵtextInterpolate","SendTransactionComponent_div_0_ng_container_1_div_30_ng_container_2_ng_container_2_Template","SendTransactionComponent_div_0_ng_container_1_div_30_ng_container_3_ng_container_2_Template","SendTransactionComponent_div_0_ng_container_1_div_30_ng_container_4_ng_container_2_Template","SendTransactionComponent_div_0_ng_container_1_div_30_ng_container_1_Template","SendTransactionComponent_div_0_ng_container_1_div_30_ng_container_2_Template","SendTransactionComponent_div_0_ng_container_1_div_30_ng_container_3_Template","SendTransactionComponent_div_0_ng_container_1_div_30_ng_container_4_Template","tmp_5_0","form","get","errors","required","tmp_6_0","sameAddress","tmp_7_0","maxLength","tmp_8_0","invalidFormat","SendTransactionComponent_div_0_ng_container_1_ng_container_31_div_13_ng_container_1_ng_container_2_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_31_div_13_ng_container_2_ng_container_2_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_31_div_13_ng_container_3_ng_container_2_Template","ɵɵpureFunction1","_c3","greaterThan","value","SendTransactionComponent_div_0_ng_container_1_ng_container_31_div_13_ng_container_4_ng_container_2_Template","ɵɵpureFunction0","_c4","SendTransactionComponent_div_0_ng_container_1_ng_container_31_div_13_ng_container_1_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_31_div_13_ng_container_2_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_31_div_13_ng_container_3_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_31_div_13_ng_container_4_Template","invalidNumber","lessThan","tmp_9_0","SendTransactionComponent_div_0_ng_container_1_ng_container_31_Template_button_click_5_listener","_r6","withdrawAll","SendTransactionComponent_div_0_ng_container_1_ng_container_31_div_13_Template","_c1","dirty","invalid","ɵɵpipeBind4","fiatPrice","ɵɵpureFunction2","_c2","transactionData","symbol","balance","tmp_11_0","address_r8","address","zelfName","SendTransactionComponent_div_0_ng_container_1_ng_container_32_div_2_Template_div_click_0_listener","_r7","$implicit","selectRecentAddress","SendTransactionComponent_div_0_ng_container_1_ng_container_32_div_2_span_5_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_32_div_2_span_6_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_32_div_2_ng_container_10_Template","_c5","getTimeDiff","lastUsed","SendTransactionComponent_div_0_ng_container_1_ng_container_32_div_2_Template","filteredAddresses","foundAddress","ethAddress","solanaAddress","btcAddress","suiAddress","SendTransactionComponent_div_0_ng_container_1_ng_container_34_div_1_p_5_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_34_div_1_p_6_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_34_div_1_ng_container_8_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_34_div_1_ng_container_9_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_34_div_1_p_12_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_34_div_1_p_13_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_34_div_1_p_14_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_34_div_1_p_15_Template","name","_c6","publicData","type","isEthToken","isAvaxToken","isSolToken","isBtcToken","isSuiToken","SendTransactionComponent_div_0_ng_container_1_ng_container_34_div_1_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_34_div_2_Template","isZelfNameNotFound","SendTransactionComponent_div_0_ng_container_1_button_36_Template_button_click_0_listener","_r9","continueToWithdraw","isWithdrawDisabled","SendTransactionComponent_div_0_ng_container_1_button_37_Template_button_click_0_listener","_r10","continueToConfirmation","isConfirmationDisabled","SendTransactionComponent_div_0_ng_container_1_Template_button_click_3_listener","_r1","goBack","SendTransactionComponent_div_0_ng_container_1_Template_input_paste_26_listener","$event","pastedAddress","SendTransactionComponent_div_0_ng_container_1_button_27_Template","SendTransactionComponent_div_0_ng_container_1_button_28_Template","SendTransactionComponent_div_0_ng_container_1_button_29_Template","SendTransactionComponent_div_0_ng_container_1_div_30_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_31_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_32_Template","SendTransactionComponent_div_0_ng_container_1_zelf_loader_33_Template","SendTransactionComponent_div_0_ng_container_1_ng_container_34_Template","SendTransactionComponent_div_0_ng_container_1_button_36_Template","SendTransactionComponent_div_0_ng_container_1_button_37_Template","_c0","sender","tmp_10_0","withdrawStep","tmp_17_0","length","SendTransactionComponent_div_0_ng_container_1_Template","SendTransactionComponent_div_0_zelf_loader_2_Template","loading","SendTransactionComponent","_assetService","_bitcoinService","_changeDetectionRef","_ethService","_formBuilder","_router","_snackBar","_solanaService","_suiService","_transactionService","_translocoService","_walletService","_zelfNameService","_vaultService","unsubscriber$","price","recentAddresses","constructor","ngOnInit","_this","_asyncToGenerator","getCurrentTransactionData","hasTransactionData","_initTransactionData","catch","finally","transactionData$","pipe","subscribe","navigate","ngOnDestroy","next","complete","addressKey","isBscToken","isPolToken","Error","amount","searchValue","filter","trim","RegExp","test","_addressValidator","control","pattern","_getAddressPattern","isValidZelfName","ZelfRegex","isValidEVMAddress","isValidSuiAddress","isValidSolanaAddress","isValidBTCAddress","invalidBTC","_amountValidation","maxValue","MIN_VALUE","isNaN","_checkEVMAddress","text","isValidFormat","isValidWeb3","checkIfValidAddress","toLowerCase","_fetchTokenPrice","_this2","response","fetchAssetPrice","data","open","error","ETHRegex","SOLRegex","BTCRegex","SUIRegex","_handlePaste","toAddressCtrl","patchValue","emitEvent","onlySelf","markAsDirty","updateValueAndValidity","_handleToAddressChange","_this3","undefined","isEVM","_queryZNS","_setRawAddressToFoundAddress","_setToCurrentTransactionData","detectChanges","_initForm","group","min","max","toAddress","receiver","fromAddress","valueChanges","_this4","findAddressInRecentAddresses","network","key","_this5","searchZelfNameV2","ipfs","arweave","zelfObjectContainsAddress","_this6","Number","String","replace","setCurrentTransactionData","exception","console","openErrorSnackBar","_this7","isSuiTokenOrNetwork","setValue","btcBalance","getBitcoinBalance","parseFloat","translate","duration","_this8","valid","now","Date","lastUsedDate","diffInSeconds","Math","floor","getTime","minutes","hours","days","months","message","panelClass","verticalPosition","_this9","navigator","clipboard","readText","event","_this0","preventDefault","clipboardData","getData","sendTransaction","_this1","walletData","getCurrentWallet","mnemonic","transactionParams","from","to","result","state","hash","setToInput","ɵɵdirectiveInject","i1","AssetService","i2","BitcoinService","ChangeDetectorRef","i3","EthereumService","i4","FormBuilder","i5","Router","i6","MatSnackBar","i7","SolanaService","i8","SuiService","i9","TransactionService","i10","TranslocoService","i11","WalletService","i12","ZelfNameService","i13","VaultService","selectors","decls","vars","consts","template","SendTransactionComponent_Template","rf","ctx","SendTransactionComponent_div_0_Template","SendTransactionComponent_ng_template_1_Template","ɵɵtemplateRefExtractor","i14","NgClass","NgForOf","NgIf","NgTemplateOutlet","UpperCasePipe","CurrencyPipe","i15","MatButton","i16","MatRipple","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","FormGroupDirective","FormControlName","TranslocoDirective","styles","transform","firstPart","slice","lastPart","pure"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}