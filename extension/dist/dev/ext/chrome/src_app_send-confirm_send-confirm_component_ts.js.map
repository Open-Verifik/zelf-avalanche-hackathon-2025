{"version":3,"file":"src_app_send-confirm_send-confirm_component_ts.js","mappings":"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","sources":["./src/app/send-confirm/send-confirm.component.ts","./src/app/send-confirm/send-confirm.component.html","./src/app/pipes/address-mask.pipe.ts"],"sourcesContent":["import { ethers } from \"ethers\";\nimport { firstValueFrom, Subject, takeUntil } from \"rxjs\";\n\nimport { CommonModule } from \"@angular/common\";\nimport { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, ReactiveFormsModule, UntypedFormGroup, Validators } from \"@angular/forms\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { Router, RouterModule } from \"@angular/router\";\nimport { TranslocoModule, TranslocoService } from \"@jsverse/transloco\";\n\nimport { AssetService } from \"app/asset.service\";\nimport { ChromeService } from \"app/chrome.service\";\nimport { FeeCalculationParams, TransactionFeeEstimate, TransactionParams, TransactionResult } from \"app/core/models/transaction-fee.model\";\nimport { AddressMaskPipe } from \"app/pipes/address-mask.pipe\";\nimport { BitcoinService, MempoolFeeRates } from \"app/services/bitcoin.service\";\nimport { BlockchainTransactionsService } from \"app/services/blockchain-transactions.service\";\nimport { NetworkName, NetworkService } from \"app/services/network.service\";\nimport { TransactionService } from \"app/transaction.service\";\nimport { VaultService } from \"app/vault.service\";\nimport { TransactionData, WalletModel } from \"app/wallet\";\nimport { WalletService } from \"app/wallet.service\";\nimport { ZelfLoaderComponent } from \"app/zelf-loader/zelf-loader.component\";\nimport { ZelfNameService } from \"app/zelf-name-service.service\";\n\n@Component({\n    imports: [\n        AddressMaskPipe,\n        CommonModule,\n        MatButtonModule,\n        MatProgressSpinnerModule,\n        ReactiveFormsModule,\n        RouterModule,\n        TranslocoModule,\n        ZelfLoaderComponent,\n    ],\n    selector: \"send-confirm\",\n    styleUrls: [\"./send-confirm.component.scss\"],\n    templateUrl: \"./send-confirm.component.html\",\n})\nexport class SendConfirmComponent implements OnInit, OnDestroy {\n    private _mnemonics: string = \"\";\n    private _password: string = \"\";\n    private _interval!: ReturnType<typeof setInterval>;\n    private _intervalTime: number = 30000;\n    private _skipPriceFetch: boolean = false;\n    private unsubcriber$: Subject<void> = new Subject<void>();\n\n    feeRates: MempoolFeeRates = {\n        fastestFee: 0,\n        halfHourFee: 0,\n        hourFee: 0,\n        economyFee: 0,\n        minimumFee: 0,\n    };\n\n    availableNetworks = [\n        { id: \"avalanche\", name: \"Avalanche\", symbol: \"AVAX\" },\n        { id: \"binance\", name: \"Binance\", symbol: \"BNB\" },\n        { id: \"bitcoin\", name: \"Bitcoin\", symbol: \"BTC\" },\n        { id: \"ethereum\", name: \"Ethereum\", symbol: \"ETH\" },\n        { id: \"polygon\", name: \"Polygon\", symbol: \"POL\" },\n        { id: \"solana\", name: \"Solana\", symbol: \"SOL\" },\n        { id: \"sui\", name: \"Sui\", symbol: \"SUI\" },\n    ];\n\n    form!: UntypedFormGroup;\n    isNativeAsset: boolean = false;\n    loading: boolean;\n    networkPrice: number = 0;\n    networkToken?: any;\n    passwordError: boolean = false;\n    passwordSet: boolean = false;\n    price: number = 0;\n    remainingAttempts: number = 0;\n    requiresBiometrics: boolean = false;\n    selectedFeeRate: number = 0;\n    sending: boolean = false;\n    showFeeInfo: boolean = false;\n    showPassword: boolean = false;\n    transactionData!: TransactionData;\n    wallet?: WalletModel;\n\n    constructor(\n        private _assetService: AssetService,\n        private _bitcoinService: BitcoinService,\n        private _blockchainTransactionsService: BlockchainTransactionsService,\n        private _chromeService: ChromeService,\n        private _formBuilder: FormBuilder,\n        private _networkService: NetworkService,\n        private _router: Router,\n        private _snackBar: MatSnackBar,\n        private _transactionService: TransactionService,\n        private _translocoService: TranslocoService,\n        private _vaultService: VaultService,\n        private _walletService: WalletService,\n        private _zelfNameService: ZelfNameService\n    ) {\n        this.loading = true;\n        this.remainingAttempts = this._vaultService.remainingAttempts;\n\n        this._mnemonics = \"\";\n        this._password = this._vaultService.password;\n\n        this._vaultService.mnemonic = \"\";\n        this._vaultService.password = \"\";\n\n        if (!this._password || !this._password.trim()) return;\n\n        this.passwordSet = true;\n        this.requiresBiometrics = false;\n    }\n\n    async ngOnInit(): Promise<void> {\n        this.transactionData = await this._transactionService.getCurrentTransactionData();\n\n        if (this.transactionData && this.transactionData.hasTransactionData && this.transactionData.hasCompletePaymentData) {\n            this._initTransactionData().finally(() => (this.loading = false));\n\n            return;\n        }\n\n        this._transactionService.transactionData$.pipe(takeUntil(this.unsubcriber$)).subscribe((transactionData) => {\n            this.transactionData = transactionData;\n\n            if (!this.transactionData || !this.transactionData.hasTransactionData) {\n                this._router.navigate([\"/send\"]);\n\n                return;\n            } else if (!this.transactionData.hasCompletePaymentData) {\n                this._router.navigate([\"/send/transaction\"]);\n\n                return;\n            }\n\n            this._initTransactionData().finally(() => (this.loading = false));\n        });\n    }\n\n    ngOnDestroy(): void {\n        clearInterval(this._interval);\n\n        this.unsubcriber$.next();\n        this.unsubcriber$.complete();\n    }\n\n    get fiatEconomyFee(): number {\n        const calculatedFee = this._bitcoinService.calculateBitcoinTransactionFee(this.feeRates.economyFee, this.networkPrice);\n\n        return calculatedFee.fiatFee;\n    }\n\n    get fiatFastestFee(): number {\n        const calculatedFee = this._bitcoinService.calculateBitcoinTransactionFee(this.feeRates.fastestFee, this.networkPrice);\n\n        return calculatedFee.fiatFee;\n    }\n\n    get fiatFeePrice(): number {\n        const amount = Number(this.transactionData.fee) || 0;\n        const fiatPrice = this.networkPrice || 0;\n\n        return amount * fiatPrice || Number(this.transactionData.fiatFee) || 0;\n    }\n\n    get fiatHalfHourFee(): number {\n        const calculatedFee = this._bitcoinService.calculateBitcoinTransactionFee(this.feeRates.halfHourFee, this.networkPrice);\n\n        return calculatedFee.fiatFee;\n    }\n\n    get fiatPrice(): number {\n        const amount = Number(this.transactionData.amount) || 0;\n        const fiatPrice = this.price || 0;\n\n        return amount * fiatPrice || amount * Number(this.transactionData.token.price || 0) || 0;\n    }\n\n    get hasBalance(): boolean {\n        const canCoverTokenBalance =\n            Number(this.transactionData.token.balance) > 0 && Number(this.transactionData.amount) <= Number(this.transactionData.token.balance);\n\n        if (this.isNativeAsset) {\n            const canCoverTotal = Number(this.transactionData.amount) + Number(this.transactionData.fee) <= Number(this.transactionData.token.amount);\n\n            return canCoverTokenBalance && canCoverTotal;\n        }\n\n        const canCoverNetworkFee = this.networkToken?.balance > 0 && Number(this.transactionData.fee) <= Number(this.networkToken?.balance);\n\n        return canCoverTokenBalance && canCoverNetworkFee;\n    }\n\n    get networkCurrency(): string {\n        return this._networkService.getNetworkSymbol(this.transactionData.network as NetworkName);\n    }\n\n    get total(): number {\n        return this.fiatPrice + this.fiatFeePrice || 0;\n    }\n\n    private async _calculateTransactionFee(): Promise<void> {\n        try {\n            const normalizedAmount = Number(String(this.transactionData.amount || \"0\").replace(\",\", \".\"));\n            const tokenSymbol = this.transactionData.token?.symbol;\n\n            let tokenAddress = this.transactionData.token?.address_token;\n\n            const isNativeToken = [\"AVAX\", \"ETH\", \"BNB\", \"MATIC\"].includes(tokenSymbol);\n\n            if (!tokenAddress && this.wallet && !isNativeToken) {\n                try {\n                    const addressData = await firstValueFrom(this._blockchainTransactionsService.getAddressData(this.wallet));\n\n                    const foundToken = addressData?.[this.transactionData.network]?.data?.tokenHoldings?.tokens.find(\n                        (t: any) => t.symbol === tokenSymbol\n                    );\n\n                    if (foundToken) tokenAddress = foundToken.address;\n                } catch (error) {\n                    console.error(\"Error fetching token data from API:\", error);\n                }\n            }\n\n            const feeParams: FeeCalculationParams = {\n                network: this.transactionData.network,\n                receiverAddress: this.transactionData.receiver.address,\n                amount: normalizedAmount,\n                tokenType: this.transactionData.tokenType,\n                tokenAddress: tokenAddress,\n                tokenDecimals: this.transactionData.token.decimals,\n                tokenPrice: +this.transactionData.token.price || 0,\n                selectedFeeRate: this.selectedFeeRate,\n                senderAddress: this.transactionData.sender.address,\n            };\n\n            const feeEstimate: TransactionFeeEstimate = await this._blockchainTransactionsService.calculateTransactionFees(feeParams);\n\n            this.transactionData.fee = feeEstimate.fee;\n            this.transactionData.fiatFee = feeEstimate.fiatFee;\n            this.transactionData.total = feeEstimate.total;\n\n            if (feeEstimate.networkPrice !== undefined) {\n                this.networkPrice = feeEstimate.networkPrice;\n            }\n\n            await this._transactionService.setCurrentTransactionData(this.transactionData);\n        } catch (error) {\n            console.error(\"Error calculating transaction fee:\", error);\n        }\n    }\n\n    private async _decryptMessage(): Promise<any> {\n        const encryptedMessage = this.wallet?.pgp?.encryptedMessage as string;\n        const privateKeyArmoured = this.wallet?.pgp?.privateKey as string;\n        const passphrase = this._password || this.form.get(\"password\")?.value;\n\n        if (!encryptedMessage || !privateKeyArmoured || !passphrase) return;\n\n        try {\n            return await this._vaultService.decryptMessage(encryptedMessage, privateKeyArmoured, passphrase);\n        } catch (error) {\n            this.wallet = (await this._walletService.getCurrentWallet()) as WalletModel;\n            this.remainingAttempts = this._vaultService.remainingAttempts + 1;\n\n            if (!this.wallet?.pgp) {\n                this._mnemonics = \"\";\n                this._password = \"\";\n\n                this.passwordError = false;\n                this.passwordSet = false;\n                this.requiresBiometrics = true;\n            } else {\n                this.passwordError = true;\n            }\n\n            throw error;\n        }\n    }\n\n    private async _decryptMnemonics(): Promise<any> {\n        if (!this.wallet?.pgp?.encryptedMessage || !this.wallet?.pgp?.privateKey || (await this._vaultService.biometricsRequired())) {\n            this.passwordSet = false;\n            this.requiresBiometrics = true;\n\n            return;\n        }\n\n        if (!this._password && !this.form.get(\"password\")?.value) return;\n\n        const secret = JSON.parse(await this._decryptMessage());\n\n        this._mnemonics = secret.mnemonic?.trim()?.toLowerCase();\n\n        this.requiresBiometrics = !this._mnemonics;\n    }\n\n    async _fetchTokenPrice(): Promise<void> {\n        if (this._skipPriceFetch) return;\n\n        try {\n            const response = await this._assetService.fetchAssetPrice(this.transactionData.symbol);\n\n            if (!response?.data || !response?.data?.length) return;\n\n            this.price = response.data[0].open;\n        } catch (error: any) {\n            if (error?.status === 400) this._skipPriceFetch = true;\n        }\n    }\n\n    private async _getNetworkToken(): Promise<void> {\n        const network = this.transactionData.network?.toLowerCase() as NetworkName | \"bitcoin\";\n        console.log(`🚀 ~ SendConfirmComponent ~ _getNetworkToken ~ network:`, network);\n\n        this.networkToken = await this._networkService.getNetworkToken(network as NetworkName);\n        this.isNativeAsset = network === this.networkToken?.name?.toLowerCase() || network === \"bitcoin\";\n        console.log(`🚀 ~ SendConfirmComponent ~ _getNetworkToken ~ this.networkToken?.name?:`, this.networkToken?.name);\n\n        if (network !== \"bitcoin\") return;\n\n        try {\n            const response = await this._assetService.fetchAssetPrice(\"BTC\");\n\n            if (response?.data?.length) this.networkPrice = response.data[0].open;\n        } catch (error) {\n            console.error(\"Error fetching Bitcoin price:\", error);\n        }\n    }\n\n    private _initForm(): void {\n        this.form = this._formBuilder.group({\n            password: [\"\", [Validators.required]],\n        });\n    }\n\n    async _initFeeRates(): Promise<void> {\n        if (this.transactionData.network !== \"bitcoin\") return;\n\n        this.feeRates = await this._bitcoinService.getFeeRates();\n        this.selectedFeeRate = this._bitcoinService.selectedFeeRate;\n\n        if (this.selectedFeeRate === 0) {\n            this.selectedFeeRate = this.feeRates.halfHourFee;\n\n            return;\n        }\n\n        const keys = [\"minimumFee\", \"economyFee\", \"hourFee\", \"halfHourFee\", \"fastestFee\"];\n\n        let lastFeeRate: number = 0;\n\n        for (const key of keys) {\n            const feeRate = this.feeRates[key as keyof MempoolFeeRates];\n\n            if (feeRate === this.selectedFeeRate) {\n                this.selectedFeeRate = feeRate;\n\n                break;\n            } else if (feeRate > this.selectedFeeRate || key === \"fastestFee\") {\n                this.selectedFeeRate = lastFeeRate;\n\n                break;\n            } else {\n                lastFeeRate = feeRate;\n            }\n        }\n    }\n\n    async _initInterval(): Promise<void> {\n        clearInterval(this._interval);\n\n        this._interval = setInterval(() => {\n            this._calculateTransactionFee();\n            this._fetchTokenPrice();\n        }, this._intervalTime);\n    }\n\n    private async _initTransactionData(): Promise<void> {\n        this.wallet = (await this._walletService.getCurrentWallet()) as WalletModel;\n        this.transactionData = await this._transactionService.getCurrentTransactionData();\n\n        this._initInterval();\n        this._initForm();\n\n        await this._initFeeRates();\n        await this._getNetworkToken();\n        await this._fetchTokenPrice();\n        await this._calculateTransactionFee();\n        await this._decryptMnemonics();\n    }\n\n    async _redirectToBiometrics(): Promise<void> {\n        this._vaultService.password = this.form.get(\"password\")?.value;\n\n        await this._zelfNameService.setZelfName(this.transactionData.sender.zelfName);\n        await this._zelfNameService.setFlow(\"unlock\");\n\n        this._router.navigate([\"security/biometrics\"], { queryParams: { return: \"/send/confirmation\" } });\n    }\n\n    private async _validateCredentials(): Promise<boolean> {\n        if (!this._password && !this.form.get(\"password\")?.value) {\n            this.openErrorSnackBar(\"errors.empty_password\");\n\n            return false;\n        }\n\n        if (this.requiresBiometrics) {\n            await this._redirectToBiometrics();\n\n            return false;\n        }\n\n        if (this._mnemonics) return true;\n\n        try {\n            await this._decryptMnemonics();\n\n            if (this._mnemonics) return true;\n        } catch (error: unknown) {\n            if ((error as { message?: string })?.message === \"expired\") {\n                await this._redirectToBiometrics();\n\n                return false;\n            }\n\n            this.openErrorSnackBar(\"errors.invalid_credentials\");\n\n            return false;\n        }\n\n        if (this.requiresBiometrics) return false;\n        if (this._mnemonics) return true;\n\n        this.openErrorSnackBar(\"errors.private_key_locked\");\n\n        return false;\n    }\n\n    async confirmTransaction() {\n        if (this.sending) return;\n        if (!(await this._validateCredentials())) return;\n\n        this.sending = true;\n\n        try {\n            const cleanMnemonic = this._mnemonics.trim().toLowerCase();\n            const normalizedAmount = Number(String(this.transactionData.amount || \"0\").replace(\",\", \".\"));\n\n            const transactionParams: TransactionParams = {\n                from: \"\",\n                to: this.transactionData.receiver.address,\n                value: String(normalizedAmount),\n                network: this.transactionData.network,\n                mnemonic: cleanMnemonic,\n                tokenAddress: this.transactionData.token?.address_token || this.transactionData.token?.tokenAddress,\n                tokenDecimals: this.transactionData.token?.decimals,\n            };\n\n            if ([\"ethereum\", \"avalanche\", \"binance\", \"polygon\"].includes(this.transactionData.network)) {\n                if (!ethers.Mnemonic.isValidMnemonic(cleanMnemonic)) {\n                    this.openErrorSnackBar(\"errors.invalid_private_key\");\n\n                    return;\n                }\n\n                const wallet = ethers.Wallet.fromPhrase(cleanMnemonic);\n\n                transactionParams.privateKey = wallet.privateKey;\n                transactionParams.from = wallet.address;\n\n                delete transactionParams.mnemonic;\n            }\n\n            const result: TransactionResult = await this._blockchainTransactionsService.sendTransaction(transactionParams);\n\n            const receipt = {\n                transactionHash: result.hash,\n                hash: result.hash,\n                digest: result.hash,\n                network: this.transactionData.network,\n                tokenType: this.transactionData.tokenType,\n                fee: this.transactionData.fee,\n                fiatFee: this.transactionData.fiatFee,\n                total: this.transactionData.total,\n                status: result.status,\n            };\n\n            this._transactionService.addToRecentAddresses({\n                address: this.transactionData.receiver.address,\n                zelfName: this.transactionData.receiver.zelfName,\n                network: this.transactionData.network,\n                tokenType:\n                    this.transactionData.network === \"sui\"\n                        ? \"SUI\"\n                        : this.transactionData.network === \"avalanche\"\n                          ? \"AVAX\"\n                          : this.transactionData.network === \"bitcoin\"\n                            ? \"BTC\"\n                            : this.transactionData.tokenType,\n            });\n\n            this.sending = false;\n\n            const sendDateTime = new Date().toISOString();\n\n            const pendingTransactionData = {\n                ...this.transactionData,\n                ...receipt,\n                amount: this.transactionData.amount,\n                total: this.transactionData.total,\n                fee: this.transactionData.fee,\n                date: sendDateTime,\n                from: this.transactionData.sender.address,\n                network: this.transactionData.network,\n                status: \"pending\",\n                to: this.transactionData.receiver.address,\n                tokenType: this.transactionData.tokenType,\n            };\n\n            await this._walletService.addTransactionToPending(pendingTransactionData);\n            await this._transactionService.removeTransactionData();\n            await this._chromeService.removeItemSession(\"tokensTtl\");\n\n            if (this.transactionData.network === \"solana\" && receipt.transactionHash) {\n                await this._router.navigate([\"/transaction\", receipt.transactionHash], {\n                    queryParams: {\n                        network: \"solana\",\n                        symbol: this.transactionData.tokenType,\n                    },\n                });\n            } else if (this.transactionData.network === \"sui\" && receipt.digest) {\n                await this._router.navigate([\"/transaction\", receipt.digest], {\n                    queryParams: { network: \"sui\", symbol: \"SUI\" },\n                });\n            } else if (this.transactionData.network === \"bitcoin\" && receipt.transactionHash) {\n                await this._router.navigate([\"/transaction\", receipt.transactionHash], {\n                    queryParams: {\n                        network: \"bitcoin\",\n                        tokenType: \"BTC\",\n                    },\n                });\n            } else if (receipt.transactionHash) {\n                await this._router.navigate([\"/transaction\", receipt.transactionHash], {\n                    queryParams: { network: this.transactionData.network, symbol: this.transactionData.symbol },\n                });\n            } else {\n                this._router.navigate([\"/send\"]);\n            }\n        } catch (error: any) {\n            console.error(\"Transaction error:\", error);\n\n            this.openErrorSnackBar(error.message || \"errors.something_went_wrong\");\n\n            this.sending = false;\n        } finally {\n            this._mnemonics = \"\";\n            this._password = \"\";\n        }\n    }\n\n    async goBack(): Promise<void> {\n        if (this.showFeeInfo) {\n            this.showFeeInfo = false;\n\n            return;\n        }\n\n        this._vaultService.password = \"\";\n        this._vaultService.mnemonic = \"\";\n\n        this.transactionData.fee = 0;\n        this.transactionData.fiatFee = 0;\n        this.transactionData.total = 0;\n\n        await this._transactionService.setCurrentTransactionData(this.transactionData);\n\n        this._router.navigate([\"/send/transaction\"]);\n    }\n\n    async goToBiometrics(): Promise<void> {\n        const password = this.form.get(\"password\")?.value;\n\n        if (!password || !password.trim() || !this.wallet) return;\n\n        await this._redirectToBiometrics();\n    }\n\n    openErrorSnackBar(message: string): void {\n        this._snackBar.open(this._translocoService.translate(message), this._translocoService.translate(\"common.close\"), {\n            duration: 5000,\n            panelClass: \"zelf-snackbar\",\n            verticalPosition: \"top\",\n        });\n    }\n\n    openFeeInfo(): void {\n        this.showFeeInfo = true;\n    }\n\n    selectFeeRate(feeRate: number): void {\n        this.showFeeInfo = false;\n        this.selectedFeeRate = feeRate;\n\n        this._calculateTransactionFee();\n    }\n\n    toggleShowPassword(): void {\n        this.showPassword = !this.showPassword;\n    }\n}\n","<div class=\"zelf-card send-confirm\" *transloco=\"let t\">\n    <ng-container *ngIf=\"!loading\">\n        <div class=\"send-confirm__header\">\n            <div class=\"send-confirm__col1\">\n                <button (click)=\"goBack()\" mat-flat-button class=\"zelf-icon-button zelf-icon-button--anti-flash-white zelf-icon-button--40\">\n                    <svg width=\"22\" height=\"14\" viewBox=\"0 0 22 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M20.0898 5.8277H4.72478L8.08478 2.4677C8.53978 2.0127 8.53978 1.2777 8.08478 0.822695C7.62978 0.367695 6.89478 0.367695 6.43978 0.822695L1.08478 6.1777C0.62978 6.6327 0.62978 7.3677 1.08478 7.8227L6.43978 13.1777C6.89478 13.6327 7.62978 13.6327 8.08478 13.1777C8.53978 12.7227 8.53978 11.9877 8.08478 11.5327L4.72478 8.16103H20.0898C20.7314 8.16103 21.2564 7.63603 21.2564 6.99436C21.2564 6.3527 20.7314 5.8277 20.0898 5.8277Z\"\n                        />\n                    </svg>\n                </button>\n            </div>\n\n            <div class=\"send-confirm__col2\">\n                <p class=\"send-confirm__title\">{{ showFeeInfo ? t(\"send.transaction_settings\") : t(\"common.transfer\") }}</p>\n            </div>\n\n            <div class=\"send-confirm__col3\"></div>\n        </div>\n\n        <form class=\"send-confirm__form\" [formGroup]=\"form\" *ngIf=\"!showFeeInfo\">\n            <div class=\"zelf-card__content zelf-card__content--grow\">\n                <div class=\"send-confirm__total\">\n                    <div class=\"zelf-chip\">{{ t(\"common.amount\") }}</div>\n\n                    <div class=\"send-confirm__price-amount-container\">\n                        <h2 class=\"send-confirm__price\">{{ transactionData.amount | number: \"1.1-18\" }}</h2>\n\n                        <p class=\"send-confirm__price-currency\">{{ transactionData.symbol }}</p>\n                    </div>\n\n                    <p class=\"send-confirm__price-currency\">~{{ fiatPrice | currency: \"USD\" : \"symbol\" : \"1.2-8\" }}</p>\n                </div>\n\n                <div class=\"send-confirm__zelf-name-display\">\n                    <div class=\"zelf-chip\" *ngIf=\"transactionData.sender.zelfName\">{{ transactionData.sender.zelfName | uppercase }}</div>\n\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                        <path\n                            d=\"M21.2544 11.65L18.4644 8.86003C18.1444 8.54003 17.6044 8.76003 17.6044 9.21003V11H3.60437C3.05437 11 2.60437 11.45 2.60437 12C2.60437 12.55 3.05437 13 3.60437 13H17.6044V14.79C17.6044 15.24 18.1444 15.46 18.4544 15.14L21.2444 12.35C21.4444 12.16 21.4444 11.84 21.2544 11.65Z\"\n                            fill=\"#181818\"\n                        />\n                    </svg>\n\n                    <div class=\"zelf-chip\">\n                        <ng-container *ngIf=\"transactionData.receiver.zelfName\">{{ transactionData.receiver.zelfName | uppercase }}</ng-container>\n                        <ng-container *ngIf=\"!transactionData.receiver.zelfName\">{{ t(\"common.unknown\") | uppercase }}</ng-container>\n                    </div>\n                </div>\n\n                <div class=\"send-confirm__content\">\n                    <div class=\"send-confirm__summary\">\n                        <div class=\"zelf-action-row\">\n                            <p class=\"send-confirm__label\">{{ t(\"common.from\") }}</p>\n\n                            <p class=\"send-confirm__value\">{{ transactionData.sender.address | addressMask }}</p>\n                        </div>\n\n                        <div class=\"zelf-action-row\">\n                            <p class=\"send-confirm__label\">{{ t(\"common.withdrawal_network\") }}</p>\n\n                            <p class=\"send-confirm__value\">{{ transactionData.tokenType }}</p>\n                        </div>\n\n                        <div class=\"zelf-action-row\">\n                            <p class=\"send-confirm__label\">{{ t(\"common.address\") }}</p>\n\n                            <p class=\"send-confirm__value send-confirm__value--address\">{{ transactionData.receiver.address }}</p>\n                        </div>\n\n                        <div class=\"zelf-action-row\">\n                            <p class=\"send-confirm__label\">{{ t(\"common.coin\") }}</p>\n\n                            <p class=\"send-confirm__value\">{{ transactionData.symbol }}</p>\n                        </div>\n\n                        <div\n                            (click)=\"(transactionData.network === 'bitcoin' && openFeeInfo()) || null\"\n                            [ngClass]=\"{ 'zelf-action-row--clickable': transactionData.network === 'bitcoin' }\"\n                            class=\"zelf-action-row\"\n                        >\n                            <p class=\"send-confirm__label\">{{ t(\"common.fee\") }}</p>\n\n                            <div class=\"send-confirm__value send-confirm__value-row\">\n                                <p class=\"send-confirm__value send-confirm__value--col send-confirm__value--items-end\">\n                                    <span>{{ transactionData.fee | number: \"1.2-8\" }} {{ networkCurrency }}</span>\n                                    <span class=\"send-confirm__fee\">~{{ fiatFeePrice | currency: \"USD\" : \"symbol\" : \"1.2-8\" }}</span>\n                                </p>\n\n                                <ng-container *ngIf=\"transactionData.network === 'bitcoin'\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16px\" viewBox=\"0 -960 960 960\" width=\"16px\">\n                                        <path d=\"m321-80-71-71 329-329-329-329 71-71 400 400L321-80Z\" />\n                                    </svg>\n                                </ng-container>\n                            </div>\n                        </div>\n\n                        <div class=\"zelf-action-row\">\n                            <p class=\"send-confirm__label\">{{ t(\"common.total\") }}</p>\n\n                            <p class=\"send-confirm__value\" [ngClass]=\"{ 'send-confirm__value--error': !hasBalance }\">\n                                {{ total | currency: \"USD\" : \"symbol\" : \"1.2-8\" }}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"zelf-message zelf-message--error\" *ngIf=\"!hasBalance\">\n                <ng-container *ngTemplateOutlet=\"cross\"></ng-container>\n                <p>{{ t(\"errors.insufficient_funds\") }}</p>\n            </div>\n\n            <div\n                class=\"zelf-input zelf-input--wide\"\n                [ngClass]=\"{ 'zelf-input--error': form.get('password')?.dirty && form.get('password')?.errors }\"\n                *ngIf=\"!passwordSet\"\n            >\n                <input\n                    [type]=\"showPassword ? 'text' : 'password'\"\n                    class=\"zelf-input__control zelf-input__control--floating-label\"\n                    formControlName=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    placeholder=\" \"\n                    required\n                />\n\n                <label for=\"password\" class=\"zelf-input__floating-label\">{{ t(\"common.password\") }}</label>\n\n                <ng-container *ngTemplateOutlet=\"toggleButton\"></ng-container>\n            </div>\n\n            <div class=\"zelf-message zelf-message--error\" *ngIf=\"passwordError\">\n                <ng-container *ngTemplateOutlet=\"cross\"></ng-container>\n                <p>{{ t(\"errors.invalid_password\", { remaining: remainingAttempts }) }}</p>\n            </div>\n\n            <div class=\"zelf-card__actions\">\n                <button\n                    (click)=\"goToBiometrics()\"\n                    [disabled]=\"!hasBalance || sending || !form.get('password')?.value\"\n                    *ngIf=\"requiresBiometrics\"\n                    autocomplete=\"off\"\n                    class=\"zelf-button zelf-button--black zelf-button--wide\"\n                    mat-flat-button\n                    type=\"submit\"\n                >\n                    {{ t(\"common.verify\") }}\n                </button>\n\n                <button\n                    (click)=\"confirmTransaction()\"\n                    [disabled]=\"!hasBalance || sending || (!passwordSet && !form.get('password')?.value)\"\n                    *ngIf=\"!requiresBiometrics\"\n                    class=\"zelf-button zelf-button--black zelf-button--wide\"\n                    mat-flat-button\n                    type=\"submit\"\n                >\n                    {{ t(\"common.confirm\") }}\n\n                    <mat-spinner *ngIf=\"sending\" mode=\"indeterminate\" diameter=\"18\"></mat-spinner>\n                </button>\n            </div>\n        </form>\n\n        <ng-container *ngIf=\"showFeeInfo\">\n            <div class=\"zelf-card__content send-confirm__content\">\n                <div\n                    class=\"zelf-action-row send-confirm__fee-row zelf-action-row--clickable\"\n                    (click)=\"selectFeeRate(feeRates.fastestFee)\"\n                    [ngClass]=\"{ 'zelf-action-row--selected': selectedFeeRate === feeRates.fastestFee }\"\n                >\n                    <div class=\"send-confirm__value send-confirm__value--col\">\n                        <p class=\"send-confirm__label\">{{ t(\"send.fastest\") }}</p>\n\n                        <p class=\"send-confirm__value\">\n                            {{\n                                t(\"send.upto_sats\", {\n                                    sats: feeRates.fastestFee,\n                                    feeAmountUSD: fiatFastestFee | currency: \"USD\" : \"symbol\" : \"1.2\",\n                                    time: \"< 30\",\n                                })\n                            }}\n                        </p>\n                    </div>\n                </div>\n\n                <div\n                    class=\"zelf-action-row send-confirm__fee-row zelf-action-row--clickable\"\n                    (click)=\"selectFeeRate(feeRates.halfHourFee)\"\n                    [ngClass]=\"{ 'zelf-action-row--selected': selectedFeeRate === feeRates.halfHourFee }\"\n                >\n                    <div class=\"send-confirm__value send-confirm__value--col\">\n                        <p class=\"send-confirm__label\">{{ t(\"send.average\") }}</p>\n\n                        <p class=\"send-confirm__value\">\n                            {{\n                                t(\"send.upto_sats\", {\n                                    sats: feeRates.halfHourFee,\n                                    feeAmountUSD: fiatHalfHourFee | currency: \"USD\" : \"symbol\" : \"1.2\",\n                                    time: \"~ 30\",\n                                })\n                            }}\n                        </p>\n                    </div>\n                </div>\n\n                <div\n                    class=\"zelf-action-row send-confirm__fee-row zelf-action-row--clickable\"\n                    (click)=\"selectFeeRate(feeRates.economyFee)\"\n                    [ngClass]=\"{ 'zelf-action-row--selected': selectedFeeRate === feeRates.economyFee }\"\n                >\n                    <div class=\"send-confirm__value send-confirm__value--col\">\n                        <p class=\"send-confirm__label\">{{ t(\"send.economical\") }}</p>\n\n                        <p class=\"send-confirm__value\">\n                            {{\n                                t(\"send.upto_sats\", {\n                                    sats: feeRates.economyFee,\n                                    feeAmountUSD: fiatEconomyFee | currency: \"USD\" : \"symbol\" : \"1.2\",\n                                    time: \"> 30\",\n                                })\n                            }}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n    </ng-container>\n\n    <zelf-loader *ngIf=\"loading\"></zelf-loader>\n</div>\n\n<ng-template #openEye>\n    <svg\n        fill=\"none\"\n        height=\"24\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"2\"\n        stroke=\"#181818\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"></path>\n        <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n    </svg>\n</ng-template>\n\n<ng-template #closedEye>\n    <svg\n        fill=\"none\"\n        height=\"24\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"2\"\n        stroke=\"#181818\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path\n            d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\"\n        ></path>\n        <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>\n    </svg>\n</ng-template>\n\n<ng-template #toggleButton>\n    <button\n        (click)=\"toggleShowPassword()\"\n        class=\"zelf-icon-button zelf-icon-button--transparent zelf-icon-button--no-fill\"\n        type=\"button\"\n        mat-icon-button\n        tabindex=\"-1\"\n    >\n        <ng-container *ngTemplateOutlet=\"showPassword ? openEye : closedEye\"></ng-container>\n    </button>\n</ng-template>\n\n<ng-template #cross>\n    <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M10 0C4.47 0 0 4.47 0 10C0 15.53 4.47 20 10 20C15.53 20 20 15.53 20 10C20 4.47 15.53 0 10 0ZM14.3 14.3C13.91 14.69 13.28 14.69 12.89 14.3L10 11.41L7.11 14.3C6.72 14.69 6.09 14.69 5.7 14.3C5.31 13.91 5.31 13.28 5.7 12.89L8.59 10L5.7 7.11C5.31 6.72 5.31 6.09 5.7 5.7C6.09 5.31 6.72 5.31 7.11 5.7L10 8.59L12.89 5.7C13.28 5.31 13.91 5.31 14.3 5.7C14.69 6.09 14.69 6.72 14.3 7.11L11.41 10L14.3 12.89C14.68 13.27 14.68 13.91 14.3 14.3Z\"\n            fill=\"#DC362E\"\n        />\n    </svg>\n</ng-template>\n","import { Pipe, type PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"addressMask\",\n})\nexport class AddressMaskPipe implements PipeTransform {\n    transform(value?: string): unknown {\n        if (typeof value !== \"string\" || !value || !value.trim()) return \"\";\n\n        const firstPart = value.slice(0, 8);\n        const lastPart = value.slice(-8);\n\n        return `${firstPart}...${lastPart}`;\n    }\n}\n"],"names":["ethers","firstValueFrom","Subject","takeUntil","CommonModule","ReactiveFormsModule","Validators","MatButtonModule","MatProgressSpinnerModule","RouterModule","TranslocoModule","AddressMaskPipe","ZelfLoaderComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","ctx_r1","transactionData","sender","zelfName","ɵɵelementContainerStart","receiver","t_r4","ɵɵelement","ɵɵelementContainer","ɵɵtemplate","SendConfirmComponent_div_0_ng_container_1_form_10_div_62_ng_container_1_Template","ɵɵproperty","cross_r5","SendConfirmComponent_div_0_ng_container_1_form_10_div_63_ng_container_4_Template","ɵɵpureFunction1","_c2","tmp_9_0","form","get","dirty","errors","showPassword","toggleButton_r6","SendConfirmComponent_div_0_ng_container_1_form_10_div_64_ng_container_1_Template","_c3","remainingAttempts","ɵɵlistener","SendConfirmComponent_div_0_ng_container_1_form_10_button_66_Template_button_click_0_listener","ɵɵrestoreView","_r7","ɵɵnextContext","ɵɵresetView","goToBiometrics","hasBalance","sending","value","ɵɵtextInterpolate1","SendConfirmComponent_div_0_ng_container_1_form_10_button_67_Template_button_click_0_listener","_r8","confirmTransaction","SendConfirmComponent_div_0_ng_container_1_form_10_button_67_mat_spinner_2_Template","passwordSet","SendConfirmComponent_div_0_ng_container_1_form_10_div_15_Template","SendConfirmComponent_div_0_ng_container_1_form_10_ng_container_19_Template","SendConfirmComponent_div_0_ng_container_1_form_10_ng_container_20_Template","SendConfirmComponent_div_0_ng_container_1_form_10_Template_div_click_44_listener","_r3","network","openFeeInfo","SendConfirmComponent_div_0_ng_container_1_form_10_ng_container_55_Template","SendConfirmComponent_div_0_ng_container_1_form_10_div_62_Template","SendConfirmComponent_div_0_ng_container_1_form_10_div_63_Template","SendConfirmComponent_div_0_ng_container_1_form_10_div_64_Template","SendConfirmComponent_div_0_ng_container_1_form_10_button_66_Template","SendConfirmComponent_div_0_ng_container_1_form_10_button_67_Template","ɵɵpipeBind2","amount","symbol","ɵɵpipeBind4","fiatPrice","address","tokenType","_c0","ɵɵtextInterpolate2","fee","networkCurrency","fiatFeePrice","_c1","total","passwordError","requiresBiometrics","SendConfirmComponent_div_0_ng_container_1_ng_container_11_Template_div_click_2_listener","_r9","selectFeeRate","feeRates","fastestFee","SendConfirmComponent_div_0_ng_container_1_ng_container_11_Template_div_click_9_listener","halfHourFee","SendConfirmComponent_div_0_ng_container_1_ng_container_11_Template_div_click_16_listener","economyFee","_c4","selectedFeeRate","ɵɵpureFunction2","_c5","fiatFastestFee","_c6","fiatHalfHourFee","_c7","fiatEconomyFee","SendConfirmComponent_div_0_ng_container_1_Template_button_click_3_listener","_r1","goBack","SendConfirmComponent_div_0_ng_container_1_form_10_Template","SendConfirmComponent_div_0_ng_container_1_ng_container_11_Template","showFeeInfo","SendConfirmComponent_div_0_ng_container_1_Template","SendConfirmComponent_div_0_zelf_loader_2_Template","loading","SendConfirmComponent_ng_template_5_Template_button_click_0_listener","_r10","toggleShowPassword","SendConfirmComponent_ng_template_5_ng_container_1_Template","openEye_r11","closedEye_r12","SendConfirmComponent","_assetService","_bitcoinService","_blockchainTransactionsService","_chromeService","_formBuilder","_networkService","_router","_snackBar","_transactionService","_translocoService","_vaultService","_walletService","_zelfNameService","_mnemonics","_password","_interval","_intervalTime","_skipPriceFetch","unsubcriber$","hourFee","minimumFee","availableNetworks","id","name","isNativeAsset","networkPrice","networkToken","price","wallet","constructor","password","mnemonic","trim","ngOnInit","_this","_asyncToGenerator","getCurrentTransactionData","hasTransactionData","hasCompletePaymentData","_initTransactionData","finally","transactionData$","pipe","subscribe","navigate","ngOnDestroy","clearInterval","next","complete","calculatedFee","calculateBitcoinTransactionFee","fiatFee","Number","token","canCoverTokenBalance","balance","canCoverTotal","canCoverNetworkFee","getNetworkSymbol","_calculateTransactionFee","_this2","normalizedAmount","String","replace","tokenSymbol","tokenAddress","address_token","isNativeToken","includes","addressData","getAddressData","foundToken","data","tokenHoldings","tokens","find","t","error","console","feeParams","receiverAddress","tokenDecimals","decimals","tokenPrice","senderAddress","feeEstimate","calculateTransactionFees","undefined","setCurrentTransactionData","_decryptMessage","_this3","encryptedMessage","pgp","privateKeyArmoured","privateKey","passphrase","decryptMessage","getCurrentWallet","_decryptMnemonics","_this4","biometricsRequired","secret","JSON","parse","toLowerCase","_fetchTokenPrice","_this5","response","fetchAssetPrice","length","open","status","_getNetworkToken","_this6","log","getNetworkToken","_initForm","group","required","_initFeeRates","_this7","getFeeRates","keys","lastFeeRate","key","feeRate","_initInterval","_this8","setInterval","_this9","_redirectToBiometrics","_this0","setZelfName","setFlow","queryParams","return","_validateCredentials","_this1","openErrorSnackBar","message","_this10","cleanMnemonic","transactionParams","from","to","Mnemonic","isValidMnemonic","Wallet","fromPhrase","result","sendTransaction","receipt","transactionHash","hash","digest","addToRecentAddresses","sendDateTime","Date","toISOString","pendingTransactionData","date","addTransactionToPending","removeTransactionData","removeItemSession","_this11","_this12","translate","duration","panelClass","verticalPosition","ɵɵdirectiveInject","i1","AssetService","i2","BitcoinService","i3","BlockchainTransactionsService","i4","ChromeService","i5","FormBuilder","i6","NetworkService","i7","Router","i8","MatSnackBar","i9","TransactionService","i10","TranslocoService","i11","VaultService","i12","WalletService","i13","ZelfNameService","selectors","decls","vars","consts","template","SendConfirmComponent_Template","rf","ctx","SendConfirmComponent_div_0_Template","SendConfirmComponent_ng_template_1_Template","ɵɵtemplateRefExtractor","SendConfirmComponent_ng_template_3_Template","SendConfirmComponent_ng_template_5_Template","SendConfirmComponent_ng_template_7_Template","i14","NgClass","NgIf","NgTemplateOutlet","UpperCasePipe","DecimalPipe","CurrencyPipe","i15","MatButton","MatIconButton","i16","MatProgressSpinner","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","FormGroupDirective","FormControlName","TranslocoDirective","styles","transform","firstPart","slice","lastPart","pure"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}