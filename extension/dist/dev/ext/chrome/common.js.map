{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/services/data-passing.service.ts","./src/app/services/password-data.service.ts","./src/app/services/network.service.ts","./src/app/transaction.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ChromeService } from \"../chrome.service\";\n\nexport interface FormData {\n\t[key: string]: any;\n}\n\nexport interface ApiResult {\n\tsuccess: boolean;\n\tzelfProof: string;\n\tzelfQR: string;\n\tNFT?: {\n\t\tsuccess: boolean;\n\t\ttokenId: string;\n\t\ttransactionHash: string;\n\t\trecipient: string;\n\t\tcost: string;\n\t\tmetadata: any;\n\t\tmetadataUrl: string;\n\t\texplorerUrl: string;\n\t\towner: string;\n\t\tcontractAddress: string;\n\t};\n\tipfs?: {\n\t\thash: string;\n\t\tgatewayUrl: string;\n\t\tpinSize: number;\n\t\ttimestamp: string;\n\t\tname: string;\n\t\tmetadata: any;\n\t};\n\tpublicData?: any;\n\tmessage: string;\n}\n\n@Injectable({\n\tprovidedIn: \"root\",\n})\nexport class DataPassingService {\n\tprivate dataStore: { [key: string]: FormData } = {};\n\tprivate resultStore: { [key: string]: ApiResult } = {};\n\n\tconstructor(private chromeService: ChromeService) {\n\t\t// Load any existing data from localStorage on service initialization\n\t\t// Use setTimeout to avoid blocking constructor\n\t\tsetTimeout(() => {\n\t\t\tthis.loadFromStorage();\n\t\t}, 0);\n\t}\n\n\t/**\n\t * Store form data for a specific form type\n\t */\n\tasync storeData(formType: string, data: FormData): Promise<void> {\n\t\tthis.dataStore[formType] = data;\n\t\tawait this.saveToStorage();\n\t}\n\n\t/**\n\t * Retrieve form data for a specific form type\n\t */\n\tgetData(formType: string): FormData | null {\n\t\tconst data = this.dataStore[formType];\n\t\treturn data || null;\n\t}\n\n\t/**\n\t * Store API result for a specific form type\n\t */\n\tasync storeResult(formType: string, result: ApiResult): Promise<void> {\n\t\tthis.resultStore[formType] = result;\n\t\tawait this.saveToStorage();\n\t}\n\n\t/**\n\t * Retrieve API result for a specific form type\n\t */\n\tgetResult(formType: string): ApiResult | null {\n\t\tconst result = this.resultStore[formType];\n\t\treturn result || null;\n\t}\n\n\t/**\n\t * Clear form data for a specific form type\n\t */\n\tclearData(formType: string): void {\n\t\tdelete this.dataStore[formType];\n\t}\n\n\t/**\n\t * Clear result data for a specific form type\n\t */\n\tclearResult(formType: string): void {\n\t\tdelete this.resultStore[formType];\n\t}\n\n\t/**\n\t * Clear all data for a specific form type (both form and result)\n\t */\n\tasync clearAll(formType: string): Promise<void> {\n\t\tthis.clearData(formType);\n\t\tthis.clearResult(formType);\n\t\tawait this.saveToStorage();\n\t}\n\n\t/**\n\t * Check if form data exists for a specific form type\n\t */\n\thasData(formType: string): boolean {\n\t\treturn !!this.dataStore[formType];\n\t}\n\n\t/**\n\t * Check if result data exists for a specific form type\n\t */\n\thasResult(formType: string): boolean {\n\t\treturn !!this.resultStore[formType];\n\t}\n\n\t/**\n\t * Get all stored data for debugging\n\t */\n\tgetAllData(): { formData: { [key: string]: FormData }; resultData: { [key: string]: ApiResult } } {\n\t\treturn {\n\t\t\tformData: { ...this.dataStore },\n\t\t\tresultData: { ...this.resultStore },\n\t\t};\n\t}\n\n\t/**\n\t * Save data to localStorage for persistence\n\t */\n\tprivate async saveToStorage(): Promise<void> {\n\t\ttry {\n\t\t\tconst storageData = {\n\t\t\t\tdataStore: this.dataStore,\n\t\t\t\tresultStore: this.resultStore,\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t};\n\n\t\t\tif (this.chromeService.isExtension) {\n\t\t\t\t// Use Chrome storage for extension\n\t\t\t\tawait this.chromeService.setItem(\"zelfDataPassing\", storageData);\n\t\t\t} else {\n\t\t\t\t// Use localStorage for web\n\t\t\t\tlocalStorage.setItem(\"zelfDataPassing\", JSON.stringify(storageData));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error saving to storage:\", error);\n\t\t}\n\t}\n\n\t/**\n\t * Load data from localStorage on service initialization\n\t */\n\tprivate async loadFromStorage(): Promise<void> {\n\t\ttry {\n\t\t\tlet storageData: any = null;\n\n\t\t\tif (this.chromeService.isExtension) {\n\t\t\t\t// Use Chrome storage for extension\n\t\t\t\tstorageData = await this.chromeService.getItem(\"zelfDataPassing\");\n\t\t\t} else {\n\t\t\t\t// Use localStorage for web\n\t\t\t\tconst localData = localStorage.getItem(\"zelfDataPassing\");\n\t\t\t\tstorageData = localData ? JSON.parse(localData) : null;\n\t\t\t}\n\n\t\t\tif (storageData) {\n\t\t\t\tconst maxAge = 24 * 60 * 60 * 1000; // 24 hours\n\n\t\t\t\t// Check if data is not too old\n\t\t\t\tif (Date.now() - storageData.timestamp < maxAge) {\n\t\t\t\t\tthis.dataStore = storageData.dataStore || {};\n\t\t\t\t\tthis.resultStore = storageData.resultStore || {};\n\t\t\t\t} else {\n\t\t\t\t\tthis.clearAllStorage();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error loading from storage:\", error);\n\t\t\t// Clear potentially corrupted data\n\t\t\tthis.clearAllStorage();\n\t\t}\n\t}\n\n\t/**\n\t * Clear all data from both memory and storage\n\t */\n\tclearAllStorage(): void {\n\t\tthis.dataStore = {};\n\t\tthis.resultStore = {};\n\n\t\ttry {\n\t\t\tif (this.chromeService.isExtension) {\n\t\t\t\tthis.chromeService.removeItem(\"zelfDataPassing\");\n\t\t\t} else {\n\t\t\t\tlocalStorage.removeItem(\"zelfDataPassing\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error clearing storage:\", error);\n\t\t}\n\t}\n\n\t/**\n\t * Manually clear storage for a specific form type\n\t */\n\tasync clearStorageForType(formType: string): Promise<void> {\n\t\tawait this.clearAll(formType);\n\t}\n\n\t/**\n\t * Get storage info for debugging\n\t */\n\tgetStorageInfo(): { isExtension: boolean; hasChromeService: boolean; storageKeys: string[] } {\n\t\treturn {\n\t\t\tisExtension: this.chromeService.isExtension,\n\t\t\thasChromeService: !!this.chromeService,\n\t\t\tstorageKeys: Object.keys(this.dataStore).concat(Object.keys(this.resultStore)),\n\t\t};\n\t}\n}\n","import { Injectable } from \"@angular/core\";\n\n@Injectable({\n\tprovidedIn: \"root\",\n})\nexport class PasswordDataService {\n\tprivate currentPassword: any = null;\n\n\tsetCurrentPassword(password: any): void {\n\t\tthis.currentPassword = password;\n\t}\n\n\tgetCurrentPassword(): any {\n\t\treturn this.currentPassword;\n\t}\n\n\tclearCurrentPassword(): void {\n\t\tthis.currentPassword = null;\n\t}\n}\n","import { Injectable } from \"@angular/core\";\nimport { ChromeService } from \"app/chrome.service\";\n\nexport type NetworkName = \"ethereum\" | \"sui\" | \"avalanche\" | \"solana\" | \"bitcoin\" | \"binance\" | \"polygon\" | \"Bitcoin\" | \"bitcoinTestnet\";\nexport type NetworkSymbol =\n    | \"eth\"\n    | \"sol\"\n    | \"avax\"\n    | \"sui\"\n    | \"btc\"\n    | \"bnb\"\n    | \"polygon\"\n    | \"ETH\"\n    | \"SOL\"\n    | \"AVAX\"\n    | \"SUI\"\n    | \"BTC\"\n    | \"BNB\"\n    | \"POL\"\n    | \"BTCTEST\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class NetworkService {\n    constructor(private _chromeService: ChromeService) {}\n\n    getNetworkSymbol(network: NetworkName): string {\n        switch (network) {\n            case \"ethereum\":\n                return \"ETH\";\n            case \"sui\":\n                return \"SUI\";\n            case \"polygon\":\n                return \"POL\";\n            case \"avalanche\":\n                return \"AVAX\";\n            case \"bitcoin\":\n                return \"BTC\";\n            case \"binance\":\n                return \"BNB\";\n            case \"solana\":\n                return \"SOL\";\n            default:\n                return \"\";\n        }\n    }\n\n    getNetworkName(symbol: NetworkSymbol | string): NetworkName | string {\n        if (!symbol) return \"\";\n\n        const upperSymbol = symbol.toUpperCase();\n\n        switch (upperSymbol) {\n            case \"ETH\":\n                return \"ethereum\";\n            case \"SOL\":\n                return \"solana\";\n            case \"AVAX\":\n                return \"avalanche\";\n            case \"SUI\":\n                return \"sui\";\n            case \"BTC\":\n                return \"bitcoin\";\n            case \"BNB\":\n                return \"binance\";\n            case \"POL\":\n                return \"polygon\";\n            default:\n                console.warn(`NetworkService: No name mapping for symbol: ${symbol}`);\n                return \"\";\n        }\n    }\n\n    async getNetworkToken(network: NetworkName): Promise<any> {\n        const tokens = await this._chromeService.getItemSession(\"tokens\");\n\n        if (!tokens || !tokens.length) return null;\n\n        return tokens.find((token: any) => token.name.toLowerCase() === network);\n    }\n\n    getChainId(network: string): number {\n        switch (network.toLowerCase()) {\n            case \"ethereum\":\n                return 1;\n            case \"avalanche\":\n                return 43114;\n            case \"solana\":\n                return 1399811149;\n            case \"sui\":\n                return 784;\n            case \"polygon\":\n                return 137;\n            case \"bitcoin\":\n                return 0;\n            case \"binance\":\n                return 56;\n            default:\n                return 1;\n        }\n    }\n\n    getNetworkImage(network: NetworkName | string): string {\n        switch (network) {\n            case \"ethereum\":\n            case \"ETH\":\n                return \"./assets/networks/eth.png\";\n            case \"sui\":\n            case \"SUI\":\n                return \"./assets/networks/sui.svg\";\n            case \"avalanche\":\n            case \"AVAX\":\n                return \"./assets/networks/avax.png\";\n            case \"solana\":\n            case \"SOL\":\n                return \"./assets/networks/sol.svg\";\n            case \"bitcoin\":\n            case \"BTC\":\n                return \"./assets/networks/btc.png\";\n            case \"binance\":\n            case \"BNB\":\n                return \"./assets/networks/bnb.png\";\n            case \"polygon\":\n            case \"POL\":\n                return \"./assets/networks/pol.png\";\n            default:\n                return \"\";\n        }\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { AddressBook, SwapData, TransactionData } from \"./wallet\";\nimport { ChromeService } from \"./chrome.service\";\nimport { Observable, Subject } from \"rxjs\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class TransactionService {\n    private _recentAddresses: AddressBook[] = [];\n    private _swapData: SwapData = new SwapData({});\n    private _swapData$: Subject<SwapData> = new Subject<SwapData>();\n    private _transactionData: TransactionData = new TransactionData({});\n    private _transactionData$: Subject<TransactionData> = new Subject<TransactionData>();\n\n    constructor(private _chromeService: ChromeService) {\n        this._chromeService.getItem(\"transactionData\").then((response) => {\n            if (!response) this._transactionData = new TransactionData({});\n            else this._transactionData = new TransactionData(response);\n\n            this._transactionData$.next(this._transactionData);\n        });\n\n        this._chromeService.getItem(\"swapData\").then((response) => {\n            if (!response) this._swapData = new SwapData({});\n            else this._swapData = new SwapData(response);\n\n            this._swapData$.next(this._swapData);\n        });\n\n        this._chromeService.getItem(\"recentAddresses\").then((response) => {\n            if (!response) this._recentAddresses = [];\n            else {\n                response.forEach((address: AddressBook) => {\n                    this._recentAddresses.push(address);\n                });\n            }\n        });\n    }\n\n    get swapData$(): Observable<SwapData> {\n        return this._swapData$.asObservable();\n    }\n\n    set swapData(value: SwapData) {\n        this._chromeService.setItem(\"swapData\", value);\n        this._swapData = value;\n        this._swapData$.next(this._swapData);\n    }\n\n    get transactionData$(): Observable<TransactionData> {\n        return this._transactionData$.asObservable();\n    }\n\n    addToRecentAddresses(address: AddressBook): void {\n        if (!this._transactionData?.receiver?.address) return;\n\n        const index = this._recentAddresses.map((recent) => recent.address).indexOf(address.address);\n\n        if (index > -1) {\n            this._recentAddresses[index].lastUsed = new Date().toISOString();\n\n            this._recentAddresses.sort((a, b) => new Date(b.lastUsed!).getTime() - new Date(a.lastUsed!).getTime());\n        } else {\n            this._recentAddresses.push({\n                ...address,\n                lastUsed: new Date().toISOString(),\n            });\n\n            if (this._recentAddresses.length > 5) {\n                this._recentAddresses.sort((a, b) => new Date(a.lastUsed!).getTime() - new Date(b.lastUsed!).getTime());\n                this._recentAddresses.shift();\n            }\n        }\n\n        this._chromeService.setItem(\"recentAddresses\", this._recentAddresses);\n    }\n\n    findAddressInRecentAddresses<K extends keyof AddressBook>(key: K, value: any): AddressBook[] {\n        return this._recentAddresses.filter((recent) => recent[key] === value);\n    }\n\n    async getCurrentTransactionData(): Promise<TransactionData> {\n        if (this._transactionData) return this._transactionData;\n\n        this._transactionData = new TransactionData((await this._chromeService.getItem(\"transactionData\")) || {});\n\n        return this._transactionData;\n    }\n\n    async getCurrentSwapData(): Promise<SwapData> {\n        if (this._swapData) return this._swapData;\n\n        this._swapData = new SwapData((await this._chromeService.getItem(\"swapData\")) || {});\n\n        return this._swapData;\n    }\n\n    async removeTransactionData(): Promise<void> {\n        await this._chromeService.removeItem(\"transactionData\");\n    }\n\n    removeAddressFromRecentAddresses(address: string): void {\n        const index = this._recentAddresses.map((recent) => recent.address).indexOf(address);\n\n        if (index === -1) return;\n\n        this._recentAddresses.splice(index, 1);\n    }\n\n    async setCurrentTransactionData(data: TransactionData): Promise<void> {\n        this._transactionData = new TransactionData(data);\n\n        await this._chromeService.setItem(\"transactionData\", this._transactionData);\n    }\n}\n"],"names":["DataPassingService","chromeService","dataStore","resultStore","constructor","setTimeout","loadFromStorage","storeData","formType","data","_this","_asyncToGenerator","saveToStorage","getData","storeResult","result","_this2","getResult","clearData","clearResult","clearAll","_this3","hasData","hasResult","getAllData","formData","resultData","_this4","storageData","timestamp","Date","now","isExtension","setItem","localStorage","JSON","stringify","error","console","_this5","getItem","localData","parse","maxAge","clearAllStorage","removeItem","clearStorageForType","_this6","getStorageInfo","hasChromeService","storageKeys","Object","keys","concat","i0","ɵɵinject","i1","ChromeService","factory","ɵfac","providedIn","PasswordDataService","currentPassword","setCurrentPassword","password","getCurrentPassword","clearCurrentPassword","NetworkService","_chromeService","getNetworkSymbol","network","getNetworkName","symbol","upperSymbol","toUpperCase","warn","getNetworkToken","tokens","getItemSession","length","find","token","name","toLowerCase","getChainId","getNetworkImage","SwapData","TransactionData","Subject","TransactionService","_recentAddresses","_swapData","_swapData$","_transactionData","_transactionData$","then","response","next","forEach","address","push","swapData$","asObservable","swapData","value","transactionData$","addToRecentAddresses","receiver","index","map","recent","indexOf","lastUsed","toISOString","sort","a","b","getTime","shift","findAddressInRecentAddresses","key","filter","getCurrentTransactionData","getCurrentSwapData","removeTransactionData","removeAddressFromRecentAddresses","splice","setCurrentTransactionData"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}