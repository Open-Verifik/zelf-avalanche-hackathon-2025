{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/services/network.service.ts","./src/app/transaction.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ChromeService } from \"app/chrome.service\";\n\nexport type NetworkName = \"ethereum\" | \"sui\" | \"avalanche\" | \"solana\" | \"bitcoin\" | \"binance\" | \"polygon\" | \"Bitcoin\" | \"bitcoinTestnet\";\nexport type NetworkSymbol =\n    | \"eth\"\n    | \"sol\"\n    | \"avax\"\n    | \"sui\"\n    | \"btc\"\n    | \"bnb\"\n    | \"polygon\"\n    | \"ETH\"\n    | \"SOL\"\n    | \"AVAX\"\n    | \"SUI\"\n    | \"BTC\"\n    | \"BNB\"\n    | \"POL\"\n    | \"BTCTEST\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class NetworkService {\n    constructor(private _chromeService: ChromeService) {}\n\n    getNetworkSymbol(network: NetworkName): string {\n        switch (network) {\n            case \"ethereum\":\n                return \"ETH\";\n            case \"sui\":\n                return \"SUI\";\n            case \"polygon\":\n                return \"POL\";\n            case \"avalanche\":\n                return \"AVAX\";\n            case \"bitcoin\":\n                return \"BTC\";\n            case \"binance\":\n                return \"BNB\";\n            case \"solana\":\n                return \"SOL\";\n            default:\n                return \"\";\n        }\n    }\n\n    getNetworkName(symbol: NetworkSymbol | string): NetworkName | string {\n        if (!symbol) return \"\";\n\n        const upperSymbol = symbol.toUpperCase();\n\n        switch (upperSymbol) {\n            case \"ETH\":\n                return \"ethereum\";\n            case \"SOL\":\n                return \"solana\";\n            case \"AVAX\":\n                return \"avalanche\";\n            case \"SUI\":\n                return \"sui\";\n            case \"BTC\":\n                return \"bitcoin\";\n            case \"BNB\":\n                return \"binance\";\n            case \"POL\":\n                return \"polygon\";\n            default:\n                console.warn(`NetworkService: No name mapping for symbol: ${symbol}`);\n                return \"\";\n        }\n    }\n\n    async getNetworkToken(network: NetworkName): Promise<any> {\n        const tokens = await this._chromeService.getItemSession(\"tokens\");\n\n        if (!tokens || !tokens.length) return null;\n\n        return tokens.find((token: any) => token.name.toLowerCase() === network);\n    }\n\n    getChainId(network: string): number {\n        switch (network.toLowerCase()) {\n            case \"ethereum\":\n                return 1;\n            case \"avalanche\":\n                return 43114;\n            case \"solana\":\n                return 1399811149;\n            case \"sui\":\n                return 784;\n            case \"polygon\":\n                return 137;\n            case \"bitcoin\":\n                return 0;\n            case \"binance\":\n                return 56;\n            default:\n                return 1;\n        }\n    }\n\n    getNetworkImage(network: NetworkName | string): string {\n        switch (network) {\n            case \"ethereum\":\n            case \"ETH\":\n                return \"./assets/networks/eth.png\";\n            case \"sui\":\n            case \"SUI\":\n                return \"./assets/networks/sui.svg\";\n            case \"avalanche\":\n            case \"AVAX\":\n                return \"./assets/networks/avax.png\";\n            case \"solana\":\n            case \"SOL\":\n                return \"./assets/networks/sol.svg\";\n            case \"bitcoin\":\n            case \"BTC\":\n                return \"./assets/networks/btc.png\";\n            case \"binance\":\n            case \"BNB\":\n                return \"./assets/networks/bnb.png\";\n            case \"polygon\":\n            case \"POL\":\n                return \"./assets/networks/pol.png\";\n            default:\n                return \"\";\n        }\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { AddressBook, SwapData, TransactionData } from \"./wallet\";\nimport { ChromeService } from \"./chrome.service\";\nimport { Observable, Subject } from \"rxjs\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class TransactionService {\n    private _recentAddresses: AddressBook[] = [];\n    private _swapData: SwapData = new SwapData({});\n    private _swapData$: Subject<SwapData> = new Subject<SwapData>();\n    private _transactionData: TransactionData = new TransactionData({});\n    private _transactionData$: Subject<TransactionData> = new Subject<TransactionData>();\n\n    constructor(private _chromeService: ChromeService) {\n        this._chromeService.getItem(\"transactionData\").then((response) => {\n            if (!response) this._transactionData = new TransactionData({});\n            else this._transactionData = new TransactionData(response);\n\n            this._transactionData$.next(this._transactionData);\n        });\n\n        this._chromeService.getItem(\"swapData\").then((response) => {\n            if (!response) this._swapData = new SwapData({});\n            else this._swapData = new SwapData(response);\n\n            this._swapData$.next(this._swapData);\n        });\n\n        this._chromeService.getItem(\"recentAddresses\").then((response) => {\n            if (!response) this._recentAddresses = [];\n            else {\n                response.forEach((address: AddressBook) => {\n                    this._recentAddresses.push(address);\n                });\n            }\n        });\n    }\n\n    get swapData$(): Observable<SwapData> {\n        return this._swapData$.asObservable();\n    }\n\n    set swapData(value: SwapData) {\n        this._chromeService.setItem(\"swapData\", value);\n        this._swapData = value;\n        this._swapData$.next(this._swapData);\n    }\n\n    get transactionData$(): Observable<TransactionData> {\n        return this._transactionData$.asObservable();\n    }\n\n    addToRecentAddresses(address: AddressBook): void {\n        if (!this._transactionData?.receiver?.address) return;\n\n        const index = this._recentAddresses.map((recent) => recent.address).indexOf(address.address);\n\n        if (index > -1) {\n            this._recentAddresses[index].lastUsed = new Date().toISOString();\n\n            this._recentAddresses.sort((a, b) => new Date(b.lastUsed!).getTime() - new Date(a.lastUsed!).getTime());\n        } else {\n            this._recentAddresses.push({\n                ...address,\n                lastUsed: new Date().toISOString(),\n            });\n\n            if (this._recentAddresses.length > 5) {\n                this._recentAddresses.sort((a, b) => new Date(a.lastUsed!).getTime() - new Date(b.lastUsed!).getTime());\n                this._recentAddresses.shift();\n            }\n        }\n\n        this._chromeService.setItem(\"recentAddresses\", this._recentAddresses);\n    }\n\n    findAddressInRecentAddresses<K extends keyof AddressBook>(key: K, value: any): AddressBook[] {\n        return this._recentAddresses.filter((recent) => recent[key] === value);\n    }\n\n    async getCurrentTransactionData(): Promise<TransactionData> {\n        if (this._transactionData) return this._transactionData;\n\n        this._transactionData = new TransactionData((await this._chromeService.getItem(\"transactionData\")) || {});\n\n        return this._transactionData;\n    }\n\n    async getCurrentSwapData(): Promise<SwapData> {\n        if (this._swapData) return this._swapData;\n\n        this._swapData = new SwapData((await this._chromeService.getItem(\"swapData\")) || {});\n\n        return this._swapData;\n    }\n\n    async removeTransactionData(): Promise<void> {\n        await this._chromeService.removeItem(\"transactionData\");\n    }\n\n    removeAddressFromRecentAddresses(address: string): void {\n        const index = this._recentAddresses.map((recent) => recent.address).indexOf(address);\n\n        if (index === -1) return;\n\n        this._recentAddresses.splice(index, 1);\n    }\n\n    async setCurrentTransactionData(data: TransactionData): Promise<void> {\n        this._transactionData = new TransactionData(data);\n\n        await this._chromeService.setItem(\"transactionData\", this._transactionData);\n    }\n}\n"],"names":["NetworkService","_chromeService","constructor","getNetworkSymbol","network","getNetworkName","symbol","upperSymbol","toUpperCase","console","warn","getNetworkToken","_this","_asyncToGenerator","tokens","getItemSession","length","find","token","name","toLowerCase","getChainId","getNetworkImage","i0","ɵɵinject","i1","ChromeService","factory","ɵfac","providedIn","SwapData","TransactionData","Subject","TransactionService","_recentAddresses","_swapData","_swapData$","_transactionData","_transactionData$","getItem","then","response","next","forEach","address","push","swapData$","asObservable","swapData","value","setItem","transactionData$","addToRecentAddresses","receiver","index","map","recent","indexOf","lastUsed","Date","toISOString","sort","a","b","getTime","shift","findAddressInRecentAddresses","key","filter","getCurrentTransactionData","getCurrentSwapData","_this2","removeTransactionData","_this3","removeItem","removeAddressFromRecentAddresses","splice","setCurrentTransactionData","data","_this4"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}