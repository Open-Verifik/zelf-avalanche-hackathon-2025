{"version":3,"file":"default-src_app_pipes_first-letter_pipe_ts-src_app_pipes_zelf-name_pipe_ts-node_modules_angul-52eacd.js","mappings":"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","sources":["./src/app/pipes/zelf-name.pipe.ts","./node_modules/@angular/material/fesm2022/icon-registry-B2IMBfNA.mjs","./src/app/pipes/first-letter.pipe.ts","./node_modules/@angular/material/fesm2022/icon.mjs"],"sourcesContent":["import { Pipe, type PipeTransform, ChangeDetectorRef, Injectable, NgZone, OnDestroy } from \"@angular/core\";\n\n/**\n * Pipe to format the Zelf name.\n *\n * Use pipe without arguments to return the name resized for different screen sizes.\n * Use pipe with a number argument to return the name resized for small screen sizes with a custom length.\n * Adjusts based on screen size;\n *\n * @example\n *  {{ \"testinglargezelfname.zelf\" | zelfName }} // TESTINGL...AME.ZELF\n *  {{ \"testinglargezelfname.zelf\" | zelfName: 10 }} // TESTINGL...ME.ZELF\n *  {{ \"testinglargezelfname.zelf\" | zelfName: 20 }} // TESTINGLARGEZELFNAME.ZELF\n */\n@Pipe({\n    name: \"zelfName\",\n    pure: false,\n})\n@Injectable()\nexport class ZelfNamePipe implements PipeTransform, OnDestroy {\n    private _onResize = this.onResize.bind(this);\n\n    constructor(\n        private cdr: ChangeDetectorRef,\n        private ngZone: NgZone\n    ) {\n        window.addEventListener(\"resize\", this._onResize);\n    }\n\n    ngOnDestroy() {\n        window.removeEventListener(\"resize\", this._onResize);\n    }\n\n    transform(value?: string, ...args: number[]): unknown {\n        if (typeof value !== \"string\" || !value?.trim()) return \"****.zelf\";\n\n        const hasZelfPostfix = value.includes(\".zelf\");\n        const zelfName = value.split(\".zelf\")[0];\n        const windowWidth = window.innerWidth;\n\n        if (!isNaN(+args[0])) {\n            if (+args[0] && args[0] <= 10) return zelfName.trim().toUpperCase();\n\n            if (windowWidth < 480 && zelfName?.trim().length > +args[0]) {\n                if (hasZelfPostfix) return this.transform(value.split(\".zelf\")[0], +args[0]);\n\n                return `${zelfName.slice(0, +args[0] - 10)}...${zelfName.slice(-9)}`.toUpperCase();\n            }\n        } else {\n            if (windowWidth < 480 && zelfName?.trim().length > 15) {\n                if (hasZelfPostfix) return this.transform(value.split(\".zelf\")[0], +args[0]);\n\n                return `${zelfName.slice(0, 15 - 10)}...${zelfName.slice(-9)}`.toUpperCase();\n            }\n\n            if (windowWidth < 768 && zelfName?.trim().length > 24) {\n                if (hasZelfPostfix) return this.transform(value.split(\".zelf\")[0], +args[0]);\n\n                return `${zelfName.slice(0, 24 - 10)}...${zelfName.slice(-9)}`.toUpperCase();\n            }\n        }\n\n        return zelfName.trim().toUpperCase();\n    }\n\n    private onResize() {\n        this.ngZone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler } from '@angular/core';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { of, throwError, forkJoin } from 'rxjs';\nimport { tap, map, catchError, finalize, share } from 'rxjs/operators';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient for use with Angular Material icons. ' +\n        'Please add provideHttpClient() to your providers.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    url;\n    svgText;\n    options;\n    svgElement;\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    _httpClient;\n    _sanitizer;\n    _errorHandler;\n    _document;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n    _svgIconConfigs = new Map();\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n    _iconSetConfigs = new Map();\n    /** Cache for icons loaded by direct URLs. */\n    _cachedIconsByUrl = new Map();\n    /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n    _inProgressUrlFetches = new Map();\n    /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n    _fontCssClassesByAlias = new Map();\n    /** Registered icon resolver functions. */\n    _resolvers = [];\n    /**\n     * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n     * specified. The default 'material-icons' value assumes that the material icon font has been\n     * loaded as described at https://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n    _defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, classNames = alias) {\n        this._fontCssClassesByAlias.set(alias, classNames);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n        this._defaultFontSetClass = classNames;\n        return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = options?.withCredentials ?? false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ErrorHandler }] });\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\nexport { ICON_REGISTRY_PROVIDER_FACTORY as I, MatIconRegistry as M, getMatIconNoHttpProviderError as a, getMatIconFailedToSanitizeUrlError as b, getMatIconFailedToSanitizeLiteralError as c, ICON_REGISTRY_PROVIDER as d, getMatIconNameNotFoundError as g };\n","import { Pipe, type PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"firstLetter\",\n})\nexport class FirstLetterPipe implements PipeTransform {\n    transform(value?: string): unknown {\n        return typeof value === \"string\" && value?.trim() ? value.charAt(0).toUpperCase() : \"\";\n    }\n}\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, ErrorHandler, HostAttributeToken, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { M as MatIconRegistry } from './icon-registry-B2IMBfNA.mjs';\nexport { d as ICON_REGISTRY_PROVIDER, I as ICON_REGISTRY_PROVIDER_FACTORY, c as getMatIconFailedToSanitizeLiteralError, b as getMatIconFailedToSanitizeUrlError, g as getMatIconNameNotFoundError, a as getMatIconNoHttpProviderError } from './icon-registry-B2IMBfNA.mjs';\nimport { M as MatCommonModule } from './common-module-WayjW0Pb.mjs';\nimport '@angular/common/http';\nimport '@angular/platform-browser';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/bidi';\n\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fontawesome-v4.github.io/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon {\n    _elementRef = inject(ElementRef);\n    _iconRegistry = inject(MatIconRegistry);\n    _location = inject(MAT_ICON_LOCATION);\n    _errorHandler = inject(ErrorHandler);\n    _defaultColor;\n    /**\n     * Theme color of the icon. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/icon/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color || this._defaultColor;\n    }\n    set color(value) {\n        this._color = value;\n    }\n    _color;\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    inline = false;\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    _svgIcon;\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    _fontSet;\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    _fontIcon;\n    _previousFontSetClass = [];\n    _previousFontIconClass;\n    _svgName;\n    _svgNamespace;\n    /** Keeps track of the current page path. */\n    _previousPath;\n    /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n    _elementsWithExternalReferences;\n    /** Subscription to the current in-progress SVG icon request. */\n    _currentIconFetch = Subscription.EMPTY;\n    constructor() {\n        const ariaHidden = inject(new HostAttributeToken('aria-hidden'), { optional: true });\n        const defaults = inject(MAT_ICON_DEFAULT_OPTIONS, { optional: true });\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this._defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            this._elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatIcon, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"19.2.6\", type: MatIcon, isStandalone: true, selector: \"mat-icon\", inputs: { color: \"color\", inline: [\"inline\", \"inline\", booleanAttribute], svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color, inherit)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color, inherit)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input\n            }], inline: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\nclass MatIconModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatIcon], exports: [MatIcon, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatIcon],\n                    exports: [MatIcon, MatCommonModule],\n                }]\n        }] });\n\nexport { MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry };\n"],"names":["ZelfNamePipe","cdr","ngZone","_onResize","onResize","bind","constructor","window","addEventListener","ngOnDestroy","removeEventListener","transform","value","args","trim","hasZelfPostfix","includes","zelfName","split","windowWidth","innerWidth","isNaN","toUpperCase","length","slice","run","markForCheck","i0","ɵɵdirectiveInject","ChangeDetectorRef","NgZone","pure","factory","ɵfac","DOCUMENT","i1","HttpClient","SecurityContext","Injectable","Optional","Inject","SkipSelf","ErrorHandler","i2","DomSanitizer","of","throwError","forkJoin","tap","map","catchError","finalize","share","policy","getPolicy","undefined","ttWindow","trustedTypes","createPolicy","createHTML","s","trustedHTMLFromString","html","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","options","svgElement","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_document","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","push","cleanLiteral","sanitize","HTML","trustedLiteral","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","classNames","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","getNamedSvgIcon","name","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","foundIcon","i","toString","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","withCredentials","inProgressFetch","req","responseType","delete","configNamespace","result","isSafeUrlWithOptions","MatIconRegistry_Factory","__ngFactoryType__","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","providedIn","ngDevMode","ɵsetClassMetadata","type","decorators","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","I","M","a","b","c","d","g","FirstLetterPipe","charAt","InjectionToken","inject","ElementRef","HostAttributeToken","booleanAttribute","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","NgModule","Subscription","take","_c0","MatCommonModule","MAT_ICON_DEFAULT_OPTIONS","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","_elementRef","_iconRegistry","_defaultColor","color","_color","inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","_previousFontSetClass","_previousFontIconClass","_svgName","_svgNamespace","_previousPath","_elementsWithExternalReferences","_currentIconFetch","EMPTY","ariaHidden","optional","defaults","nativeElement","_splitIconName","parts","ngOnInit","ngAfterViewChecked","cachedElements","size","newPath","_prependPathToReferences","unsubscribe","_usingFontIcon","_setSvgElement","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","elem","fontSetClasses","className","forEach","classList","add","elements","attrs","elementsWithFuncIri","querySelectorAll","elementWithReference","getAttribute","match","rawName","subscribe","MatIcon_Factory","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassMap","ɵɵclassProp","inputs","exportAs","ngContentSelectors","decls","vars","template","MatIcon_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","selector","host","None","OnPush","MatIconModule","MatIconModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sourceRoot":"webpack:///","x_google_ignoreList":[1,3]}